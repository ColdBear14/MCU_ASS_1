
MCU_ASS_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08003e58  08003e58  00013e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f00  08003f00  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  08003f00  08003f00  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f00  08003f00  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f00  08003f00  00013f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f04  08003f04  00013f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08003f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  200000c8  08003fd0  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08003fd0  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b38  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000257b  00000000  00000000  00031c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  000341a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb0  00000000  00000000  00035170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ec8  00000000  00000000  00036020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001429b  00000000  00000000  0004eee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d9a2  00000000  00000000  00063183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f0b25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044c0  00000000  00000000  000f0b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c8 	.word	0x200000c8
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e40 	.word	0x08003e40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000cc 	.word	0x200000cc
 8000148:	08003e40 	.word	0x08003e40

0800014c <IsButtonPress>:
int TimerForKeyPress[3] = {300,300,300};

int button_flag[3];
int button_long_flag[3];

int IsButtonPress(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <IsButtonPress+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <IsButtonPress+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <IsButtonPress+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <IsButtonPress+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000108 	.word	0x20000108

08000180 <subKeyProcess>:
	}
	return 0;
}


void subKeyProcess(int index) {
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000108 	.word	0x20000108

080001a0 <getIndex>:

int getIndex(int index) {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	switch(index){
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	2b02      	cmp	r3, #2
 80001ac:	d016      	beq.n	80001dc <getIndex+0x3c>
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	2b02      	cmp	r3, #2
 80001b2:	dc19      	bgt.n	80001e8 <getIndex+0x48>
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d003      	beq.n	80001c2 <getIndex+0x22>
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	2b01      	cmp	r3, #1
 80001be:	d007      	beq.n	80001d0 <getIndex+0x30>
			break;
		case 2:
			return HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
			break;
		default:
			break;
 80001c0:	e012      	b.n	80001e8 <getIndex+0x48>
			return HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80001c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c6:	480b      	ldr	r0, [pc, #44]	; (80001f4 <getIndex+0x54>)
 80001c8:	f001 fbda 	bl	8001980 <HAL_GPIO_ReadPin>
 80001cc:	4603      	mov	r3, r0
 80001ce:	e00d      	b.n	80001ec <getIndex+0x4c>
			return HAL_GPIO_ReadPin(A0_GPIO_Port, A0_Pin);
 80001d0:	2101      	movs	r1, #1
 80001d2:	4809      	ldr	r0, [pc, #36]	; (80001f8 <getIndex+0x58>)
 80001d4:	f001 fbd4 	bl	8001980 <HAL_GPIO_ReadPin>
 80001d8:	4603      	mov	r3, r0
 80001da:	e007      	b.n	80001ec <getIndex+0x4c>
			return HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
 80001dc:	2102      	movs	r1, #2
 80001de:	4806      	ldr	r0, [pc, #24]	; (80001f8 <getIndex+0x58>)
 80001e0:	f001 fbce 	bl	8001980 <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	e001      	b.n	80001ec <getIndex+0x4c>
			break;
 80001e8:	bf00      	nop
	}
	return 0;
 80001ea:	2300      	movs	r3, #0
}
 80001ec:	4618      	mov	r0, r3
 80001ee:	3708      	adds	r7, #8
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	40011000 	.word	0x40011000
 80001f8:	40010800 	.word	0x40010800

080001fc <getKeyInput>:

void getKeyInput() {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 8000202:	2300      	movs	r3, #0
 8000204:	607b      	str	r3, [r7, #4]
 8000206:	e06d      	b.n	80002e4 <getKeyInput+0xe8>
		KeyReg0[i] = KeyReg1[i];
 8000208:	4a3a      	ldr	r2, [pc, #232]	; (80002f4 <getKeyInput+0xf8>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000210:	4939      	ldr	r1, [pc, #228]	; (80002f8 <getKeyInput+0xfc>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000218:	4a38      	ldr	r2, [pc, #224]	; (80002fc <getKeyInput+0x100>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	4934      	ldr	r1, [pc, #208]	; (80002f4 <getKeyInput+0xf8>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		KeyReg2[i] = getIndex(i) ;
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f7ff ffb9 	bl	80001a0 <getIndex>
 800022e:	4602      	mov	r2, r0
 8000230:	4932      	ldr	r1, [pc, #200]	; (80002fc <getKeyInput+0x100>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 8000238:	4a2f      	ldr	r2, [pc, #188]	; (80002f8 <getKeyInput+0xfc>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000240:	492c      	ldr	r1, [pc, #176]	; (80002f4 <getKeyInput+0xf8>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000248:	429a      	cmp	r2, r3
 800024a:	d148      	bne.n	80002de <getKeyInput+0xe2>
 800024c:	4a29      	ldr	r2, [pc, #164]	; (80002f4 <getKeyInput+0xf8>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000254:	4929      	ldr	r1, [pc, #164]	; (80002fc <getKeyInput+0x100>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800025c:	429a      	cmp	r2, r3
 800025e:	d13e      	bne.n	80002de <getKeyInput+0xe2>
			//case short pressed
			if (KeyReg3[i] != KeyReg2[i]) {
 8000260:	4a27      	ldr	r2, [pc, #156]	; (8000300 <getKeyInput+0x104>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000268:	4924      	ldr	r1, [pc, #144]	; (80002fc <getKeyInput+0x100>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000270:	429a      	cmp	r2, r3
 8000272:	d01b      	beq.n	80002ac <getKeyInput+0xb0>
				KeyReg3[i] = KeyReg2[i];
 8000274:	4a21      	ldr	r2, [pc, #132]	; (80002fc <getKeyInput+0x100>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800027c:	4920      	ldr	r1, [pc, #128]	; (8000300 <getKeyInput+0x104>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESS_STATE) {
 8000284:	4a1d      	ldr	r2, [pc, #116]	; (80002fc <getKeyInput+0x100>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d126      	bne.n	80002de <getKeyInput+0xe2>
					//todo
					subKeyProcess(i);
 8000290:	6878      	ldr	r0, [r7, #4]
 8000292:	f7ff ff75 	bl	8000180 <subKeyProcess>
					HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000296:	2120      	movs	r1, #32
 8000298:	481a      	ldr	r0, [pc, #104]	; (8000304 <getKeyInput+0x108>)
 800029a:	f001 fba0 	bl	80019de <HAL_GPIO_TogglePin>
					TimerForKeyPress[i] = 300;
 800029e:	4a1a      	ldr	r2, [pc, #104]	; (8000308 <getKeyInput+0x10c>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80002a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002aa:	e018      	b.n	80002de <getKeyInput+0xe2>

				}
			} else { // case long pressed
				TimerForKeyPress[i]--;
 80002ac:	4a16      	ldr	r2, [pc, #88]	; (8000308 <getKeyInput+0x10c>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b4:	1e5a      	subs	r2, r3, #1
 80002b6:	4914      	ldr	r1, [pc, #80]	; (8000308 <getKeyInput+0x10c>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimerForKeyPress[i] == 0) {
 80002be:	4a12      	ldr	r2, [pc, #72]	; (8000308 <getKeyInput+0x10c>)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d109      	bne.n	80002de <getKeyInput+0xe2>
					//todo
					button_long_flag[i] = 1;
 80002ca:	4a10      	ldr	r2, [pc, #64]	; (800030c <getKeyInput+0x110>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2101      	movs	r1, #1
 80002d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					KeyReg3[i] = NORMAL_STATE;
 80002d4:	4a0a      	ldr	r2, [pc, #40]	; (8000300 <getKeyInput+0x104>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2101      	movs	r1, #1
 80002da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 3; i++) {
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	3301      	adds	r3, #1
 80002e2:	607b      	str	r3, [r7, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2b02      	cmp	r3, #2
 80002e8:	dd8e      	ble.n	8000208 <getKeyInput+0xc>
				}
			}
		}
	}
}
 80002ea:	bf00      	nop
 80002ec:	bf00      	nop
 80002ee:	3708      	adds	r7, #8
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	2000000c 	.word	0x2000000c
 80002f8:	20000000 	.word	0x20000000
 80002fc:	20000018 	.word	0x20000018
 8000300:	20000024 	.word	0x20000024
 8000304:	40010800 	.word	0x40010800
 8000308:	20000030 	.word	0x20000030
 800030c:	20000114 	.word	0x20000114

08000310 <clearStatus_A>:

int status_RED_B = 0;
int status_GREEN_B = 1;
int status_YELLOW_B = 0;

void clearStatus_A(){
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	status_RED_A = 0;
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <clearStatus_A+0x20>)
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
	status_GREEN_A = 0;
 800031a:	4b06      	ldr	r3, [pc, #24]	; (8000334 <clearStatus_A+0x24>)
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
	status_YELLOW_A = 0;
 8000320:	4b05      	ldr	r3, [pc, #20]	; (8000338 <clearStatus_A+0x28>)
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
}
 8000326:	bf00      	nop
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	2000003c 	.word	0x2000003c
 8000334:	200000e4 	.word	0x200000e4
 8000338:	200000e8 	.word	0x200000e8

0800033c <clearStatus_B>:
void clearStatus_B(){
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
	status_RED_B = 0;
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <clearStatus_B+0x20>)
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
	status_GREEN_B = 0;
 8000346:	4b06      	ldr	r3, [pc, #24]	; (8000360 <clearStatus_B+0x24>)
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
	status_YELLOW_B = 0;
 800034c:	4b05      	ldr	r3, [pc, #20]	; (8000364 <clearStatus_B+0x28>)
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
}
 8000352:	bf00      	nop
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	200000ec 	.word	0x200000ec
 8000360:	20000040 	.word	0x20000040
 8000364:	200000f0 	.word	0x200000f0

08000368 <clearStatus>:

void clearStatus(){
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
	status_RED_A = 0;
 800036c:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <clearStatus+0x30>)
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
		status_GREEN_A = 0;
 8000372:	4b0a      	ldr	r3, [pc, #40]	; (800039c <clearStatus+0x34>)
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
		status_YELLOW_A = 0;
 8000378:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <clearStatus+0x38>)
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
	status_RED_B = 0;
 800037e:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <clearStatus+0x3c>)
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
	status_GREEN_B = 0;
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <clearStatus+0x40>)
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
	status_YELLOW_B = 0;
 800038a:	4b08      	ldr	r3, [pc, #32]	; (80003ac <clearStatus+0x44>)
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr
 8000398:	2000003c 	.word	0x2000003c
 800039c:	200000e4 	.word	0x200000e4
 80003a0:	200000e8 	.word	0x200000e8
 80003a4:	200000ec 	.word	0x200000ec
 80003a8:	20000040 	.word	0x20000040
 80003ac:	200000f0 	.word	0x200000f0

080003b0 <displayTraffic>:

void displayTraffic() {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	//group a
	if (status_RED_A == 1) {
 80003b4:	4b2d      	ldr	r3, [pc, #180]	; (800046c <displayTraffic+0xbc>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d109      	bne.n	80003d0 <displayTraffic+0x20>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	2108      	movs	r1, #8
 80003c0:	482b      	ldr	r0, [pc, #172]	; (8000470 <displayTraffic+0xc0>)
 80003c2:	f001 faf4 	bl	80019ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80003c6:	2201      	movs	r2, #1
 80003c8:	2120      	movs	r1, #32
 80003ca:	4829      	ldr	r0, [pc, #164]	; (8000470 <displayTraffic+0xc0>)
 80003cc:	f001 faef 	bl	80019ae <HAL_GPIO_WritePin>
	}
	if (status_YELLOW_A == 1) {
 80003d0:	4b28      	ldr	r3, [pc, #160]	; (8000474 <displayTraffic+0xc4>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d109      	bne.n	80003ec <displayTraffic+0x3c>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	2108      	movs	r1, #8
 80003dc:	4824      	ldr	r0, [pc, #144]	; (8000470 <displayTraffic+0xc0>)
 80003de:	f001 fae6 	bl	80019ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80003e2:	2201      	movs	r2, #1
 80003e4:	2120      	movs	r1, #32
 80003e6:	4822      	ldr	r0, [pc, #136]	; (8000470 <displayTraffic+0xc0>)
 80003e8:	f001 fae1 	bl	80019ae <HAL_GPIO_WritePin>
	}
	if (status_GREEN_A == 1) {
 80003ec:	4b22      	ldr	r3, [pc, #136]	; (8000478 <displayTraffic+0xc8>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d109      	bne.n	8000408 <displayTraffic+0x58>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80003f4:	2201      	movs	r2, #1
 80003f6:	2108      	movs	r1, #8
 80003f8:	481d      	ldr	r0, [pc, #116]	; (8000470 <displayTraffic+0xc0>)
 80003fa:	f001 fad8 	bl	80019ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2120      	movs	r1, #32
 8000402:	481b      	ldr	r0, [pc, #108]	; (8000470 <displayTraffic+0xc0>)
 8000404:	f001 fad3 	bl	80019ae <HAL_GPIO_WritePin>
	}
	//group b
	if (status_RED_B == 1) {
 8000408:	4b1c      	ldr	r3, [pc, #112]	; (800047c <displayTraffic+0xcc>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2b01      	cmp	r3, #1
 800040e:	d10b      	bne.n	8000428 <displayTraffic+0x78>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000410:	2201      	movs	r2, #1
 8000412:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000416:	481a      	ldr	r0, [pc, #104]	; (8000480 <displayTraffic+0xd0>)
 8000418:	f001 fac9 	bl	80019ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, SET);
 800041c:	2201      	movs	r2, #1
 800041e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000422:	4817      	ldr	r0, [pc, #92]	; (8000480 <displayTraffic+0xd0>)
 8000424:	f001 fac3 	bl	80019ae <HAL_GPIO_WritePin>
	}
	if (status_YELLOW_B == 1) {
 8000428:	4b16      	ldr	r3, [pc, #88]	; (8000484 <displayTraffic+0xd4>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	2b01      	cmp	r3, #1
 800042e:	d10b      	bne.n	8000448 <displayTraffic+0x98>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000436:	4812      	ldr	r0, [pc, #72]	; (8000480 <displayTraffic+0xd0>)
 8000438:	f001 fab9 	bl	80019ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, SET);
 800043c:	2201      	movs	r2, #1
 800043e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000442:	480f      	ldr	r0, [pc, #60]	; (8000480 <displayTraffic+0xd0>)
 8000444:	f001 fab3 	bl	80019ae <HAL_GPIO_WritePin>
	}
	if (status_GREEN_B == 1) {
 8000448:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <displayTraffic+0xd8>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2b01      	cmp	r3, #1
 800044e:	d10b      	bne.n	8000468 <displayTraffic+0xb8>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000450:	2201      	movs	r2, #1
 8000452:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000456:	480a      	ldr	r0, [pc, #40]	; (8000480 <displayTraffic+0xd0>)
 8000458:	f001 faa9 	bl	80019ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000462:	4807      	ldr	r0, [pc, #28]	; (8000480 <displayTraffic+0xd0>)
 8000464:	f001 faa3 	bl	80019ae <HAL_GPIO_WritePin>
	}
}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	2000003c 	.word	0x2000003c
 8000470:	40010c00 	.word	0x40010c00
 8000474:	200000e8 	.word	0x200000e8
 8000478:	200000e4 	.word	0x200000e4
 800047c:	200000ec 	.word	0x200000ec
 8000480:	40010800 	.word	0x40010800
 8000484:	200000f0 	.word	0x200000f0
 8000488:	20000040 	.word	0x20000040

0800048c <statusModeTraffic>:

void statusModeTraffic(){
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	clearStatus();
 8000490:	f7ff ff6a 	bl	8000368 <clearStatus>
	if(statusMode == MODE2){
 8000494:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <statusModeTraffic+0x48>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b02      	cmp	r3, #2
 800049a:	d105      	bne.n	80004a8 <statusModeTraffic+0x1c>
		status_RED_A=1;
 800049c:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <statusModeTraffic+0x4c>)
 800049e:	2201      	movs	r2, #1
 80004a0:	601a      	str	r2, [r3, #0]
		status_RED_B=1;
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <statusModeTraffic+0x50>)
 80004a4:	2201      	movs	r2, #1
 80004a6:	601a      	str	r2, [r3, #0]
	}
	if(statusMode == MODE3){
 80004a8:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <statusModeTraffic+0x48>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b03      	cmp	r3, #3
 80004ae:	d105      	bne.n	80004bc <statusModeTraffic+0x30>
		status_GREEN_A=1;
 80004b0:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <statusModeTraffic+0x54>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	601a      	str	r2, [r3, #0]
		status_GREEN_B=1;
 80004b6:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <statusModeTraffic+0x58>)
 80004b8:	2201      	movs	r2, #1
 80004ba:	601a      	str	r2, [r3, #0]
	}
	if(statusMode == MODE4){
 80004bc:	4b05      	ldr	r3, [pc, #20]	; (80004d4 <statusModeTraffic+0x48>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2b04      	cmp	r3, #4
 80004c2:	d105      	bne.n	80004d0 <statusModeTraffic+0x44>
		status_YELLOW_A=1;
 80004c4:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <statusModeTraffic+0x5c>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	601a      	str	r2, [r3, #0]
		status_YELLOW_B=1;
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <statusModeTraffic+0x60>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	601a      	str	r2, [r3, #0]
	}
}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	200000f8 	.word	0x200000f8
 80004d8:	2000003c 	.word	0x2000003c
 80004dc:	200000ec 	.word	0x200000ec
 80004e0:	200000e4 	.word	0x200000e4
 80004e4:	20000040 	.word	0x20000040
 80004e8:	200000e8 	.word	0x200000e8
 80004ec:	200000f0 	.word	0x200000f0

080004f0 <statusTraffic_A>:

void statusTraffic_A(){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	clearStatus_A();
 80004f4:	f7ff ff0c 	bl	8000310 <clearStatus_A>
	if(status_A == AUTO_RED){
 80004f8:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <statusTraffic_A+0x38>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b0b      	cmp	r3, #11
 80004fe:	d102      	bne.n	8000506 <statusTraffic_A+0x16>
		status_RED_A=1;
 8000500:	4b0a      	ldr	r3, [pc, #40]	; (800052c <statusTraffic_A+0x3c>)
 8000502:	2201      	movs	r2, #1
 8000504:	601a      	str	r2, [r3, #0]
	}
	if(status_A == AUTO_GREEN){
 8000506:	4b08      	ldr	r3, [pc, #32]	; (8000528 <statusTraffic_A+0x38>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b0c      	cmp	r3, #12
 800050c:	d102      	bne.n	8000514 <statusTraffic_A+0x24>
		status_GREEN_A=1;
 800050e:	4b08      	ldr	r3, [pc, #32]	; (8000530 <statusTraffic_A+0x40>)
 8000510:	2201      	movs	r2, #1
 8000512:	601a      	str	r2, [r3, #0]
	}
	if(status_A == AUTO_YELLOW){
 8000514:	4b04      	ldr	r3, [pc, #16]	; (8000528 <statusTraffic_A+0x38>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b0d      	cmp	r3, #13
 800051a:	d102      	bne.n	8000522 <statusTraffic_A+0x32>
		status_YELLOW_A=1;
 800051c:	4b05      	ldr	r3, [pc, #20]	; (8000534 <statusTraffic_A+0x44>)
 800051e:	2201      	movs	r2, #1
 8000520:	601a      	str	r2, [r3, #0]
	}
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000044 	.word	0x20000044
 800052c:	2000003c 	.word	0x2000003c
 8000530:	200000e4 	.word	0x200000e4
 8000534:	200000e8 	.word	0x200000e8

08000538 <statusTraffic_B>:

void statusTraffic_B(){
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	clearStatus_B();
 800053c:	f7ff fefe 	bl	800033c <clearStatus_B>
	if(status_B == AUTO_RED){
 8000540:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <statusTraffic_B+0x38>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2b0b      	cmp	r3, #11
 8000546:	d102      	bne.n	800054e <statusTraffic_B+0x16>
		status_RED_B=1;
 8000548:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <statusTraffic_B+0x3c>)
 800054a:	2201      	movs	r2, #1
 800054c:	601a      	str	r2, [r3, #0]
	}
	if(status_B == AUTO_GREEN){
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <statusTraffic_B+0x38>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2b0c      	cmp	r3, #12
 8000554:	d102      	bne.n	800055c <statusTraffic_B+0x24>
		status_GREEN_B=1;
 8000556:	4b08      	ldr	r3, [pc, #32]	; (8000578 <statusTraffic_B+0x40>)
 8000558:	2201      	movs	r2, #1
 800055a:	601a      	str	r2, [r3, #0]
	}
	if(status_B == AUTO_YELLOW){
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <statusTraffic_B+0x38>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b0d      	cmp	r3, #13
 8000562:	d102      	bne.n	800056a <statusTraffic_B+0x32>
		status_YELLOW_B=1;
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <statusTraffic_B+0x44>)
 8000566:	2201      	movs	r2, #1
 8000568:	601a      	str	r2, [r3, #0]
	}
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000048 	.word	0x20000048
 8000574:	200000ec 	.word	0x200000ec
 8000578:	20000040 	.word	0x20000040
 800057c:	200000f0 	.word	0x200000f0

08000580 <fsm_automatic_run>:
int status_B = 10;

int count_Down_A;
int count_Down_B;

void fsm_automatic_run() {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	fsm_automatic_run_A();
 8000584:	f000 f804 	bl	8000590 <fsm_automatic_run_A>
	fsm_automatic_run_B();
 8000588:	f000 f88a 	bl	80006a0 <fsm_automatic_run_B>
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}

08000590 <fsm_automatic_run_A>:

void fsm_automatic_run_A() {
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	switch (status_A) {
 8000594:	4b3c      	ldr	r3, [pc, #240]	; (8000688 <fsm_automatic_run_A+0xf8>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	3b0a      	subs	r3, #10
 800059a:	2b03      	cmp	r3, #3
 800059c:	d871      	bhi.n	8000682 <fsm_automatic_run_A+0xf2>
 800059e:	a201      	add	r2, pc, #4	; (adr r2, 80005a4 <fsm_automatic_run_A+0x14>)
 80005a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a4:	080005b5 	.word	0x080005b5
 80005a8:	080005cf 	.word	0x080005cf
 80005ac:	0800060b 	.word	0x0800060b
 80005b0:	08000647 	.word	0x08000647
	case AUTO:
		status_A = AUTO_RED;
 80005b4:	4b34      	ldr	r3, [pc, #208]	; (8000688 <fsm_automatic_run_A+0xf8>)
 80005b6:	220b      	movs	r2, #11
 80005b8:	601a      	str	r2, [r3, #0]
		count_Down_A = RED_timer;
 80005ba:	4b34      	ldr	r3, [pc, #208]	; (800068c <fsm_automatic_run_A+0xfc>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a34      	ldr	r2, [pc, #208]	; (8000690 <fsm_automatic_run_A+0x100>)
 80005c0:	6013      	str	r3, [r2, #0]
		setTimer(0, 1000);
 80005c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005c6:	2000      	movs	r0, #0
 80005c8:	f000 fcf2 	bl	8000fb0 <setTimer>
		break;
 80005cc:	e05a      	b.n	8000684 <fsm_automatic_run_A+0xf4>
	case AUTO_RED:
		statusTraffic_A();
 80005ce:	f7ff ff8f 	bl	80004f0 <statusTraffic_A>
		if (count_Down_A <= 0) {
 80005d2:	4b2f      	ldr	r3, [pc, #188]	; (8000690 <fsm_automatic_run_A+0x100>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	dc06      	bgt.n	80005e8 <fsm_automatic_run_A+0x58>
			status_A = AUTO_GREEN;
 80005da:	4b2b      	ldr	r3, [pc, #172]	; (8000688 <fsm_automatic_run_A+0xf8>)
 80005dc:	220c      	movs	r2, #12
 80005de:	601a      	str	r2, [r3, #0]
			count_Down_A = GREEN_timer;
 80005e0:	4b2c      	ldr	r3, [pc, #176]	; (8000694 <fsm_automatic_run_A+0x104>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a2a      	ldr	r2, [pc, #168]	; (8000690 <fsm_automatic_run_A+0x100>)
 80005e6:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[0] == 1){
 80005e8:	4b2b      	ldr	r3, [pc, #172]	; (8000698 <fsm_automatic_run_A+0x108>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d109      	bne.n	8000604 <fsm_automatic_run_A+0x74>
			count_Down_A--;
 80005f0:	4b27      	ldr	r3, [pc, #156]	; (8000690 <fsm_automatic_run_A+0x100>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	3b01      	subs	r3, #1
 80005f6:	4a26      	ldr	r2, [pc, #152]	; (8000690 <fsm_automatic_run_A+0x100>)
 80005f8:	6013      	str	r3, [r2, #0]
			setTimer(0, 1000);
 80005fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 fcd6 	bl	8000fb0 <setTimer>
		}
		displayTraffic();
 8000604:	f7ff fed4 	bl	80003b0 <displayTraffic>
		break;
 8000608:	e03c      	b.n	8000684 <fsm_automatic_run_A+0xf4>
	case AUTO_GREEN:
		statusTraffic_A();
 800060a:	f7ff ff71 	bl	80004f0 <statusTraffic_A>
		if (count_Down_A <= 0) {
 800060e:	4b20      	ldr	r3, [pc, #128]	; (8000690 <fsm_automatic_run_A+0x100>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	dc06      	bgt.n	8000624 <fsm_automatic_run_A+0x94>
			status_A = AUTO_YELLOW;
 8000616:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <fsm_automatic_run_A+0xf8>)
 8000618:	220d      	movs	r2, #13
 800061a:	601a      	str	r2, [r3, #0]
			count_Down_A = YELLOW_timer;
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <fsm_automatic_run_A+0x10c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a1b      	ldr	r2, [pc, #108]	; (8000690 <fsm_automatic_run_A+0x100>)
 8000622:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[0] == 1){
 8000624:	4b1c      	ldr	r3, [pc, #112]	; (8000698 <fsm_automatic_run_A+0x108>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d109      	bne.n	8000640 <fsm_automatic_run_A+0xb0>
			count_Down_A--;
 800062c:	4b18      	ldr	r3, [pc, #96]	; (8000690 <fsm_automatic_run_A+0x100>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	3b01      	subs	r3, #1
 8000632:	4a17      	ldr	r2, [pc, #92]	; (8000690 <fsm_automatic_run_A+0x100>)
 8000634:	6013      	str	r3, [r2, #0]
			setTimer(0, 1000);
 8000636:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800063a:	2000      	movs	r0, #0
 800063c:	f000 fcb8 	bl	8000fb0 <setTimer>
		}
		displayTraffic();
 8000640:	f7ff feb6 	bl	80003b0 <displayTraffic>

		break;
 8000644:	e01e      	b.n	8000684 <fsm_automatic_run_A+0xf4>
	case AUTO_YELLOW:
		statusTraffic_A();
 8000646:	f7ff ff53 	bl	80004f0 <statusTraffic_A>
		if (count_Down_A <= 0) {
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <fsm_automatic_run_A+0x100>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	dc06      	bgt.n	8000660 <fsm_automatic_run_A+0xd0>
			status_A = AUTO_RED;
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <fsm_automatic_run_A+0xf8>)
 8000654:	220b      	movs	r2, #11
 8000656:	601a      	str	r2, [r3, #0]
			count_Down_A = RED_timer;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <fsm_automatic_run_A+0xfc>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a0c      	ldr	r2, [pc, #48]	; (8000690 <fsm_automatic_run_A+0x100>)
 800065e:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[0]==1){
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <fsm_automatic_run_A+0x108>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d109      	bne.n	800067c <fsm_automatic_run_A+0xec>
			count_Down_A--;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <fsm_automatic_run_A+0x100>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	3b01      	subs	r3, #1
 800066e:	4a08      	ldr	r2, [pc, #32]	; (8000690 <fsm_automatic_run_A+0x100>)
 8000670:	6013      	str	r3, [r2, #0]
			setTimer(0, 1000);
 8000672:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000676:	2000      	movs	r0, #0
 8000678:	f000 fc9a 	bl	8000fb0 <setTimer>
		}
		displayTraffic();
 800067c:	f7ff fe98 	bl	80003b0 <displayTraffic>

		break;
 8000680:	e000      	b.n	8000684 <fsm_automatic_run_A+0xf4>
	default:
		break;
 8000682:	bf00      	nop
	}
}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000044 	.word	0x20000044
 800068c:	2000004c 	.word	0x2000004c
 8000690:	20000120 	.word	0x20000120
 8000694:	20000050 	.word	0x20000050
 8000698:	20000234 	.word	0x20000234
 800069c:	20000054 	.word	0x20000054

080006a0 <fsm_automatic_run_B>:

void fsm_automatic_run_B() {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	switch (status_B) {
 80006a4:	4b3c      	ldr	r3, [pc, #240]	; (8000798 <fsm_automatic_run_B+0xf8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	3b0a      	subs	r3, #10
 80006aa:	2b03      	cmp	r3, #3
 80006ac:	d871      	bhi.n	8000792 <fsm_automatic_run_B+0xf2>
 80006ae:	a201      	add	r2, pc, #4	; (adr r2, 80006b4 <fsm_automatic_run_B+0x14>)
 80006b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b4:	080006c5 	.word	0x080006c5
 80006b8:	080006df 	.word	0x080006df
 80006bc:	0800071b 	.word	0x0800071b
 80006c0:	08000757 	.word	0x08000757
	case AUTO:
		status_B = AUTO_GREEN;
 80006c4:	4b34      	ldr	r3, [pc, #208]	; (8000798 <fsm_automatic_run_B+0xf8>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	601a      	str	r2, [r3, #0]
		count_Down_B = GREEN_timer;
 80006ca:	4b34      	ldr	r3, [pc, #208]	; (800079c <fsm_automatic_run_B+0xfc>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a34      	ldr	r2, [pc, #208]	; (80007a0 <fsm_automatic_run_B+0x100>)
 80006d0:	6013      	str	r3, [r2, #0]
		setTimer(1, 1000);
 80006d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006d6:	2001      	movs	r0, #1
 80006d8:	f000 fc6a 	bl	8000fb0 <setTimer>
		break;
 80006dc:	e05a      	b.n	8000794 <fsm_automatic_run_B+0xf4>
	case AUTO_RED:
		statusTraffic_B();
 80006de:	f7ff ff2b 	bl	8000538 <statusTraffic_B>
		if (count_Down_B <= 0) {
 80006e2:	4b2f      	ldr	r3, [pc, #188]	; (80007a0 <fsm_automatic_run_B+0x100>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	dc06      	bgt.n	80006f8 <fsm_automatic_run_B+0x58>
			status_B = AUTO_GREEN;
 80006ea:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <fsm_automatic_run_B+0xf8>)
 80006ec:	220c      	movs	r2, #12
 80006ee:	601a      	str	r2, [r3, #0]
			count_Down_B = GREEN_timer;
 80006f0:	4b2a      	ldr	r3, [pc, #168]	; (800079c <fsm_automatic_run_B+0xfc>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a2a      	ldr	r2, [pc, #168]	; (80007a0 <fsm_automatic_run_B+0x100>)
 80006f6:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[1] == 1){
 80006f8:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <fsm_automatic_run_B+0x104>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d109      	bne.n	8000714 <fsm_automatic_run_B+0x74>
			count_Down_B--;
 8000700:	4b27      	ldr	r3, [pc, #156]	; (80007a0 <fsm_automatic_run_B+0x100>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	3b01      	subs	r3, #1
 8000706:	4a26      	ldr	r2, [pc, #152]	; (80007a0 <fsm_automatic_run_B+0x100>)
 8000708:	6013      	str	r3, [r2, #0]
			setTimer(1, 1000);
 800070a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800070e:	2001      	movs	r0, #1
 8000710:	f000 fc4e 	bl	8000fb0 <setTimer>
		}
		displayTraffic();
 8000714:	f7ff fe4c 	bl	80003b0 <displayTraffic>
		break;
 8000718:	e03c      	b.n	8000794 <fsm_automatic_run_B+0xf4>
	case AUTO_GREEN:
		statusTraffic_B();
 800071a:	f7ff ff0d 	bl	8000538 <statusTraffic_B>
		if (count_Down_B <= 0) {
 800071e:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <fsm_automatic_run_B+0x100>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	dc06      	bgt.n	8000734 <fsm_automatic_run_B+0x94>
			status_B = AUTO_YELLOW;
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <fsm_automatic_run_B+0xf8>)
 8000728:	220d      	movs	r2, #13
 800072a:	601a      	str	r2, [r3, #0]
			count_Down_B = YELLOW_timer;
 800072c:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <fsm_automatic_run_B+0x108>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a1b      	ldr	r2, [pc, #108]	; (80007a0 <fsm_automatic_run_B+0x100>)
 8000732:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[1] == 1){
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <fsm_automatic_run_B+0x104>)
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	2b01      	cmp	r3, #1
 800073a:	d109      	bne.n	8000750 <fsm_automatic_run_B+0xb0>
			count_Down_B--;
 800073c:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <fsm_automatic_run_B+0x100>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	3b01      	subs	r3, #1
 8000742:	4a17      	ldr	r2, [pc, #92]	; (80007a0 <fsm_automatic_run_B+0x100>)
 8000744:	6013      	str	r3, [r2, #0]
			setTimer(1, 1000);
 8000746:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800074a:	2001      	movs	r0, #1
 800074c:	f000 fc30 	bl	8000fb0 <setTimer>
		}
		displayTraffic();
 8000750:	f7ff fe2e 	bl	80003b0 <displayTraffic>

		break;
 8000754:	e01e      	b.n	8000794 <fsm_automatic_run_B+0xf4>
	case AUTO_YELLOW:
		statusTraffic_B();
 8000756:	f7ff feef 	bl	8000538 <statusTraffic_B>
		if (count_Down_B <= 0) {
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <fsm_automatic_run_B+0x100>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	dc06      	bgt.n	8000770 <fsm_automatic_run_B+0xd0>
			status_B = AUTO_RED;
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <fsm_automatic_run_B+0xf8>)
 8000764:	220b      	movs	r2, #11
 8000766:	601a      	str	r2, [r3, #0]
			count_Down_B = RED_timer;
 8000768:	4b10      	ldr	r3, [pc, #64]	; (80007ac <fsm_automatic_run_B+0x10c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a0c      	ldr	r2, [pc, #48]	; (80007a0 <fsm_automatic_run_B+0x100>)
 800076e:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[1]==1){
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <fsm_automatic_run_B+0x104>)
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d109      	bne.n	800078c <fsm_automatic_run_B+0xec>
			count_Down_B--;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <fsm_automatic_run_B+0x100>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	3b01      	subs	r3, #1
 800077e:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <fsm_automatic_run_B+0x100>)
 8000780:	6013      	str	r3, [r2, #0]
			setTimer(1, 1000);
 8000782:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000786:	2001      	movs	r0, #1
 8000788:	f000 fc12 	bl	8000fb0 <setTimer>
		}
		displayTraffic();
 800078c:	f7ff fe10 	bl	80003b0 <displayTraffic>

		break;
 8000790:	e000      	b.n	8000794 <fsm_automatic_run_B+0xf4>
	default:
		break;
 8000792:	bf00      	nop
	}
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000048 	.word	0x20000048
 800079c:	20000050 	.word	0x20000050
 80007a0:	20000124 	.word	0x20000124
 80007a4:	20000234 	.word	0x20000234
 80007a8:	20000054 	.word	0x20000054
 80007ac:	2000004c 	.word	0x2000004c

080007b0 <fsm_lcd_run>:
 *      Author: Hy
 */

#include "fsm_lcd.h"

void fsm_lcd_run(){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	switch(statusMode){
 80007b4:	4b36      	ldr	r3, [pc, #216]	; (8000890 <fsm_lcd_run+0xe0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	3b01      	subs	r3, #1
 80007ba:	2b03      	cmp	r3, #3
 80007bc:	d864      	bhi.n	8000888 <fsm_lcd_run+0xd8>
 80007be:	a201      	add	r2, pc, #4	; (adr r2, 80007c4 <fsm_lcd_run+0x14>)
 80007c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c4:	080007d5 	.word	0x080007d5
 80007c8:	080007f3 	.word	0x080007f3
 80007cc:	08000825 	.word	0x08000825
 80007d0:	08000857 	.word	0x08000857
	case MODE1:

		lcd_display_value(1, 1, count_Down_A);
 80007d4:	4b2f      	ldr	r3, [pc, #188]	; (8000894 <fsm_lcd_run+0xe4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	2101      	movs	r1, #1
 80007dc:	2001      	movs	r0, #1
 80007de:	f000 f9e9 	bl	8000bb4 <lcd_display_value>
		lcd_display_value(2, 1, count_Down_B);
 80007e2:	4b2d      	ldr	r3, [pc, #180]	; (8000898 <fsm_lcd_run+0xe8>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	461a      	mov	r2, r3
 80007e8:	2101      	movs	r1, #1
 80007ea:	2002      	movs	r0, #2
 80007ec:	f000 f9e2 	bl	8000bb4 <lcd_display_value>

		break;
 80007f0:	e04b      	b.n	800088a <fsm_lcd_run+0xda>
	case MODE2:
		lcd_goto_XY(1, 0);
 80007f2:	2100      	movs	r1, #0
 80007f4:	2001      	movs	r0, #1
 80007f6:	f000 fa01 	bl	8000bfc <lcd_goto_XY>
		lcd_send_string("SET TIMER RED");
 80007fa:	4828      	ldr	r0, [pc, #160]	; (800089c <fsm_lcd_run+0xec>)
 80007fc:	f000 f9be 	bl	8000b7c <lcd_send_string>
		lcd_goto_XY(2, 1);
 8000800:	2101      	movs	r1, #1
 8000802:	2002      	movs	r0, #2
 8000804:	f000 f9fa 	bl	8000bfc <lcd_goto_XY>
		lcd_send_string("DURATION:");
 8000808:	4825      	ldr	r0, [pc, #148]	; (80008a0 <fsm_lcd_run+0xf0>)
 800080a:	f000 f9b7 	bl	8000b7c <lcd_send_string>
		lcd_display_value(2, 10, RED_timer + temp);
 800080e:	4b25      	ldr	r3, [pc, #148]	; (80008a4 <fsm_lcd_run+0xf4>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <fsm_lcd_run+0xf8>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4413      	add	r3, r2
 8000818:	461a      	mov	r2, r3
 800081a:	210a      	movs	r1, #10
 800081c:	2002      	movs	r0, #2
 800081e:	f000 f9c9 	bl	8000bb4 <lcd_display_value>
		break;
 8000822:	e032      	b.n	800088a <fsm_lcd_run+0xda>
	case MODE3:
		lcd_goto_XY(1, 0);
 8000824:	2100      	movs	r1, #0
 8000826:	2001      	movs	r0, #1
 8000828:	f000 f9e8 	bl	8000bfc <lcd_goto_XY>
		lcd_send_string("SET TIMER GREEN");
 800082c:	481f      	ldr	r0, [pc, #124]	; (80008ac <fsm_lcd_run+0xfc>)
 800082e:	f000 f9a5 	bl	8000b7c <lcd_send_string>
		lcd_goto_XY(2, 1);
 8000832:	2101      	movs	r1, #1
 8000834:	2002      	movs	r0, #2
 8000836:	f000 f9e1 	bl	8000bfc <lcd_goto_XY>
		lcd_send_string("DURATION:");
 800083a:	4819      	ldr	r0, [pc, #100]	; (80008a0 <fsm_lcd_run+0xf0>)
 800083c:	f000 f99e 	bl	8000b7c <lcd_send_string>
		lcd_display_value(2, 10, GREEN_timer + temp);
 8000840:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <fsm_lcd_run+0x100>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <fsm_lcd_run+0xf8>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4413      	add	r3, r2
 800084a:	461a      	mov	r2, r3
 800084c:	210a      	movs	r1, #10
 800084e:	2002      	movs	r0, #2
 8000850:	f000 f9b0 	bl	8000bb4 <lcd_display_value>
		break;
 8000854:	e019      	b.n	800088a <fsm_lcd_run+0xda>
	case MODE4:
		lcd_goto_XY(1, 0);
 8000856:	2100      	movs	r1, #0
 8000858:	2001      	movs	r0, #1
 800085a:	f000 f9cf 	bl	8000bfc <lcd_goto_XY>
		lcd_send_string("SET TIMER YELLOW");
 800085e:	4815      	ldr	r0, [pc, #84]	; (80008b4 <fsm_lcd_run+0x104>)
 8000860:	f000 f98c 	bl	8000b7c <lcd_send_string>
		lcd_goto_XY(2, 1);
 8000864:	2101      	movs	r1, #1
 8000866:	2002      	movs	r0, #2
 8000868:	f000 f9c8 	bl	8000bfc <lcd_goto_XY>
		lcd_send_string("DURATION:");
 800086c:	480c      	ldr	r0, [pc, #48]	; (80008a0 <fsm_lcd_run+0xf0>)
 800086e:	f000 f985 	bl	8000b7c <lcd_send_string>
		lcd_display_value(2, 10, YELLOW_timer + temp);
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <fsm_lcd_run+0x108>)
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <fsm_lcd_run+0xf8>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4413      	add	r3, r2
 800087c:	461a      	mov	r2, r3
 800087e:	210a      	movs	r1, #10
 8000880:	2002      	movs	r0, #2
 8000882:	f000 f997 	bl	8000bb4 <lcd_display_value>
		break;
 8000886:	e000      	b.n	800088a <fsm_lcd_run+0xda>


	default:
		break;
 8000888:	bf00      	nop
	}
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200000f8 	.word	0x200000f8
 8000894:	20000120 	.word	0x20000120
 8000898:	20000124 	.word	0x20000124
 800089c:	08003e58 	.word	0x08003e58
 80008a0:	08003e68 	.word	0x08003e68
 80008a4:	2000004c 	.word	0x2000004c
 80008a8:	200000f4 	.word	0x200000f4
 80008ac:	08003e74 	.word	0x08003e74
 80008b0:	20000050 	.word	0x20000050
 80008b4:	08003e84 	.word	0x08003e84
 80008b8:	20000054 	.word	0x20000054

080008bc <fsm_mode>:
int GREEN_timer = 3;
int YELLOW_timer = 2;

int temp =0;

void fsm_mode(){
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	switch(statusMode){
 80008c0:	4b60      	ldr	r3, [pc, #384]	; (8000a44 <fsm_mode+0x188>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b04      	cmp	r3, #4
 80008c6:	f200 80b8 	bhi.w	8000a3a <fsm_mode+0x17e>
 80008ca:	a201      	add	r2, pc, #4	; (adr r2, 80008d0 <fsm_mode+0x14>)
 80008cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d0:	080008e5 	.word	0x080008e5
 80008d4:	080008f9 	.word	0x080008f9
 80008d8:	0800091b 	.word	0x0800091b
 80008dc:	08000977 	.word	0x08000977
 80008e0:	080009d3 	.word	0x080009d3
	case INIT:
		statusMode = MODE1;
 80008e4:	4b57      	ldr	r3, [pc, #348]	; (8000a44 <fsm_mode+0x188>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	601a      	str	r2, [r3, #0]
		status_A = AUTO;
 80008ea:	4b57      	ldr	r3, [pc, #348]	; (8000a48 <fsm_mode+0x18c>)
 80008ec:	220a      	movs	r2, #10
 80008ee:	601a      	str	r2, [r3, #0]
		status_B = AUTO;
 80008f0:	4b56      	ldr	r3, [pc, #344]	; (8000a4c <fsm_mode+0x190>)
 80008f2:	220a      	movs	r2, #10
 80008f4:	601a      	str	r2, [r3, #0]
		break;
 80008f6:	e0a3      	b.n	8000a40 <fsm_mode+0x184>
	case MODE1:
		if(IsButtonPress(0)==1){
 80008f8:	2000      	movs	r0, #0
 80008fa:	f7ff fc27 	bl	800014c <IsButtonPress>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b01      	cmp	r3, #1
 8000902:	f040 809c 	bne.w	8000a3e <fsm_mode+0x182>
			statusMode=MODE2;
 8000906:	4b4f      	ldr	r3, [pc, #316]	; (8000a44 <fsm_mode+0x188>)
 8000908:	2202      	movs	r2, #2
 800090a:	601a      	str	r2, [r3, #0]
			status_A = 0;
 800090c:	4b4e      	ldr	r3, [pc, #312]	; (8000a48 <fsm_mode+0x18c>)
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
			status_B = 0;
 8000912:	4b4e      	ldr	r3, [pc, #312]	; (8000a4c <fsm_mode+0x190>)
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
		}
		break;
 8000918:	e091      	b.n	8000a3e <fsm_mode+0x182>
	case MODE2:
		statusModeTraffic();
 800091a:	f7ff fdb7 	bl	800048c <statusModeTraffic>

		if(IsButtonPress(0)==1){
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff fc14 	bl	800014c <IsButtonPress>
 8000924:	4603      	mov	r3, r0
 8000926:	2b01      	cmp	r3, #1
 8000928:	d107      	bne.n	800093a <fsm_mode+0x7e>
			statusMode=MODE3;
 800092a:	4b46      	ldr	r3, [pc, #280]	; (8000a44 <fsm_mode+0x188>)
 800092c:	2203      	movs	r2, #3
 800092e:	601a      	str	r2, [r3, #0]
			temp=0;
 8000930:	4b47      	ldr	r3, [pc, #284]	; (8000a50 <fsm_mode+0x194>)
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000936:	f000 f936 	bl	8000ba6 <lcd_clear_display>

		}
		if(IsButtonPress(1)==1){
 800093a:	2001      	movs	r0, #1
 800093c:	f7ff fc06 	bl	800014c <IsButtonPress>
 8000940:	4603      	mov	r3, r0
 8000942:	2b01      	cmp	r3, #1
 8000944:	d104      	bne.n	8000950 <fsm_mode+0x94>
			temp+=1;
 8000946:	4b42      	ldr	r3, [pc, #264]	; (8000a50 <fsm_mode+0x194>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	3301      	adds	r3, #1
 800094c:	4a40      	ldr	r2, [pc, #256]	; (8000a50 <fsm_mode+0x194>)
 800094e:	6013      	str	r3, [r2, #0]
		}
		if(IsButtonPress(2)==1){
 8000950:	2002      	movs	r0, #2
 8000952:	f7ff fbfb 	bl	800014c <IsButtonPress>
 8000956:	4603      	mov	r3, r0
 8000958:	2b01      	cmp	r3, #1
 800095a:	d109      	bne.n	8000970 <fsm_mode+0xb4>
			RED_timer+=temp;
 800095c:	4b3d      	ldr	r3, [pc, #244]	; (8000a54 <fsm_mode+0x198>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b3b      	ldr	r3, [pc, #236]	; (8000a50 <fsm_mode+0x194>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4413      	add	r3, r2
 8000966:	4a3b      	ldr	r2, [pc, #236]	; (8000a54 <fsm_mode+0x198>)
 8000968:	6013      	str	r3, [r2, #0]
			temp=0;
 800096a:	4b39      	ldr	r3, [pc, #228]	; (8000a50 <fsm_mode+0x194>)
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
		}
		displayTraffic();
 8000970:	f7ff fd1e 	bl	80003b0 <displayTraffic>
		break;
 8000974:	e064      	b.n	8000a40 <fsm_mode+0x184>
	case MODE3:
		statusModeTraffic();
 8000976:	f7ff fd89 	bl	800048c <statusModeTraffic>
		if(IsButtonPress(0)==1){
 800097a:	2000      	movs	r0, #0
 800097c:	f7ff fbe6 	bl	800014c <IsButtonPress>
 8000980:	4603      	mov	r3, r0
 8000982:	2b01      	cmp	r3, #1
 8000984:	d107      	bne.n	8000996 <fsm_mode+0xda>
			statusMode=MODE4;
 8000986:	4b2f      	ldr	r3, [pc, #188]	; (8000a44 <fsm_mode+0x188>)
 8000988:	2204      	movs	r2, #4
 800098a:	601a      	str	r2, [r3, #0]
			temp=0;
 800098c:	4b30      	ldr	r3, [pc, #192]	; (8000a50 <fsm_mode+0x194>)
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000992:	f000 f908 	bl	8000ba6 <lcd_clear_display>

		}
		if(IsButtonPress(1)==1){
 8000996:	2001      	movs	r0, #1
 8000998:	f7ff fbd8 	bl	800014c <IsButtonPress>
 800099c:	4603      	mov	r3, r0
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d104      	bne.n	80009ac <fsm_mode+0xf0>
			temp+=1;
 80009a2:	4b2b      	ldr	r3, [pc, #172]	; (8000a50 <fsm_mode+0x194>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	3301      	adds	r3, #1
 80009a8:	4a29      	ldr	r2, [pc, #164]	; (8000a50 <fsm_mode+0x194>)
 80009aa:	6013      	str	r3, [r2, #0]
		}
		if(IsButtonPress(2)==1){
 80009ac:	2002      	movs	r0, #2
 80009ae:	f7ff fbcd 	bl	800014c <IsButtonPress>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d109      	bne.n	80009cc <fsm_mode+0x110>
			GREEN_timer+=temp;
 80009b8:	4b27      	ldr	r3, [pc, #156]	; (8000a58 <fsm_mode+0x19c>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4b24      	ldr	r3, [pc, #144]	; (8000a50 <fsm_mode+0x194>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4413      	add	r3, r2
 80009c2:	4a25      	ldr	r2, [pc, #148]	; (8000a58 <fsm_mode+0x19c>)
 80009c4:	6013      	str	r3, [r2, #0]
			temp=0;
 80009c6:	4b22      	ldr	r3, [pc, #136]	; (8000a50 <fsm_mode+0x194>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
		}
		displayTraffic();
 80009cc:	f7ff fcf0 	bl	80003b0 <displayTraffic>
		break;
 80009d0:	e036      	b.n	8000a40 <fsm_mode+0x184>
	case MODE4:
		statusModeTraffic();
 80009d2:	f7ff fd5b 	bl	800048c <statusModeTraffic>
		if(IsButtonPress(0)==1){
 80009d6:	2000      	movs	r0, #0
 80009d8:	f7ff fbb8 	bl	800014c <IsButtonPress>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d10d      	bne.n	80009fe <fsm_mode+0x142>
			temp=0;
 80009e2:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <fsm_mode+0x194>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
			statusMode=MODE1;
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <fsm_mode+0x188>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	601a      	str	r2, [r3, #0]
			status_A = AUTO;
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <fsm_mode+0x18c>)
 80009f0:	220a      	movs	r2, #10
 80009f2:	601a      	str	r2, [r3, #0]
			status_B = AUTO;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <fsm_mode+0x190>)
 80009f6:	220a      	movs	r2, #10
 80009f8:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 80009fa:	f000 f8d4 	bl	8000ba6 <lcd_clear_display>
		}
		if(IsButtonPress(1)==1){
 80009fe:	2001      	movs	r0, #1
 8000a00:	f7ff fba4 	bl	800014c <IsButtonPress>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d104      	bne.n	8000a14 <fsm_mode+0x158>
			temp+=1;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <fsm_mode+0x194>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	4a0f      	ldr	r2, [pc, #60]	; (8000a50 <fsm_mode+0x194>)
 8000a12:	6013      	str	r3, [r2, #0]
		}
		if(IsButtonPress(2)==1){
 8000a14:	2002      	movs	r0, #2
 8000a16:	f7ff fb99 	bl	800014c <IsButtonPress>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d109      	bne.n	8000a34 <fsm_mode+0x178>
			YELLOW_timer+=temp;
 8000a20:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <fsm_mode+0x1a0>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <fsm_mode+0x194>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4413      	add	r3, r2
 8000a2a:	4a0c      	ldr	r2, [pc, #48]	; (8000a5c <fsm_mode+0x1a0>)
 8000a2c:	6013      	str	r3, [r2, #0]
			temp=0;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <fsm_mode+0x194>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
		}
		displayTraffic();
 8000a34:	f7ff fcbc 	bl	80003b0 <displayTraffic>
		break;
 8000a38:	e002      	b.n	8000a40 <fsm_mode+0x184>
	default:
		break;
 8000a3a:	bf00      	nop
 8000a3c:	e000      	b.n	8000a40 <fsm_mode+0x184>
		break;
 8000a3e:	bf00      	nop
	}
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200000f8 	.word	0x200000f8
 8000a48:	20000044 	.word	0x20000044
 8000a4c:	20000048 	.word	0x20000048
 8000a50:	200000f4 	.word	0x200000f4
 8000a54:	2000004c 	.word	0x2000004c
 8000a58:	20000050 	.word	0x20000050
 8000a5c:	20000054 	.word	0x20000054

08000a60 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af02      	add	r7, sp, #8
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	f023 030f 	bic.w	r3, r3, #15
 8000a70:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	011b      	lsls	r3, r3, #4
 8000a76:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	f043 030c 	orr.w	r3, r3, #12
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
 8000a84:	f043 0308 	orr.w	r3, r3, #8
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000a8c:	7bbb      	ldrb	r3, [r7, #14]
 8000a8e:	f043 030c 	orr.w	r3, r3, #12
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000a96:	7bbb      	ldrb	r3, [r7, #14]
 8000a98:	f043 0308 	orr.w	r3, r3, #8
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000aa0:	f107 0208 	add.w	r2, r7, #8
 8000aa4:	2364      	movs	r3, #100	; 0x64
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	2142      	movs	r1, #66	; 0x42
 8000aac:	4803      	ldr	r0, [pc, #12]	; (8000abc <lcd_send_cmd+0x5c>)
 8000aae:	f001 f915 	bl	8001cdc <HAL_I2C_Master_Transmit>
}
 8000ab2:	bf00      	nop
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000128 	.word	0x20000128

08000ac0 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af02      	add	r7, sp, #8
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	f023 030f 	bic.w	r3, r3, #15
 8000ad0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	011b      	lsls	r3, r3, #4
 8000ad6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	f043 030d 	orr.w	r3, r3, #13
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
 8000ae4:	f043 0309 	orr.w	r3, r3, #9
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000aec:	7bbb      	ldrb	r3, [r7, #14]
 8000aee:	f043 030d 	orr.w	r3, r3, #13
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000af6:	7bbb      	ldrb	r3, [r7, #14]
 8000af8:	f043 0309 	orr.w	r3, r3, #9
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b00:	f107 0208 	add.w	r2, r7, #8
 8000b04:	2364      	movs	r3, #100	; 0x64
 8000b06:	9300      	str	r3, [sp, #0]
 8000b08:	2304      	movs	r3, #4
 8000b0a:	2142      	movs	r1, #66	; 0x42
 8000b0c:	4803      	ldr	r0, [pc, #12]	; (8000b1c <lcd_send_data+0x5c>)
 8000b0e:	f001 f8e5 	bl	8001cdc <HAL_I2C_Master_Transmit>
}
 8000b12:	bf00      	nop
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000128 	.word	0x20000128

08000b20 <lcd_init>:

void lcd_init (void) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000b24:	2033      	movs	r0, #51	; 0x33
 8000b26:	f7ff ff9b 	bl	8000a60 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000b2a:	2032      	movs	r0, #50	; 0x32
 8000b2c:	f7ff ff98 	bl	8000a60 <lcd_send_cmd>
	HAL_Delay(50);
 8000b30:	2032      	movs	r0, #50	; 0x32
 8000b32:	f000 fc6f 	bl	8001414 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000b36:	2028      	movs	r0, #40	; 0x28
 8000b38:	f7ff ff92 	bl	8000a60 <lcd_send_cmd>
	HAL_Delay(50);
 8000b3c:	2032      	movs	r0, #50	; 0x32
 8000b3e:	f000 fc69 	bl	8001414 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000b42:	2001      	movs	r0, #1
 8000b44:	f7ff ff8c 	bl	8000a60 <lcd_send_cmd>
	HAL_Delay(50);
 8000b48:	2032      	movs	r0, #50	; 0x32
 8000b4a:	f000 fc63 	bl	8001414 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000b4e:	2006      	movs	r0, #6
 8000b50:	f7ff ff86 	bl	8000a60 <lcd_send_cmd>
	HAL_Delay(50);
 8000b54:	2032      	movs	r0, #50	; 0x32
 8000b56:	f000 fc5d 	bl	8001414 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000b5a:	200c      	movs	r0, #12
 8000b5c:	f7ff ff80 	bl	8000a60 <lcd_send_cmd>
	HAL_Delay(50);
 8000b60:	2032      	movs	r0, #50	; 0x32
 8000b62:	f000 fc57 	bl	8001414 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000b66:	2002      	movs	r0, #2
 8000b68:	f7ff ff7a 	bl	8000a60 <lcd_send_cmd>
	HAL_Delay(50);
 8000b6c:	2032      	movs	r0, #50	; 0x32
 8000b6e:	f000 fc51 	bl	8001414 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000b72:	2080      	movs	r0, #128	; 0x80
 8000b74:	f7ff ff74 	bl	8000a60 <lcd_send_cmd>
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000b84:	e006      	b.n	8000b94 <lcd_send_string+0x18>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	1c5a      	adds	r2, r3, #1
 8000b8a:	607a      	str	r2, [r7, #4]
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ff96 	bl	8000ac0 <lcd_send_data>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d1f4      	bne.n	8000b86 <lcd_send_string+0xa>
}
 8000b9c:	bf00      	nop
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <lcd_clear_display>:

void lcd_clear_display (void)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8000baa:	2001      	movs	r0, #1
 8000bac:	f7ff ff58 	bl	8000a60 <lcd_send_cmd>
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <lcd_display_value>:

void lcd_display_value(int row, int col, int value) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
    char *buffer = (char *)malloc(5 * sizeof(char)); // Cấp phát động 5 bytes (đủ cho 4 chữ số và '\0')
 8000bc0:	2005      	movs	r0, #5
 8000bc2:	f002 fceb 	bl	800359c <malloc>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	617b      	str	r3, [r7, #20]
    if (buffer == NULL) return; // Kiểm tra cấp phát thành công
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d00f      	beq.n	8000bf0 <lcd_display_value+0x3c>

    sprintf(buffer, "%-11d", value); // Chuyển giá trị thành chuỗi
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	4909      	ldr	r1, [pc, #36]	; (8000bf8 <lcd_display_value+0x44>)
 8000bd4:	6978      	ldr	r0, [r7, #20]
 8000bd6:	f002 fdaf 	bl	8003738 <siprintf>
    lcd_goto_XY(row, col);
 8000bda:	68b9      	ldr	r1, [r7, #8]
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f000 f80d 	bl	8000bfc <lcd_goto_XY>
    lcd_send_string(buffer);
 8000be2:	6978      	ldr	r0, [r7, #20]
 8000be4:	f7ff ffca 	bl	8000b7c <lcd_send_string>

    free(buffer); // Giải phóng bộ nhớ sau khi dùng
 8000be8:	6978      	ldr	r0, [r7, #20]
 8000bea:	f002 fcdf 	bl	80035ac <free>
 8000bee:	e000      	b.n	8000bf2 <lcd_display_value+0x3e>
    if (buffer == NULL) return; // Kiểm tra cấp phát thành công
 8000bf0:	bf00      	nop
}
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	08003e98 	.word	0x08003e98

08000bfc <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d108      	bne.n	8000c1e <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	4413      	add	r3, r2
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	337f      	adds	r3, #127	; 0x7f
 8000c1a:	73fb      	strb	r3, [r7, #15]
 8000c1c:	e008      	b.n	8000c30 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	3340      	adds	r3, #64	; 0x40
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	b25b      	sxtb	r3, r3
 8000c28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c2c:	b25b      	sxtb	r3, r3
 8000c2e:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff ff14 	bl	8000a60 <lcd_send_cmd>
}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c44:	f000 fb84 	bl	8001350 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c48:	f000 f816 	bl	8000c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c4c:	f000 f8f8 	bl	8000e40 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c50:	f000 f8cc 	bl	8000dec <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000c54:	f000 f850 	bl	8000cf8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000c58:	f000 f87c 	bl	8000d54 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <main+0x34>)
 8000c5e:	f001 fff3 	bl	8002c48 <HAL_TIM_Base_Start_IT>
  lcd_init();
 8000c62:	f7ff ff5d 	bl	8000b20 <lcd_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_automatic_run();
 8000c66:	f7ff fc8b 	bl	8000580 <fsm_automatic_run>
	  fsm_mode();
 8000c6a:	f7ff fe27 	bl	80008bc <fsm_mode>
	  fsm_lcd_run();
 8000c6e:	f7ff fd9f 	bl	80007b0 <fsm_lcd_run>
	  fsm_automatic_run();
 8000c72:	e7f8      	b.n	8000c66 <main+0x26>
 8000c74:	2000017c 	.word	0x2000017c

08000c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b090      	sub	sp, #64	; 0x40
 8000c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7e:	f107 0318 	add.w	r3, r7, #24
 8000c82:	2228      	movs	r2, #40	; 0x28
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f002 fc98 	bl	80035bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca2:	2310      	movs	r3, #16
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000caa:	2300      	movs	r3, #0
 8000cac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb2:	f107 0318 	add.w	r3, r7, #24
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f001 fb68 	bl	800238c <HAL_RCC_OscConfig>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000cc2:	f000 f96f 	bl	8000fa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc6:	230f      	movs	r3, #15
 8000cc8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f001 fdd3 	bl	800288c <HAL_RCC_ClockConfig>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000cec:	f000 f95a 	bl	8000fa4 <Error_Handler>
  }
}
 8000cf0:	bf00      	nop
 8000cf2:	3740      	adds	r7, #64	; 0x40
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000cfe:	4a13      	ldr	r2, [pc, #76]	; (8000d4c <MX_I2C1_Init+0x54>)
 8000d00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000d04:	4a12      	ldr	r2, [pc, #72]	; (8000d50 <MX_I2C1_Init+0x58>)
 8000d06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000d16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d28:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d34:	4804      	ldr	r0, [pc, #16]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000d36:	f000 fe8d 	bl	8001a54 <HAL_I2C_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d40:	f000 f930 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000128 	.word	0x20000128
 8000d4c:	40005400 	.word	0x40005400
 8000d50:	000186a0 	.word	0x000186a0

08000d54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d5a:	f107 0308 	add.w	r3, r7, #8
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d68:	463b      	mov	r3, r7
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d70:	4b1d      	ldr	r3, [pc, #116]	; (8000de8 <MX_TIM2_Init+0x94>)
 8000d72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d78:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <MX_TIM2_Init+0x94>)
 8000d7a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d80:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <MX_TIM2_Init+0x94>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d86:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <MX_TIM2_Init+0x94>)
 8000d88:	2209      	movs	r2, #9
 8000d8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8c:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <MX_TIM2_Init+0x94>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <MX_TIM2_Init+0x94>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d98:	4813      	ldr	r0, [pc, #76]	; (8000de8 <MX_TIM2_Init+0x94>)
 8000d9a:	f001 ff05 	bl	8002ba8 <HAL_TIM_Base_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000da4:	f000 f8fe 	bl	8000fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	4619      	mov	r1, r3
 8000db4:	480c      	ldr	r0, [pc, #48]	; (8000de8 <MX_TIM2_Init+0x94>)
 8000db6:	f002 f889 	bl	8002ecc <HAL_TIM_ConfigClockSource>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000dc0:	f000 f8f0 	bl	8000fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dcc:	463b      	mov	r3, r7
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4805      	ldr	r0, [pc, #20]	; (8000de8 <MX_TIM2_Init+0x94>)
 8000dd2:	f002 fa6b 	bl	80032ac <HAL_TIMEx_MasterConfigSynchronization>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ddc:	f000 f8e2 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	2000017c 	.word	0x2000017c

08000dec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000df2:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <MX_USART2_UART_Init+0x50>)
 8000df4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000df8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000e12:	220c      	movs	r2, #12
 8000e14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000e24:	f002 fab2 	bl	800338c <HAL_UART_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e2e:	f000 f8b9 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200001c4 	.word	0x200001c4
 8000e3c:	40004400 	.word	0x40004400

08000e40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e54:	4b48      	ldr	r3, [pc, #288]	; (8000f78 <MX_GPIO_Init+0x138>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a47      	ldr	r2, [pc, #284]	; (8000f78 <MX_GPIO_Init+0x138>)
 8000e5a:	f043 0310 	orr.w	r3, r3, #16
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b45      	ldr	r3, [pc, #276]	; (8000f78 <MX_GPIO_Init+0x138>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f003 0310 	and.w	r3, r3, #16
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6c:	4b42      	ldr	r3, [pc, #264]	; (8000f78 <MX_GPIO_Init+0x138>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a41      	ldr	r2, [pc, #260]	; (8000f78 <MX_GPIO_Init+0x138>)
 8000e72:	f043 0320 	orr.w	r3, r3, #32
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b3f      	ldr	r3, [pc, #252]	; (8000f78 <MX_GPIO_Init+0x138>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0320 	and.w	r3, r3, #32
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e84:	4b3c      	ldr	r3, [pc, #240]	; (8000f78 <MX_GPIO_Init+0x138>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a3b      	ldr	r2, [pc, #236]	; (8000f78 <MX_GPIO_Init+0x138>)
 8000e8a:	f043 0304 	orr.w	r3, r3, #4
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b39      	ldr	r3, [pc, #228]	; (8000f78 <MX_GPIO_Init+0x138>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9c:	4b36      	ldr	r3, [pc, #216]	; (8000f78 <MX_GPIO_Init+0x138>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	4a35      	ldr	r2, [pc, #212]	; (8000f78 <MX_GPIO_Init+0x138>)
 8000ea2:	f043 0308 	orr.w	r3, r3, #8
 8000ea6:	6193      	str	r3, [r2, #24]
 8000ea8:	4b33      	ldr	r3, [pc, #204]	; (8000f78 <MX_GPIO_Init+0x138>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f003 0308 	and.w	r3, r3, #8
 8000eb0:	603b      	str	r3, [r7, #0]
 8000eb2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D7_Pin|D8_Pin, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000eba:	4830      	ldr	r0, [pc, #192]	; (8000f7c <MX_GPIO_Init+0x13c>)
 8000ebc:	f000 fd77 	bl	80019ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f44f 618f 	mov.w	r1, #1144	; 0x478
 8000ec6:	482e      	ldr	r0, [pc, #184]	; (8000f80 <MX_GPIO_Init+0x140>)
 8000ec8:	f000 fd71 	bl	80019ae <HAL_GPIO_WritePin>
                          |D10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2180      	movs	r1, #128	; 0x80
 8000ed0:	482c      	ldr	r0, [pc, #176]	; (8000f84 <MX_GPIO_Init+0x144>)
 8000ed2:	f000 fd6c 	bl	80019ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ed6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000edc:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <MX_GPIO_Init+0x148>)
 8000ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4826      	ldr	r0, [pc, #152]	; (8000f84 <MX_GPIO_Init+0x144>)
 8000eec:	f000 fbc4 	bl	8001678 <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_Pin A1_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efc:	f107 0310 	add.w	r3, r7, #16
 8000f00:	4619      	mov	r1, r3
 8000f02:	481e      	ldr	r0, [pc, #120]	; (8000f7c <MX_GPIO_Init+0x13c>)
 8000f04:	f000 fbb8 	bl	8001678 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D7_Pin D8_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D7_Pin|D8_Pin;
 8000f08:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000f0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2302      	movs	r3, #2
 8000f18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 0310 	add.w	r3, r7, #16
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4816      	ldr	r0, [pc, #88]	; (8000f7c <MX_GPIO_Init+0x13c>)
 8000f22:	f000 fba9 	bl	8001678 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin
                           D10_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin
 8000f26:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8000f2a:	613b      	str	r3, [r7, #16]
                          |D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2302      	movs	r3, #2
 8000f36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4810      	ldr	r0, [pc, #64]	; (8000f80 <MX_GPIO_Init+0x140>)
 8000f40:	f000 fb9a 	bl	8001678 <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_Pin */
  GPIO_InitStruct.Pin = D9_Pin;
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2302      	movs	r3, #2
 8000f52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D9_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 0310 	add.w	r3, r7, #16
 8000f58:	4619      	mov	r1, r3
 8000f5a:	480a      	ldr	r0, [pc, #40]	; (8000f84 <MX_GPIO_Init+0x144>)
 8000f5c:	f000 fb8c 	bl	8001678 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2100      	movs	r1, #0
 8000f64:	2028      	movs	r0, #40	; 0x28
 8000f66:	f000 fb50 	bl	800160a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f6a:	2028      	movs	r0, #40	; 0x28
 8000f6c:	f000 fb69 	bl	8001642 <HAL_NVIC_EnableIRQ>

}
 8000f70:	bf00      	nop
 8000f72:	3720      	adds	r7, #32
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010800 	.word	0x40010800
 8000f80:	40010c00 	.word	0x40010c00
 8000f84:	40011000 	.word	0x40011000
 8000f88:	10110000 	.word	0x10110000

08000f8c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	timerun();
 8000f94:	f000 f82c 	bl	8000ff0 <timerun>
	getKeyInput();
 8000f98:	f7ff f930 	bl	80001fc <getKeyInput>
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa8:	b672      	cpsid	i
}
 8000faa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fac:	e7fe      	b.n	8000fac <Error_Handler+0x8>
	...

08000fb0 <setTimer>:


int timer_flag[10];
int timer_counter[10];

void setTimer(int index, int counter) {
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
    timer_flag[index] = 0;
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <setTimer+0x34>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    timer_counter[index] = counter / TICK;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	4a08      	ldr	r2, [pc, #32]	; (8000fe8 <setTimer+0x38>)
 8000fc8:	fb82 1203 	smull	r1, r2, r2, r3
 8000fcc:	1092      	asrs	r2, r2, #2
 8000fce:	17db      	asrs	r3, r3, #31
 8000fd0:	1ad2      	subs	r2, r2, r3
 8000fd2:	4906      	ldr	r1, [pc, #24]	; (8000fec <setTimer+0x3c>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr
 8000fe4:	20000234 	.word	0x20000234
 8000fe8:	66666667 	.word	0x66666667
 8000fec:	2000020c 	.word	0x2000020c

08000ff0 <timerun>:

void timerun() {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
    for (int i = 0; i < 10; i++) {  // Corrected loop condition
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	e01c      	b.n	8001036 <timerun+0x46>
        if (timer_counter[i] >= 0) {
 8000ffc:	4a12      	ldr	r2, [pc, #72]	; (8001048 <timerun+0x58>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001004:	2b00      	cmp	r3, #0
 8001006:	db13      	blt.n	8001030 <timerun+0x40>
            timer_counter[i]--;
 8001008:	4a0f      	ldr	r2, [pc, #60]	; (8001048 <timerun+0x58>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001010:	1e5a      	subs	r2, r3, #1
 8001012:	490d      	ldr	r1, [pc, #52]	; (8001048 <timerun+0x58>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if (timer_counter[i] <= 0) {
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <timerun+0x58>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001022:	2b00      	cmp	r3, #0
 8001024:	dc04      	bgt.n	8001030 <timerun+0x40>
                timer_flag[i] = 1;
 8001026:	4a09      	ldr	r2, [pc, #36]	; (800104c <timerun+0x5c>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2101      	movs	r1, #1
 800102c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < 10; i++) {  // Corrected loop condition
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3301      	adds	r3, #1
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b09      	cmp	r3, #9
 800103a:	dddf      	ble.n	8000ffc <timerun+0xc>
            }
        }
    }
}
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr
 8001048:	2000020c 	.word	0x2000020c
 800104c:	20000234 	.word	0x20000234

08001050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <HAL_MspInit+0x5c>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	4a14      	ldr	r2, [pc, #80]	; (80010ac <HAL_MspInit+0x5c>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6193      	str	r3, [r2, #24]
 8001062:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_MspInit+0x5c>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <HAL_MspInit+0x5c>)
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <HAL_MspInit+0x5c>)
 8001074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001078:	61d3      	str	r3, [r2, #28]
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <HAL_MspInit+0x5c>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_MspInit+0x60>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <HAL_MspInit+0x60>)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40010000 	.word	0x40010000

080010b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a1d      	ldr	r2, [pc, #116]	; (8001144 <HAL_I2C_MspInit+0x90>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d132      	bne.n	800113a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <HAL_I2C_MspInit+0x94>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a1b      	ldr	r2, [pc, #108]	; (8001148 <HAL_I2C_MspInit+0x94>)
 80010da:	f043 0308 	orr.w	r3, r3, #8
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b19      	ldr	r3, [pc, #100]	; (8001148 <HAL_I2C_MspInit+0x94>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0308 	and.w	r3, r3, #8
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f2:	2312      	movs	r3, #18
 80010f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f6:	2303      	movs	r3, #3
 80010f8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4619      	mov	r1, r3
 8001100:	4812      	ldr	r0, [pc, #72]	; (800114c <HAL_I2C_MspInit+0x98>)
 8001102:	f000 fab9 	bl	8001678 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_I2C_MspInit+0x9c>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
 8001114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001116:	f043 0302 	orr.w	r3, r3, #2
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
 800111c:	4a0c      	ldr	r2, [pc, #48]	; (8001150 <HAL_I2C_MspInit+0x9c>)
 800111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001120:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <HAL_I2C_MspInit+0x94>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	4a08      	ldr	r2, [pc, #32]	; (8001148 <HAL_I2C_MspInit+0x94>)
 8001128:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800112c:	61d3      	str	r3, [r2, #28]
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_I2C_MspInit+0x94>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800113a:	bf00      	nop
 800113c:	3728      	adds	r7, #40	; 0x28
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40005400 	.word	0x40005400
 8001148:	40021000 	.word	0x40021000
 800114c:	40010c00 	.word	0x40010c00
 8001150:	40010000 	.word	0x40010000

08001154 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001164:	d113      	bne.n	800118e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <HAL_TIM_Base_MspInit+0x44>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <HAL_TIM_Base_MspInit+0x44>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	61d3      	str	r3, [r2, #28]
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <HAL_TIM_Base_MspInit+0x44>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	201c      	movs	r0, #28
 8001184:	f000 fa41 	bl	800160a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001188:	201c      	movs	r0, #28
 800118a:	f000 fa5a 	bl	8001642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000

0800119c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a15      	ldr	r2, [pc, #84]	; (800120c <HAL_UART_MspInit+0x70>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d123      	bne.n	8001204 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <HAL_UART_MspInit+0x74>)
 80011be:	69db      	ldr	r3, [r3, #28]
 80011c0:	4a13      	ldr	r2, [pc, #76]	; (8001210 <HAL_UART_MspInit+0x74>)
 80011c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c6:	61d3      	str	r3, [r2, #28]
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <HAL_UART_MspInit+0x74>)
 80011ca:	69db      	ldr	r3, [r3, #28]
 80011cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <HAL_UART_MspInit+0x74>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a0d      	ldr	r2, [pc, #52]	; (8001210 <HAL_UART_MspInit+0x74>)
 80011da:	f043 0304 	orr.w	r3, r3, #4
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <HAL_UART_MspInit+0x74>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011ec:	230c      	movs	r3, #12
 80011ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2302      	movs	r3, #2
 80011f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	4619      	mov	r1, r3
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <HAL_UART_MspInit+0x78>)
 8001200:	f000 fa3a 	bl	8001678 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001204:	bf00      	nop
 8001206:	3720      	adds	r7, #32
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40004400 	.word	0x40004400
 8001210:	40021000 	.word	0x40021000
 8001214:	40010800 	.word	0x40010800

08001218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800121c:	e7fe      	b.n	800121c <NMI_Handler+0x4>

0800121e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <HardFault_Handler+0x4>

08001224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <MemManage_Handler+0x4>

0800122a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122e:	e7fe      	b.n	800122e <BusFault_Handler+0x4>

08001230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <UsageFault_Handler+0x4>

08001236 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr

08001242 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr

0800124e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr

0800125a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125e:	f000 f8bd 	bl	80013dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800126c:	4802      	ldr	r0, [pc, #8]	; (8001278 <TIM2_IRQHandler+0x10>)
 800126e:	f001 fd3d 	bl	8002cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2000017c 	.word	0x2000017c

0800127c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001280:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001284:	f000 fbc4 	bl	8001a10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}

0800128c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001294:	4a14      	ldr	r2, [pc, #80]	; (80012e8 <_sbrk+0x5c>)
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <_sbrk+0x60>)
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a0:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <_sbrk+0x64>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d102      	bne.n	80012ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <_sbrk+0x64>)
 80012aa:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <_sbrk+0x68>)
 80012ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <_sbrk+0x64>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d207      	bcs.n	80012cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012bc:	f002 f944 	bl	8003548 <__errno>
 80012c0:	4603      	mov	r3, r0
 80012c2:	220c      	movs	r2, #12
 80012c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	e009      	b.n	80012e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <_sbrk+0x64>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <_sbrk+0x64>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <_sbrk+0x64>)
 80012dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012de:	68fb      	ldr	r3, [r7, #12]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20005000 	.word	0x20005000
 80012ec:	00000400 	.word	0x00000400
 80012f0:	200000fc 	.word	0x200000fc
 80012f4:	20000270 	.word	0x20000270

080012f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001304:	f7ff fff8 	bl	80012f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001308:	480b      	ldr	r0, [pc, #44]	; (8001338 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800130a:	490c      	ldr	r1, [pc, #48]	; (800133c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800130c:	4a0c      	ldr	r2, [pc, #48]	; (8001340 <LoopFillZerobss+0x16>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001310:	e002      	b.n	8001318 <LoopCopyDataInit>

08001312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001316:	3304      	adds	r3, #4

08001318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800131c:	d3f9      	bcc.n	8001312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131e:	4a09      	ldr	r2, [pc, #36]	; (8001344 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001320:	4c09      	ldr	r4, [pc, #36]	; (8001348 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001324:	e001      	b.n	800132a <LoopFillZerobss>

08001326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001328:	3204      	adds	r2, #4

0800132a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800132c:	d3fb      	bcc.n	8001326 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800132e:	f002 f911 	bl	8003554 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001332:	f7ff fc85 	bl	8000c40 <main>
  bx lr
 8001336:	4770      	bx	lr
  ldr r0, =_sdata
 8001338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800133c:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8001340:	08003f08 	.word	0x08003f08
  ldr r2, =_sbss
 8001344:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8001348:	20000270 	.word	0x20000270

0800134c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800134c:	e7fe      	b.n	800134c <ADC1_2_IRQHandler>
	...

08001350 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HAL_Init+0x28>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a07      	ldr	r2, [pc, #28]	; (8001378 <HAL_Init+0x28>)
 800135a:	f043 0310 	orr.w	r3, r3, #16
 800135e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001360:	2003      	movs	r0, #3
 8001362:	f000 f947 	bl	80015f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001366:	2000      	movs	r0, #0
 8001368:	f000 f808 	bl	800137c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800136c:	f7ff fe70 	bl	8001050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40022000 	.word	0x40022000

0800137c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_InitTick+0x54>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_InitTick+0x58>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001392:	fbb3 f3f1 	udiv	r3, r3, r1
 8001396:	fbb2 f3f3 	udiv	r3, r2, r3
 800139a:	4618      	mov	r0, r3
 800139c:	f000 f95f 	bl	800165e <HAL_SYSTICK_Config>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00e      	b.n	80013c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b0f      	cmp	r3, #15
 80013ae:	d80a      	bhi.n	80013c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b0:	2200      	movs	r2, #0
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f000 f927 	bl	800160a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013bc:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <HAL_InitTick+0x5c>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	e000      	b.n	80013c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000058 	.word	0x20000058
 80013d4:	20000060 	.word	0x20000060
 80013d8:	2000005c 	.word	0x2000005c

080013dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <HAL_IncTick+0x1c>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <HAL_IncTick+0x20>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	4a03      	ldr	r2, [pc, #12]	; (80013fc <HAL_IncTick+0x20>)
 80013ee:	6013      	str	r3, [r2, #0]
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	20000060 	.word	0x20000060
 80013fc:	2000025c 	.word	0x2000025c

08001400 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return uwTick;
 8001404:	4b02      	ldr	r3, [pc, #8]	; (8001410 <HAL_GetTick+0x10>)
 8001406:	681b      	ldr	r3, [r3, #0]
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	2000025c 	.word	0x2000025c

08001414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800141c:	f7ff fff0 	bl	8001400 <HAL_GetTick>
 8001420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800142c:	d005      	beq.n	800143a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HAL_Delay+0x44>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4413      	add	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800143a:	bf00      	nop
 800143c:	f7ff ffe0 	bl	8001400 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	429a      	cmp	r2, r3
 800144a:	d8f7      	bhi.n	800143c <HAL_Delay+0x28>
  {
  }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000060 	.word	0x20000060

0800145c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001478:	4013      	ands	r3, r2
 800147a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148e:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	60d3      	str	r3, [r2, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <__NVIC_GetPriorityGrouping+0x18>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	f003 0307 	and.w	r3, r3, #7
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	db0b      	blt.n	80014ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	f003 021f 	and.w	r2, r3, #31
 80014d8:	4906      	ldr	r1, [pc, #24]	; (80014f4 <__NVIC_EnableIRQ+0x34>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	095b      	lsrs	r3, r3, #5
 80014e0:	2001      	movs	r0, #1
 80014e2:	fa00 f202 	lsl.w	r2, r0, r2
 80014e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	e000e100 	.word	0xe000e100

080014f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	6039      	str	r1, [r7, #0]
 8001502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001508:	2b00      	cmp	r3, #0
 800150a:	db0a      	blt.n	8001522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	b2da      	uxtb	r2, r3
 8001510:	490c      	ldr	r1, [pc, #48]	; (8001544 <__NVIC_SetPriority+0x4c>)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	0112      	lsls	r2, r2, #4
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	440b      	add	r3, r1
 800151c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001520:	e00a      	b.n	8001538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	b2da      	uxtb	r2, r3
 8001526:	4908      	ldr	r1, [pc, #32]	; (8001548 <__NVIC_SetPriority+0x50>)
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	3b04      	subs	r3, #4
 8001530:	0112      	lsls	r2, r2, #4
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	440b      	add	r3, r1
 8001536:	761a      	strb	r2, [r3, #24]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000e100 	.word	0xe000e100
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800154c:	b480      	push	{r7}
 800154e:	b089      	sub	sp, #36	; 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f1c3 0307 	rsb	r3, r3, #7
 8001566:	2b04      	cmp	r3, #4
 8001568:	bf28      	it	cs
 800156a:	2304      	movcs	r3, #4
 800156c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3304      	adds	r3, #4
 8001572:	2b06      	cmp	r3, #6
 8001574:	d902      	bls.n	800157c <NVIC_EncodePriority+0x30>
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3b03      	subs	r3, #3
 800157a:	e000      	b.n	800157e <NVIC_EncodePriority+0x32>
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001580:	f04f 32ff 	mov.w	r2, #4294967295
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43da      	mvns	r2, r3
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	401a      	ands	r2, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001594:	f04f 31ff 	mov.w	r1, #4294967295
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	fa01 f303 	lsl.w	r3, r1, r3
 800159e:	43d9      	mvns	r1, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a4:	4313      	orrs	r3, r2
         );
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3724      	adds	r7, #36	; 0x24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015c0:	d301      	bcc.n	80015c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00f      	b.n	80015e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c6:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <SysTick_Config+0x40>)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ce:	210f      	movs	r1, #15
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295
 80015d4:	f7ff ff90 	bl	80014f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <SysTick_Config+0x40>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015de:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <SysTick_Config+0x40>)
 80015e0:	2207      	movs	r2, #7
 80015e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	e000e010 	.word	0xe000e010

080015f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ff2d 	bl	800145c <__NVIC_SetPriorityGrouping>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800160a:	b580      	push	{r7, lr}
 800160c:	b086      	sub	sp, #24
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
 8001616:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800161c:	f7ff ff42 	bl	80014a4 <__NVIC_GetPriorityGrouping>
 8001620:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	6978      	ldr	r0, [r7, #20]
 8001628:	f7ff ff90 	bl	800154c <NVIC_EncodePriority>
 800162c:	4602      	mov	r2, r0
 800162e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001632:	4611      	mov	r1, r2
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff5f 	bl	80014f8 <__NVIC_SetPriority>
}
 800163a:	bf00      	nop
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	4603      	mov	r3, r0
 800164a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff35 	bl	80014c0 <__NVIC_EnableIRQ>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff ffa2 	bl	80015b0 <SysTick_Config>
 800166c:	4603      	mov	r3, r0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001678:	b480      	push	{r7}
 800167a:	b08b      	sub	sp, #44	; 0x2c
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001686:	2300      	movs	r3, #0
 8001688:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168a:	e169      	b.n	8001960 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800168c:	2201      	movs	r2, #1
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	f040 8158 	bne.w	800195a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	4a9a      	ldr	r2, [pc, #616]	; (8001918 <HAL_GPIO_Init+0x2a0>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d05e      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016b4:	4a98      	ldr	r2, [pc, #608]	; (8001918 <HAL_GPIO_Init+0x2a0>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d875      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016ba:	4a98      	ldr	r2, [pc, #608]	; (800191c <HAL_GPIO_Init+0x2a4>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d058      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016c0:	4a96      	ldr	r2, [pc, #600]	; (800191c <HAL_GPIO_Init+0x2a4>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d86f      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016c6:	4a96      	ldr	r2, [pc, #600]	; (8001920 <HAL_GPIO_Init+0x2a8>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d052      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016cc:	4a94      	ldr	r2, [pc, #592]	; (8001920 <HAL_GPIO_Init+0x2a8>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d869      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016d2:	4a94      	ldr	r2, [pc, #592]	; (8001924 <HAL_GPIO_Init+0x2ac>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d04c      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016d8:	4a92      	ldr	r2, [pc, #584]	; (8001924 <HAL_GPIO_Init+0x2ac>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d863      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016de:	4a92      	ldr	r2, [pc, #584]	; (8001928 <HAL_GPIO_Init+0x2b0>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d046      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016e4:	4a90      	ldr	r2, [pc, #576]	; (8001928 <HAL_GPIO_Init+0x2b0>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d85d      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016ea:	2b12      	cmp	r3, #18
 80016ec:	d82a      	bhi.n	8001744 <HAL_GPIO_Init+0xcc>
 80016ee:	2b12      	cmp	r3, #18
 80016f0:	d859      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016f2:	a201      	add	r2, pc, #4	; (adr r2, 80016f8 <HAL_GPIO_Init+0x80>)
 80016f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f8:	08001773 	.word	0x08001773
 80016fc:	0800174d 	.word	0x0800174d
 8001700:	0800175f 	.word	0x0800175f
 8001704:	080017a1 	.word	0x080017a1
 8001708:	080017a7 	.word	0x080017a7
 800170c:	080017a7 	.word	0x080017a7
 8001710:	080017a7 	.word	0x080017a7
 8001714:	080017a7 	.word	0x080017a7
 8001718:	080017a7 	.word	0x080017a7
 800171c:	080017a7 	.word	0x080017a7
 8001720:	080017a7 	.word	0x080017a7
 8001724:	080017a7 	.word	0x080017a7
 8001728:	080017a7 	.word	0x080017a7
 800172c:	080017a7 	.word	0x080017a7
 8001730:	080017a7 	.word	0x080017a7
 8001734:	080017a7 	.word	0x080017a7
 8001738:	080017a7 	.word	0x080017a7
 800173c:	08001755 	.word	0x08001755
 8001740:	08001769 	.word	0x08001769
 8001744:	4a79      	ldr	r2, [pc, #484]	; (800192c <HAL_GPIO_Init+0x2b4>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d013      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800174a:	e02c      	b.n	80017a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	623b      	str	r3, [r7, #32]
          break;
 8001752:	e029      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	3304      	adds	r3, #4
 800175a:	623b      	str	r3, [r7, #32]
          break;
 800175c:	e024      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	3308      	adds	r3, #8
 8001764:	623b      	str	r3, [r7, #32]
          break;
 8001766:	e01f      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	330c      	adds	r3, #12
 800176e:	623b      	str	r3, [r7, #32]
          break;
 8001770:	e01a      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d102      	bne.n	8001780 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800177a:	2304      	movs	r3, #4
 800177c:	623b      	str	r3, [r7, #32]
          break;
 800177e:	e013      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d105      	bne.n	8001794 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001788:	2308      	movs	r3, #8
 800178a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	611a      	str	r2, [r3, #16]
          break;
 8001792:	e009      	b.n	80017a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001794:	2308      	movs	r3, #8
 8001796:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	615a      	str	r2, [r3, #20]
          break;
 800179e:	e003      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017a0:	2300      	movs	r3, #0
 80017a2:	623b      	str	r3, [r7, #32]
          break;
 80017a4:	e000      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          break;
 80017a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	2bff      	cmp	r3, #255	; 0xff
 80017ac:	d801      	bhi.n	80017b2 <HAL_GPIO_Init+0x13a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	e001      	b.n	80017b6 <HAL_GPIO_Init+0x13e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3304      	adds	r3, #4
 80017b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	2bff      	cmp	r3, #255	; 0xff
 80017bc:	d802      	bhi.n	80017c4 <HAL_GPIO_Init+0x14c>
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	e002      	b.n	80017ca <HAL_GPIO_Init+0x152>
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	3b08      	subs	r3, #8
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	210f      	movs	r1, #15
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	401a      	ands	r2, r3
 80017dc:	6a39      	ldr	r1, [r7, #32]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	fa01 f303 	lsl.w	r3, r1, r3
 80017e4:	431a      	orrs	r2, r3
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 80b1 	beq.w	800195a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017f8:	4b4d      	ldr	r3, [pc, #308]	; (8001930 <HAL_GPIO_Init+0x2b8>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	4a4c      	ldr	r2, [pc, #304]	; (8001930 <HAL_GPIO_Init+0x2b8>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6193      	str	r3, [r2, #24]
 8001804:	4b4a      	ldr	r3, [pc, #296]	; (8001930 <HAL_GPIO_Init+0x2b8>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001810:	4a48      	ldr	r2, [pc, #288]	; (8001934 <HAL_GPIO_Init+0x2bc>)
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	3302      	adds	r3, #2
 8001818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	220f      	movs	r2, #15
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	4013      	ands	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a40      	ldr	r2, [pc, #256]	; (8001938 <HAL_GPIO_Init+0x2c0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d013      	beq.n	8001864 <HAL_GPIO_Init+0x1ec>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a3f      	ldr	r2, [pc, #252]	; (800193c <HAL_GPIO_Init+0x2c4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d00d      	beq.n	8001860 <HAL_GPIO_Init+0x1e8>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a3e      	ldr	r2, [pc, #248]	; (8001940 <HAL_GPIO_Init+0x2c8>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d007      	beq.n	800185c <HAL_GPIO_Init+0x1e4>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a3d      	ldr	r2, [pc, #244]	; (8001944 <HAL_GPIO_Init+0x2cc>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d101      	bne.n	8001858 <HAL_GPIO_Init+0x1e0>
 8001854:	2303      	movs	r3, #3
 8001856:	e006      	b.n	8001866 <HAL_GPIO_Init+0x1ee>
 8001858:	2304      	movs	r3, #4
 800185a:	e004      	b.n	8001866 <HAL_GPIO_Init+0x1ee>
 800185c:	2302      	movs	r3, #2
 800185e:	e002      	b.n	8001866 <HAL_GPIO_Init+0x1ee>
 8001860:	2301      	movs	r3, #1
 8001862:	e000      	b.n	8001866 <HAL_GPIO_Init+0x1ee>
 8001864:	2300      	movs	r3, #0
 8001866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001868:	f002 0203 	and.w	r2, r2, #3
 800186c:	0092      	lsls	r2, r2, #2
 800186e:	4093      	lsls	r3, r2
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	4313      	orrs	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001876:	492f      	ldr	r1, [pc, #188]	; (8001934 <HAL_GPIO_Init+0x2bc>)
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	089b      	lsrs	r3, r3, #2
 800187c:	3302      	adds	r3, #2
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d006      	beq.n	800189e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001890:	4b2d      	ldr	r3, [pc, #180]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	492c      	ldr	r1, [pc, #176]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	608b      	str	r3, [r1, #8]
 800189c:	e006      	b.n	80018ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800189e:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	4928      	ldr	r1, [pc, #160]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d006      	beq.n	80018c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018b8:	4b23      	ldr	r3, [pc, #140]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	4922      	ldr	r1, [pc, #136]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	60cb      	str	r3, [r1, #12]
 80018c4:	e006      	b.n	80018d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018c6:	4b20      	ldr	r3, [pc, #128]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	491e      	ldr	r1, [pc, #120]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d006      	beq.n	80018ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018e0:	4b19      	ldr	r3, [pc, #100]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	4918      	ldr	r1, [pc, #96]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
 80018ec:	e006      	b.n	80018fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018ee:	4b16      	ldr	r3, [pc, #88]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	4914      	ldr	r1, [pc, #80]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d021      	beq.n	800194c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	490e      	ldr	r1, [pc, #56]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	600b      	str	r3, [r1, #0]
 8001914:	e021      	b.n	800195a <HAL_GPIO_Init+0x2e2>
 8001916:	bf00      	nop
 8001918:	10320000 	.word	0x10320000
 800191c:	10310000 	.word	0x10310000
 8001920:	10220000 	.word	0x10220000
 8001924:	10210000 	.word	0x10210000
 8001928:	10120000 	.word	0x10120000
 800192c:	10110000 	.word	0x10110000
 8001930:	40021000 	.word	0x40021000
 8001934:	40010000 	.word	0x40010000
 8001938:	40010800 	.word	0x40010800
 800193c:	40010c00 	.word	0x40010c00
 8001940:	40011000 	.word	0x40011000
 8001944:	40011400 	.word	0x40011400
 8001948:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_GPIO_Init+0x304>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	43db      	mvns	r3, r3
 8001954:	4909      	ldr	r1, [pc, #36]	; (800197c <HAL_GPIO_Init+0x304>)
 8001956:	4013      	ands	r3, r2
 8001958:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	3301      	adds	r3, #1
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	fa22 f303 	lsr.w	r3, r2, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	f47f ae8e 	bne.w	800168c <HAL_GPIO_Init+0x14>
  }
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	372c      	adds	r7, #44	; 0x2c
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	40010400 	.word	0x40010400

08001980 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	887b      	ldrh	r3, [r7, #2]
 8001992:	4013      	ands	r3, r2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d002      	beq.n	800199e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001998:	2301      	movs	r3, #1
 800199a:	73fb      	strb	r3, [r7, #15]
 800199c:	e001      	b.n	80019a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800199e:	2300      	movs	r3, #0
 80019a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr

080019ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	460b      	mov	r3, r1
 80019b8:	807b      	strh	r3, [r7, #2]
 80019ba:	4613      	mov	r3, r2
 80019bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019be:	787b      	ldrb	r3, [r7, #1]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019c4:	887a      	ldrh	r2, [r7, #2]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019ca:	e003      	b.n	80019d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019cc:	887b      	ldrh	r3, [r7, #2]
 80019ce:	041a      	lsls	r2, r3, #16
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	611a      	str	r2, [r3, #16]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr

080019de <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019de:	b480      	push	{r7}
 80019e0:	b085      	sub	sp, #20
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	460b      	mov	r3, r1
 80019e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019f0:	887a      	ldrh	r2, [r7, #2]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4013      	ands	r3, r2
 80019f6:	041a      	lsls	r2, r3, #16
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	43d9      	mvns	r1, r3
 80019fc:	887b      	ldrh	r3, [r7, #2]
 80019fe:	400b      	ands	r3, r1
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	611a      	str	r2, [r3, #16]
}
 8001a06:	bf00      	nop
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a1c:	695a      	ldr	r2, [r3, #20]
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d006      	beq.n	8001a34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a28:	88fb      	ldrh	r3, [r7, #6]
 8001a2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 f806 	bl	8001a40 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40010400 	.word	0x40010400

08001a40 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr

08001a54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e12b      	b.n	8001cbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d106      	bne.n	8001a80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff fb1a 	bl	80010b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2224      	movs	r2, #36	; 0x24
 8001a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0201 	bic.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aa6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ab6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ab8:	f001 f830 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 8001abc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	4a81      	ldr	r2, [pc, #516]	; (8001cc8 <HAL_I2C_Init+0x274>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d807      	bhi.n	8001ad8 <HAL_I2C_Init+0x84>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4a80      	ldr	r2, [pc, #512]	; (8001ccc <HAL_I2C_Init+0x278>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	bf94      	ite	ls
 8001ad0:	2301      	movls	r3, #1
 8001ad2:	2300      	movhi	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	e006      	b.n	8001ae6 <HAL_I2C_Init+0x92>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4a7d      	ldr	r2, [pc, #500]	; (8001cd0 <HAL_I2C_Init+0x27c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	bf94      	ite	ls
 8001ae0:	2301      	movls	r3, #1
 8001ae2:	2300      	movhi	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e0e7      	b.n	8001cbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4a78      	ldr	r2, [pc, #480]	; (8001cd4 <HAL_I2C_Init+0x280>)
 8001af2:	fba2 2303 	umull	r2, r3, r2, r3
 8001af6:	0c9b      	lsrs	r3, r3, #18
 8001af8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68ba      	ldr	r2, [r7, #8]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	4a6a      	ldr	r2, [pc, #424]	; (8001cc8 <HAL_I2C_Init+0x274>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d802      	bhi.n	8001b28 <HAL_I2C_Init+0xd4>
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	3301      	adds	r3, #1
 8001b26:	e009      	b.n	8001b3c <HAL_I2C_Init+0xe8>
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b2e:	fb02 f303 	mul.w	r3, r2, r3
 8001b32:	4a69      	ldr	r2, [pc, #420]	; (8001cd8 <HAL_I2C_Init+0x284>)
 8001b34:	fba2 2303 	umull	r2, r3, r2, r3
 8001b38:	099b      	lsrs	r3, r3, #6
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	430b      	orrs	r3, r1
 8001b42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	495c      	ldr	r1, [pc, #368]	; (8001cc8 <HAL_I2C_Init+0x274>)
 8001b58:	428b      	cmp	r3, r1
 8001b5a:	d819      	bhi.n	8001b90 <HAL_I2C_Init+0x13c>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	1e59      	subs	r1, r3, #1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b6a:	1c59      	adds	r1, r3, #1
 8001b6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b70:	400b      	ands	r3, r1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00a      	beq.n	8001b8c <HAL_I2C_Init+0x138>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1e59      	subs	r1, r3, #1
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b84:	3301      	adds	r3, #1
 8001b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b8a:	e051      	b.n	8001c30 <HAL_I2C_Init+0x1dc>
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	e04f      	b.n	8001c30 <HAL_I2C_Init+0x1dc>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d111      	bne.n	8001bbc <HAL_I2C_Init+0x168>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	1e58      	subs	r0, r3, #1
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6859      	ldr	r1, [r3, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	440b      	add	r3, r1
 8001ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001baa:	3301      	adds	r3, #1
 8001bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	bf0c      	ite	eq
 8001bb4:	2301      	moveq	r3, #1
 8001bb6:	2300      	movne	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	e012      	b.n	8001be2 <HAL_I2C_Init+0x18e>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	1e58      	subs	r0, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6859      	ldr	r1, [r3, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	0099      	lsls	r1, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	bf0c      	ite	eq
 8001bdc:	2301      	moveq	r3, #1
 8001bde:	2300      	movne	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_I2C_Init+0x196>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e022      	b.n	8001c30 <HAL_I2C_Init+0x1dc>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10e      	bne.n	8001c10 <HAL_I2C_Init+0x1bc>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1e58      	subs	r0, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6859      	ldr	r1, [r3, #4]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	440b      	add	r3, r1
 8001c00:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c04:	3301      	adds	r3, #1
 8001c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c0e:	e00f      	b.n	8001c30 <HAL_I2C_Init+0x1dc>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	1e58      	subs	r0, r3, #1
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6859      	ldr	r1, [r3, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	0099      	lsls	r1, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c26:	3301      	adds	r3, #1
 8001c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	6809      	ldr	r1, [r1, #0]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69da      	ldr	r2, [r3, #28]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6911      	ldr	r1, [r2, #16]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	68d2      	ldr	r2, [r2, #12]
 8001c6a:	4311      	orrs	r1, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	430b      	orrs	r3, r1
 8001c72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695a      	ldr	r2, [r3, #20]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2220      	movs	r2, #32
 8001caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	000186a0 	.word	0x000186a0
 8001ccc:	001e847f 	.word	0x001e847f
 8001cd0:	003d08ff 	.word	0x003d08ff
 8001cd4:	431bde83 	.word	0x431bde83
 8001cd8:	10624dd3 	.word	0x10624dd3

08001cdc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af02      	add	r7, sp, #8
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	460b      	mov	r3, r1
 8001cea:	817b      	strh	r3, [r7, #10]
 8001cec:	4613      	mov	r3, r2
 8001cee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cf0:	f7ff fb86 	bl	8001400 <HAL_GetTick>
 8001cf4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b20      	cmp	r3, #32
 8001d00:	f040 80e0 	bne.w	8001ec4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	2319      	movs	r3, #25
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	4970      	ldr	r1, [pc, #448]	; (8001ed0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 f964 	bl	8001fdc <I2C_WaitOnFlagUntilTimeout>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e0d3      	b.n	8001ec6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_I2C_Master_Transmit+0x50>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e0cc      	b.n	8001ec6 <HAL_I2C_Master_Transmit+0x1ea>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d007      	beq.n	8001d52 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f042 0201 	orr.w	r2, r2, #1
 8001d50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2221      	movs	r2, #33	; 0x21
 8001d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2210      	movs	r2, #16
 8001d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	893a      	ldrh	r2, [r7, #8]
 8001d82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	4a50      	ldr	r2, [pc, #320]	; (8001ed4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d94:	8979      	ldrh	r1, [r7, #10]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	6a3a      	ldr	r2, [r7, #32]
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 f89c 	bl	8001ed8 <I2C_MasterRequestWrite>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e08d      	b.n	8001ec6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001dc0:	e066      	b.n	8001e90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	6a39      	ldr	r1, [r7, #32]
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 fa22 	bl	8002210 <I2C_WaitOnTXEFlagUntilTimeout>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00d      	beq.n	8001dee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d107      	bne.n	8001dea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001de8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e06b      	b.n	8001ec6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	781a      	ldrb	r2, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d11b      	bne.n	8001e64 <HAL_I2C_Master_Transmit+0x188>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d017      	beq.n	8001e64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	1c5a      	adds	r2, r3, #1
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	6a39      	ldr	r1, [r7, #32]
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f000 fa19 	bl	80022a0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00d      	beq.n	8001e90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d107      	bne.n	8001e8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e01a      	b.n	8001ec6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d194      	bne.n	8001dc2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ea6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	e000      	b.n	8001ec6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ec4:	2302      	movs	r3, #2
  }
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	00100002 	.word	0x00100002
 8001ed4:	ffff0000 	.word	0xffff0000

08001ed8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af02      	add	r7, sp, #8
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d006      	beq.n	8001f02 <I2C_MasterRequestWrite+0x2a>
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d003      	beq.n	8001f02 <I2C_MasterRequestWrite+0x2a>
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f00:	d108      	bne.n	8001f14 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	e00b      	b.n	8001f2c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f18:	2b12      	cmp	r3, #18
 8001f1a:	d107      	bne.n	8001f2c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 f84f 	bl	8001fdc <I2C_WaitOnFlagUntilTimeout>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00d      	beq.n	8001f60 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f52:	d103      	bne.n	8001f5c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e035      	b.n	8001fcc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f68:	d108      	bne.n	8001f7c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f6a:	897b      	ldrh	r3, [r7, #10]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f78:	611a      	str	r2, [r3, #16]
 8001f7a:	e01b      	b.n	8001fb4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f7c:	897b      	ldrh	r3, [r7, #10]
 8001f7e:	11db      	asrs	r3, r3, #7
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	f003 0306 	and.w	r3, r3, #6
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	f063 030f 	orn	r3, r3, #15
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	490e      	ldr	r1, [pc, #56]	; (8001fd4 <I2C_MasterRequestWrite+0xfc>)
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f000 f898 	bl	80020d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e010      	b.n	8001fcc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001faa:	897b      	ldrh	r3, [r7, #10]
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	4907      	ldr	r1, [pc, #28]	; (8001fd8 <I2C_MasterRequestWrite+0x100>)
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 f888 	bl	80020d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	00010008 	.word	0x00010008
 8001fd8:	00010002 	.word	0x00010002

08001fdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fec:	e048      	b.n	8002080 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff4:	d044      	beq.n	8002080 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ff6:	f7ff fa03 	bl	8001400 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d302      	bcc.n	800200c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d139      	bne.n	8002080 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	0c1b      	lsrs	r3, r3, #16
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d10d      	bne.n	8002032 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	43da      	mvns	r2, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	4013      	ands	r3, r2
 8002022:	b29b      	uxth	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	bf0c      	ite	eq
 8002028:	2301      	moveq	r3, #1
 800202a:	2300      	movne	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	461a      	mov	r2, r3
 8002030:	e00c      	b.n	800204c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	43da      	mvns	r2, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	4013      	ands	r3, r2
 800203e:	b29b      	uxth	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf0c      	ite	eq
 8002044:	2301      	moveq	r3, #1
 8002046:	2300      	movne	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	461a      	mov	r2, r3
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	429a      	cmp	r2, r3
 8002050:	d116      	bne.n	8002080 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f043 0220 	orr.w	r2, r3, #32
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e023      	b.n	80020c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	0c1b      	lsrs	r3, r3, #16
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b01      	cmp	r3, #1
 8002088:	d10d      	bne.n	80020a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	43da      	mvns	r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	4013      	ands	r3, r2
 8002096:	b29b      	uxth	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	bf0c      	ite	eq
 800209c:	2301      	moveq	r3, #1
 800209e:	2300      	movne	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	461a      	mov	r2, r3
 80020a4:	e00c      	b.n	80020c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	43da      	mvns	r2, r3
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	4013      	ands	r3, r2
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	bf0c      	ite	eq
 80020b8:	2301      	moveq	r3, #1
 80020ba:	2300      	movne	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	461a      	mov	r2, r3
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d093      	beq.n	8001fee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
 80020dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020de:	e071      	b.n	80021c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ee:	d123      	bne.n	8002138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002108:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	f043 0204 	orr.w	r2, r3, #4
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e067      	b.n	8002208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213e:	d041      	beq.n	80021c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002140:	f7ff f95e 	bl	8001400 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	429a      	cmp	r2, r3
 800214e:	d302      	bcc.n	8002156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d136      	bne.n	80021c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	0c1b      	lsrs	r3, r3, #16
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b01      	cmp	r3, #1
 800215e:	d10c      	bne.n	800217a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	43da      	mvns	r2, r3
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	4013      	ands	r3, r2
 800216c:	b29b      	uxth	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	bf14      	ite	ne
 8002172:	2301      	movne	r3, #1
 8002174:	2300      	moveq	r3, #0
 8002176:	b2db      	uxtb	r3, r3
 8002178:	e00b      	b.n	8002192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	43da      	mvns	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	4013      	ands	r3, r2
 8002186:	b29b      	uxth	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	bf14      	ite	ne
 800218c:	2301      	movne	r3, #1
 800218e:	2300      	moveq	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d016      	beq.n	80021c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	f043 0220 	orr.w	r2, r3, #32
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e021      	b.n	8002208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	0c1b      	lsrs	r3, r3, #16
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d10c      	bne.n	80021e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	43da      	mvns	r2, r3
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	4013      	ands	r3, r2
 80021da:	b29b      	uxth	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	bf14      	ite	ne
 80021e0:	2301      	movne	r3, #1
 80021e2:	2300      	moveq	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	e00b      	b.n	8002200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	43da      	mvns	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	4013      	ands	r3, r2
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	bf14      	ite	ne
 80021fa:	2301      	movne	r3, #1
 80021fc:	2300      	moveq	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	f47f af6d 	bne.w	80020e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800221c:	e034      	b.n	8002288 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 f886 	bl	8002330 <I2C_IsAcknowledgeFailed>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e034      	b.n	8002298 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002234:	d028      	beq.n	8002288 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002236:	f7ff f8e3 	bl	8001400 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	429a      	cmp	r2, r3
 8002244:	d302      	bcc.n	800224c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d11d      	bne.n	8002288 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002256:	2b80      	cmp	r3, #128	; 0x80
 8002258:	d016      	beq.n	8002288 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	f043 0220 	orr.w	r2, r3, #32
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e007      	b.n	8002298 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002292:	2b80      	cmp	r3, #128	; 0x80
 8002294:	d1c3      	bne.n	800221e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022ac:	e034      	b.n	8002318 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 f83e 	bl	8002330 <I2C_IsAcknowledgeFailed>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e034      	b.n	8002328 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c4:	d028      	beq.n	8002318 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022c6:	f7ff f89b 	bl	8001400 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d302      	bcc.n	80022dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d11d      	bne.n	8002318 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d016      	beq.n	8002318 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	f043 0220 	orr.w	r2, r3, #32
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e007      	b.n	8002328 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	f003 0304 	and.w	r3, r3, #4
 8002322:	2b04      	cmp	r3, #4
 8002324:	d1c3      	bne.n	80022ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002346:	d11b      	bne.n	8002380 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002350:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	f043 0204 	orr.w	r2, r3, #4
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr

0800238c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e26c      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 8087 	beq.w	80024ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023ac:	4b92      	ldr	r3, [pc, #584]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 030c 	and.w	r3, r3, #12
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d00c      	beq.n	80023d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023b8:	4b8f      	ldr	r3, [pc, #572]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 030c 	and.w	r3, r3, #12
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d112      	bne.n	80023ea <HAL_RCC_OscConfig+0x5e>
 80023c4:	4b8c      	ldr	r3, [pc, #560]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d0:	d10b      	bne.n	80023ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d2:	4b89      	ldr	r3, [pc, #548]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d06c      	beq.n	80024b8 <HAL_RCC_OscConfig+0x12c>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d168      	bne.n	80024b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e246      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f2:	d106      	bne.n	8002402 <HAL_RCC_OscConfig+0x76>
 80023f4:	4b80      	ldr	r3, [pc, #512]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a7f      	ldr	r2, [pc, #508]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	e02e      	b.n	8002460 <HAL_RCC_OscConfig+0xd4>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10c      	bne.n	8002424 <HAL_RCC_OscConfig+0x98>
 800240a:	4b7b      	ldr	r3, [pc, #492]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a7a      	ldr	r2, [pc, #488]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	4b78      	ldr	r3, [pc, #480]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a77      	ldr	r2, [pc, #476]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800241c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	e01d      	b.n	8002460 <HAL_RCC_OscConfig+0xd4>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800242c:	d10c      	bne.n	8002448 <HAL_RCC_OscConfig+0xbc>
 800242e:	4b72      	ldr	r3, [pc, #456]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a71      	ldr	r2, [pc, #452]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	4b6f      	ldr	r3, [pc, #444]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a6e      	ldr	r2, [pc, #440]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	e00b      	b.n	8002460 <HAL_RCC_OscConfig+0xd4>
 8002448:	4b6b      	ldr	r3, [pc, #428]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a6a      	ldr	r2, [pc, #424]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800244e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	4b68      	ldr	r3, [pc, #416]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a67      	ldr	r2, [pc, #412]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800245a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800245e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d013      	beq.n	8002490 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7fe ffca 	bl	8001400 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002470:	f7fe ffc6 	bl	8001400 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b64      	cmp	r3, #100	; 0x64
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e1fa      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002482:	4b5d      	ldr	r3, [pc, #372]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0xe4>
 800248e:	e014      	b.n	80024ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002490:	f7fe ffb6 	bl	8001400 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002498:	f7fe ffb2 	bl	8001400 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	; 0x64
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e1e6      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024aa:	4b53      	ldr	r3, [pc, #332]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f0      	bne.n	8002498 <HAL_RCC_OscConfig+0x10c>
 80024b6:	e000      	b.n	80024ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d063      	beq.n	800258e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024c6:	4b4c      	ldr	r3, [pc, #304]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00b      	beq.n	80024ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024d2:	4b49      	ldr	r3, [pc, #292]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d11c      	bne.n	8002518 <HAL_RCC_OscConfig+0x18c>
 80024de:	4b46      	ldr	r3, [pc, #280]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d116      	bne.n	8002518 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ea:	4b43      	ldr	r3, [pc, #268]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d005      	beq.n	8002502 <HAL_RCC_OscConfig+0x176>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d001      	beq.n	8002502 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e1ba      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002502:	4b3d      	ldr	r3, [pc, #244]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4939      	ldr	r1, [pc, #228]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002512:	4313      	orrs	r3, r2
 8002514:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002516:	e03a      	b.n	800258e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d020      	beq.n	8002562 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002520:	4b36      	ldr	r3, [pc, #216]	; (80025fc <HAL_RCC_OscConfig+0x270>)
 8002522:	2201      	movs	r2, #1
 8002524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002526:	f7fe ff6b 	bl	8001400 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800252e:	f7fe ff67 	bl	8001400 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e19b      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002540:	4b2d      	ldr	r3, [pc, #180]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254c:	4b2a      	ldr	r3, [pc, #168]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	4927      	ldr	r1, [pc, #156]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800255c:	4313      	orrs	r3, r2
 800255e:	600b      	str	r3, [r1, #0]
 8002560:	e015      	b.n	800258e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002562:	4b26      	ldr	r3, [pc, #152]	; (80025fc <HAL_RCC_OscConfig+0x270>)
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002568:	f7fe ff4a 	bl	8001400 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002570:	f7fe ff46 	bl	8001400 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e17a      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002582:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f0      	bne.n	8002570 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d03a      	beq.n	8002610 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d019      	beq.n	80025d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025a2:	4b17      	ldr	r3, [pc, #92]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a8:	f7fe ff2a 	bl	8001400 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b0:	f7fe ff26 	bl	8001400 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e15a      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c2:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f0      	beq.n	80025b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025ce:	2001      	movs	r0, #1
 80025d0:	f000 facc 	bl	8002b6c <RCC_Delay>
 80025d4:	e01c      	b.n	8002610 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025dc:	f7fe ff10 	bl	8001400 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e2:	e00f      	b.n	8002604 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e4:	f7fe ff0c 	bl	8001400 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d908      	bls.n	8002604 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e140      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000
 80025fc:	42420000 	.word	0x42420000
 8002600:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002604:	4b9e      	ldr	r3, [pc, #632]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1e9      	bne.n	80025e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 80a6 	beq.w	800276a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800261e:	2300      	movs	r3, #0
 8002620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002622:	4b97      	ldr	r3, [pc, #604]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10d      	bne.n	800264a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800262e:	4b94      	ldr	r3, [pc, #592]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	4a93      	ldr	r2, [pc, #588]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002638:	61d3      	str	r3, [r2, #28]
 800263a:	4b91      	ldr	r3, [pc, #580]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002646:	2301      	movs	r3, #1
 8002648:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264a:	4b8e      	ldr	r3, [pc, #568]	; (8002884 <HAL_RCC_OscConfig+0x4f8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002652:	2b00      	cmp	r3, #0
 8002654:	d118      	bne.n	8002688 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002656:	4b8b      	ldr	r3, [pc, #556]	; (8002884 <HAL_RCC_OscConfig+0x4f8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a8a      	ldr	r2, [pc, #552]	; (8002884 <HAL_RCC_OscConfig+0x4f8>)
 800265c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002662:	f7fe fecd 	bl	8001400 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266a:	f7fe fec9 	bl	8001400 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b64      	cmp	r3, #100	; 0x64
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e0fd      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267c:	4b81      	ldr	r3, [pc, #516]	; (8002884 <HAL_RCC_OscConfig+0x4f8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f0      	beq.n	800266a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d106      	bne.n	800269e <HAL_RCC_OscConfig+0x312>
 8002690:	4b7b      	ldr	r3, [pc, #492]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	4a7a      	ldr	r2, [pc, #488]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6213      	str	r3, [r2, #32]
 800269c:	e02d      	b.n	80026fa <HAL_RCC_OscConfig+0x36e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10c      	bne.n	80026c0 <HAL_RCC_OscConfig+0x334>
 80026a6:	4b76      	ldr	r3, [pc, #472]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	4a75      	ldr	r2, [pc, #468]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026ac:	f023 0301 	bic.w	r3, r3, #1
 80026b0:	6213      	str	r3, [r2, #32]
 80026b2:	4b73      	ldr	r3, [pc, #460]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	4a72      	ldr	r2, [pc, #456]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026b8:	f023 0304 	bic.w	r3, r3, #4
 80026bc:	6213      	str	r3, [r2, #32]
 80026be:	e01c      	b.n	80026fa <HAL_RCC_OscConfig+0x36e>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2b05      	cmp	r3, #5
 80026c6:	d10c      	bne.n	80026e2 <HAL_RCC_OscConfig+0x356>
 80026c8:	4b6d      	ldr	r3, [pc, #436]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	4a6c      	ldr	r2, [pc, #432]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026ce:	f043 0304 	orr.w	r3, r3, #4
 80026d2:	6213      	str	r3, [r2, #32]
 80026d4:	4b6a      	ldr	r3, [pc, #424]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	4a69      	ldr	r2, [pc, #420]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6213      	str	r3, [r2, #32]
 80026e0:	e00b      	b.n	80026fa <HAL_RCC_OscConfig+0x36e>
 80026e2:	4b67      	ldr	r3, [pc, #412]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	4a66      	ldr	r2, [pc, #408]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026e8:	f023 0301 	bic.w	r3, r3, #1
 80026ec:	6213      	str	r3, [r2, #32]
 80026ee:	4b64      	ldr	r3, [pc, #400]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	4a63      	ldr	r2, [pc, #396]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026f4:	f023 0304 	bic.w	r3, r3, #4
 80026f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d015      	beq.n	800272e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002702:	f7fe fe7d 	bl	8001400 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002708:	e00a      	b.n	8002720 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270a:	f7fe fe79 	bl	8001400 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	f241 3288 	movw	r2, #5000	; 0x1388
 8002718:	4293      	cmp	r3, r2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e0ab      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002720:	4b57      	ldr	r3, [pc, #348]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0ee      	beq.n	800270a <HAL_RCC_OscConfig+0x37e>
 800272c:	e014      	b.n	8002758 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272e:	f7fe fe67 	bl	8001400 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002734:	e00a      	b.n	800274c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002736:	f7fe fe63 	bl	8001400 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	f241 3288 	movw	r2, #5000	; 0x1388
 8002744:	4293      	cmp	r3, r2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e095      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800274c:	4b4c      	ldr	r3, [pc, #304]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1ee      	bne.n	8002736 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002758:	7dfb      	ldrb	r3, [r7, #23]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d105      	bne.n	800276a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800275e:	4b48      	ldr	r3, [pc, #288]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	4a47      	ldr	r2, [pc, #284]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002768:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 8081 	beq.w	8002876 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002774:	4b42      	ldr	r3, [pc, #264]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 030c 	and.w	r3, r3, #12
 800277c:	2b08      	cmp	r3, #8
 800277e:	d061      	beq.n	8002844 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	2b02      	cmp	r3, #2
 8002786:	d146      	bne.n	8002816 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002788:	4b3f      	ldr	r3, [pc, #252]	; (8002888 <HAL_RCC_OscConfig+0x4fc>)
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278e:	f7fe fe37 	bl	8001400 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002796:	f7fe fe33 	bl	8001400 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e067      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a8:	4b35      	ldr	r3, [pc, #212]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f0      	bne.n	8002796 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027bc:	d108      	bne.n	80027d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027be:	4b30      	ldr	r3, [pc, #192]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	492d      	ldr	r1, [pc, #180]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027d0:	4b2b      	ldr	r3, [pc, #172]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a19      	ldr	r1, [r3, #32]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	430b      	orrs	r3, r1
 80027e2:	4927      	ldr	r1, [pc, #156]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027e8:	4b27      	ldr	r3, [pc, #156]	; (8002888 <HAL_RCC_OscConfig+0x4fc>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ee:	f7fe fe07 	bl	8001400 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f6:	f7fe fe03 	bl	8001400 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e037      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002808:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x46a>
 8002814:	e02f      	b.n	8002876 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002816:	4b1c      	ldr	r3, [pc, #112]	; (8002888 <HAL_RCC_OscConfig+0x4fc>)
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7fe fdf0 	bl	8001400 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002824:	f7fe fdec 	bl	8001400 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e020      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002836:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x498>
 8002842:	e018      	b.n	8002876 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e013      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	429a      	cmp	r2, r3
 8002862:	d106      	bne.n	8002872 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286e:	429a      	cmp	r2, r3
 8002870:	d001      	beq.n	8002876 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40021000 	.word	0x40021000
 8002884:	40007000 	.word	0x40007000
 8002888:	42420060 	.word	0x42420060

0800288c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0d0      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028a0:	4b6a      	ldr	r3, [pc, #424]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d910      	bls.n	80028d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ae:	4b67      	ldr	r3, [pc, #412]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f023 0207 	bic.w	r2, r3, #7
 80028b6:	4965      	ldr	r1, [pc, #404]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028be:	4b63      	ldr	r3, [pc, #396]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d001      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0b8      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d020      	beq.n	800291e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028e8:	4b59      	ldr	r3, [pc, #356]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	4a58      	ldr	r2, [pc, #352]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80028ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002900:	4b53      	ldr	r3, [pc, #332]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	4a52      	ldr	r2, [pc, #328]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002906:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800290a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800290c:	4b50      	ldr	r3, [pc, #320]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	494d      	ldr	r1, [pc, #308]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 800291a:	4313      	orrs	r3, r2
 800291c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d040      	beq.n	80029ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d107      	bne.n	8002942 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	4b47      	ldr	r3, [pc, #284]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d115      	bne.n	800296a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e07f      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d107      	bne.n	800295a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294a:	4b41      	ldr	r3, [pc, #260]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d109      	bne.n	800296a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e073      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295a:	4b3d      	ldr	r3, [pc, #244]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e06b      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800296a:	4b39      	ldr	r3, [pc, #228]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f023 0203 	bic.w	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4936      	ldr	r1, [pc, #216]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002978:	4313      	orrs	r3, r2
 800297a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800297c:	f7fe fd40 	bl	8001400 <HAL_GetTick>
 8002980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002982:	e00a      	b.n	800299a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002984:	f7fe fd3c 	bl	8001400 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002992:	4293      	cmp	r3, r2
 8002994:	d901      	bls.n	800299a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e053      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299a:	4b2d      	ldr	r3, [pc, #180]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f003 020c 	and.w	r2, r3, #12
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d1eb      	bne.n	8002984 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029ac:	4b27      	ldr	r3, [pc, #156]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d210      	bcs.n	80029dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ba:	4b24      	ldr	r3, [pc, #144]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f023 0207 	bic.w	r2, r3, #7
 80029c2:	4922      	ldr	r1, [pc, #136]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ca:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d001      	beq.n	80029dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e032      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d008      	beq.n	80029fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029e8:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	4916      	ldr	r1, [pc, #88]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d009      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a06:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	490e      	ldr	r1, [pc, #56]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a1a:	f000 f821 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	490a      	ldr	r1, [pc, #40]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 8002a2c:	5ccb      	ldrb	r3, [r1, r3]
 8002a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a32:	4a09      	ldr	r2, [pc, #36]	; (8002a58 <HAL_RCC_ClockConfig+0x1cc>)
 8002a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a36:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <HAL_RCC_ClockConfig+0x1d0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fe fc9e 	bl	800137c <HAL_InitTick>

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40022000 	.word	0x40022000
 8002a50:	40021000 	.word	0x40021000
 8002a54:	08003ea0 	.word	0x08003ea0
 8002a58:	20000058 	.word	0x20000058
 8002a5c:	2000005c 	.word	0x2000005c

08002a60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60bb      	str	r3, [r7, #8]
 8002a6e:	2300      	movs	r3, #0
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	2300      	movs	r3, #0
 8002a74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a7a:	4b1e      	ldr	r3, [pc, #120]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 030c 	and.w	r3, r3, #12
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d002      	beq.n	8002a90 <HAL_RCC_GetSysClockFreq+0x30>
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d003      	beq.n	8002a96 <HAL_RCC_GetSysClockFreq+0x36>
 8002a8e:	e027      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a90:	4b19      	ldr	r3, [pc, #100]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a92:	613b      	str	r3, [r7, #16]
      break;
 8002a94:	e027      	b.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	0c9b      	lsrs	r3, r3, #18
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	4a17      	ldr	r2, [pc, #92]	; (8002afc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002aa0:	5cd3      	ldrb	r3, [r2, r3]
 8002aa2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d010      	beq.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002aae:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	0c5b      	lsrs	r3, r3, #17
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	4a11      	ldr	r2, [pc, #68]	; (8002b00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002aba:	5cd3      	ldrb	r3, [r2, r3]
 8002abc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a0d      	ldr	r2, [pc, #52]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ac2:	fb02 f203 	mul.w	r2, r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	e004      	b.n	8002ada <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a0c      	ldr	r2, [pc, #48]	; (8002b04 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ad4:	fb02 f303 	mul.w	r3, r2, r3
 8002ad8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	613b      	str	r3, [r7, #16]
      break;
 8002ade:	e002      	b.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ae2:	613b      	str	r3, [r7, #16]
      break;
 8002ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ae6:	693b      	ldr	r3, [r7, #16]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	371c      	adds	r7, #28
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bc80      	pop	{r7}
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	40021000 	.word	0x40021000
 8002af8:	007a1200 	.word	0x007a1200
 8002afc:	08003eb8 	.word	0x08003eb8
 8002b00:	08003ec8 	.word	0x08003ec8
 8002b04:	003d0900 	.word	0x003d0900

08002b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b0c:	4b02      	ldr	r3, [pc, #8]	; (8002b18 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr
 8002b18:	20000058 	.word	0x20000058

08002b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b20:	f7ff fff2 	bl	8002b08 <HAL_RCC_GetHCLKFreq>
 8002b24:	4602      	mov	r2, r0
 8002b26:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	0a1b      	lsrs	r3, r3, #8
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	4903      	ldr	r1, [pc, #12]	; (8002b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b32:	5ccb      	ldrb	r3, [r1, r3]
 8002b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	08003eb0 	.word	0x08003eb0

08002b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b48:	f7ff ffde 	bl	8002b08 <HAL_RCC_GetHCLKFreq>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	0adb      	lsrs	r3, r3, #11
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	4903      	ldr	r1, [pc, #12]	; (8002b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b5a:	5ccb      	ldrb	r3, [r1, r3]
 8002b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40021000 	.word	0x40021000
 8002b68:	08003eb0 	.word	0x08003eb0

08002b6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b74:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <RCC_Delay+0x34>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a0a      	ldr	r2, [pc, #40]	; (8002ba4 <RCC_Delay+0x38>)
 8002b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7e:	0a5b      	lsrs	r3, r3, #9
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	fb02 f303 	mul.w	r3, r2, r3
 8002b86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b88:	bf00      	nop
  }
  while (Delay --);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	1e5a      	subs	r2, r3, #1
 8002b8e:	60fa      	str	r2, [r7, #12]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1f9      	bne.n	8002b88 <RCC_Delay+0x1c>
}
 8002b94:	bf00      	nop
 8002b96:	bf00      	nop
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr
 8002ba0:	20000058 	.word	0x20000058
 8002ba4:	10624dd3 	.word	0x10624dd3

08002ba8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e041      	b.n	8002c3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d106      	bne.n	8002bd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7fe fac0 	bl	8001154 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3304      	adds	r3, #4
 8002be4:	4619      	mov	r1, r3
 8002be6:	4610      	mov	r0, r2
 8002be8:	f000 fa5c 	bl	80030a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d001      	beq.n	8002c60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e03a      	b.n	8002cd6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0201 	orr.w	r2, r2, #1
 8002c76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a18      	ldr	r2, [pc, #96]	; (8002ce0 <HAL_TIM_Base_Start_IT+0x98>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d00e      	beq.n	8002ca0 <HAL_TIM_Base_Start_IT+0x58>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c8a:	d009      	beq.n	8002ca0 <HAL_TIM_Base_Start_IT+0x58>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a14      	ldr	r2, [pc, #80]	; (8002ce4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d004      	beq.n	8002ca0 <HAL_TIM_Base_Start_IT+0x58>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a13      	ldr	r2, [pc, #76]	; (8002ce8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d111      	bne.n	8002cc4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2b06      	cmp	r3, #6
 8002cb0:	d010      	beq.n	8002cd4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f042 0201 	orr.w	r2, r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc2:	e007      	b.n	8002cd4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0201 	orr.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr
 8002ce0:	40012c00 	.word	0x40012c00
 8002ce4:	40000400 	.word	0x40000400
 8002ce8:	40000800 	.word	0x40000800

08002cec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d020      	beq.n	8002d50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d01b      	beq.n	8002d50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f06f 0202 	mvn.w	r2, #2
 8002d20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f998 	bl	800306c <HAL_TIM_IC_CaptureCallback>
 8002d3c:	e005      	b.n	8002d4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f98b 	bl	800305a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f99a 	bl	800307e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d020      	beq.n	8002d9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d01b      	beq.n	8002d9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0204 	mvn.w	r2, #4
 8002d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2202      	movs	r2, #2
 8002d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f972 	bl	800306c <HAL_TIM_IC_CaptureCallback>
 8002d88:	e005      	b.n	8002d96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f965 	bl	800305a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f974 	bl	800307e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d020      	beq.n	8002de8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f003 0308 	and.w	r3, r3, #8
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d01b      	beq.n	8002de8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0208 	mvn.w	r2, #8
 8002db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f94c 	bl	800306c <HAL_TIM_IC_CaptureCallback>
 8002dd4:	e005      	b.n	8002de2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f93f 	bl	800305a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f94e 	bl	800307e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f003 0310 	and.w	r3, r3, #16
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d020      	beq.n	8002e34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d01b      	beq.n	8002e34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0210 	mvn.w	r2, #16
 8002e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2208      	movs	r2, #8
 8002e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f926 	bl	800306c <HAL_TIM_IC_CaptureCallback>
 8002e20:	e005      	b.n	8002e2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f919 	bl	800305a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f928 	bl	800307e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00c      	beq.n	8002e58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d007      	beq.n	8002e58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f06f 0201 	mvn.w	r2, #1
 8002e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7fe f89a 	bl	8000f8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00c      	beq.n	8002e7c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d007      	beq.n	8002e7c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 fa7f 	bl	800337a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00c      	beq.n	8002ea0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d007      	beq.n	8002ea0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f8f8 	bl	8003090 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f003 0320 	and.w	r3, r3, #32
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00c      	beq.n	8002ec4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f003 0320 	and.w	r3, r3, #32
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d007      	beq.n	8002ec4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f06f 0220 	mvn.w	r2, #32
 8002ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fa52 	bl	8003368 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ec4:	bf00      	nop
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_TIM_ConfigClockSource+0x1c>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e0b4      	b.n	8003052 <HAL_TIM_ConfigClockSource+0x186>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f20:	d03e      	beq.n	8002fa0 <HAL_TIM_ConfigClockSource+0xd4>
 8002f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f26:	f200 8087 	bhi.w	8003038 <HAL_TIM_ConfigClockSource+0x16c>
 8002f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f2e:	f000 8086 	beq.w	800303e <HAL_TIM_ConfigClockSource+0x172>
 8002f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f36:	d87f      	bhi.n	8003038 <HAL_TIM_ConfigClockSource+0x16c>
 8002f38:	2b70      	cmp	r3, #112	; 0x70
 8002f3a:	d01a      	beq.n	8002f72 <HAL_TIM_ConfigClockSource+0xa6>
 8002f3c:	2b70      	cmp	r3, #112	; 0x70
 8002f3e:	d87b      	bhi.n	8003038 <HAL_TIM_ConfigClockSource+0x16c>
 8002f40:	2b60      	cmp	r3, #96	; 0x60
 8002f42:	d050      	beq.n	8002fe6 <HAL_TIM_ConfigClockSource+0x11a>
 8002f44:	2b60      	cmp	r3, #96	; 0x60
 8002f46:	d877      	bhi.n	8003038 <HAL_TIM_ConfigClockSource+0x16c>
 8002f48:	2b50      	cmp	r3, #80	; 0x50
 8002f4a:	d03c      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0xfa>
 8002f4c:	2b50      	cmp	r3, #80	; 0x50
 8002f4e:	d873      	bhi.n	8003038 <HAL_TIM_ConfigClockSource+0x16c>
 8002f50:	2b40      	cmp	r3, #64	; 0x40
 8002f52:	d058      	beq.n	8003006 <HAL_TIM_ConfigClockSource+0x13a>
 8002f54:	2b40      	cmp	r3, #64	; 0x40
 8002f56:	d86f      	bhi.n	8003038 <HAL_TIM_ConfigClockSource+0x16c>
 8002f58:	2b30      	cmp	r3, #48	; 0x30
 8002f5a:	d064      	beq.n	8003026 <HAL_TIM_ConfigClockSource+0x15a>
 8002f5c:	2b30      	cmp	r3, #48	; 0x30
 8002f5e:	d86b      	bhi.n	8003038 <HAL_TIM_ConfigClockSource+0x16c>
 8002f60:	2b20      	cmp	r3, #32
 8002f62:	d060      	beq.n	8003026 <HAL_TIM_ConfigClockSource+0x15a>
 8002f64:	2b20      	cmp	r3, #32
 8002f66:	d867      	bhi.n	8003038 <HAL_TIM_ConfigClockSource+0x16c>
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d05c      	beq.n	8003026 <HAL_TIM_ConfigClockSource+0x15a>
 8002f6c:	2b10      	cmp	r3, #16
 8002f6e:	d05a      	beq.n	8003026 <HAL_TIM_ConfigClockSource+0x15a>
 8002f70:	e062      	b.n	8003038 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6818      	ldr	r0, [r3, #0]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	6899      	ldr	r1, [r3, #8]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f000 f974 	bl	800326e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	609a      	str	r2, [r3, #8]
      break;
 8002f9e:	e04f      	b.n	8003040 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6818      	ldr	r0, [r3, #0]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	6899      	ldr	r1, [r3, #8]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f000 f95d 	bl	800326e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fc2:	609a      	str	r2, [r3, #8]
      break;
 8002fc4:	e03c      	b.n	8003040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	6859      	ldr	r1, [r3, #4]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	f000 f8d4 	bl	8003180 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2150      	movs	r1, #80	; 0x50
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 f92b 	bl	800323a <TIM_ITRx_SetConfig>
      break;
 8002fe4:	e02c      	b.n	8003040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6818      	ldr	r0, [r3, #0]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	6859      	ldr	r1, [r3, #4]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	f000 f8f2 	bl	80031dc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2160      	movs	r1, #96	; 0x60
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 f91b 	bl	800323a <TIM_ITRx_SetConfig>
      break;
 8003004:	e01c      	b.n	8003040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6818      	ldr	r0, [r3, #0]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	6859      	ldr	r1, [r3, #4]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	461a      	mov	r2, r3
 8003014:	f000 f8b4 	bl	8003180 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2140      	movs	r1, #64	; 0x40
 800301e:	4618      	mov	r0, r3
 8003020:	f000 f90b 	bl	800323a <TIM_ITRx_SetConfig>
      break;
 8003024:	e00c      	b.n	8003040 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4619      	mov	r1, r3
 8003030:	4610      	mov	r0, r2
 8003032:	f000 f902 	bl	800323a <TIM_ITRx_SetConfig>
      break;
 8003036:	e003      	b.n	8003040 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	73fb      	strb	r3, [r7, #15]
      break;
 800303c:	e000      	b.n	8003040 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800303e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003050:	7bfb      	ldrb	r3, [r7, #15]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr

0800306c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr

0800307e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr

08003090 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr
	...

080030a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a2f      	ldr	r2, [pc, #188]	; (8003174 <TIM_Base_SetConfig+0xd0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d00b      	beq.n	80030d4 <TIM_Base_SetConfig+0x30>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c2:	d007      	beq.n	80030d4 <TIM_Base_SetConfig+0x30>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a2c      	ldr	r2, [pc, #176]	; (8003178 <TIM_Base_SetConfig+0xd4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d003      	beq.n	80030d4 <TIM_Base_SetConfig+0x30>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a2b      	ldr	r2, [pc, #172]	; (800317c <TIM_Base_SetConfig+0xd8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d108      	bne.n	80030e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a22      	ldr	r2, [pc, #136]	; (8003174 <TIM_Base_SetConfig+0xd0>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d00b      	beq.n	8003106 <TIM_Base_SetConfig+0x62>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f4:	d007      	beq.n	8003106 <TIM_Base_SetConfig+0x62>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a1f      	ldr	r2, [pc, #124]	; (8003178 <TIM_Base_SetConfig+0xd4>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d003      	beq.n	8003106 <TIM_Base_SetConfig+0x62>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a1e      	ldr	r2, [pc, #120]	; (800317c <TIM_Base_SetConfig+0xd8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d108      	bne.n	8003118 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800310c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4313      	orrs	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	4313      	orrs	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a0d      	ldr	r2, [pc, #52]	; (8003174 <TIM_Base_SetConfig+0xd0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d103      	bne.n	800314c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	691a      	ldr	r2, [r3, #16]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f023 0201 	bic.w	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	611a      	str	r2, [r3, #16]
  }
}
 800316a:	bf00      	nop
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr
 8003174:	40012c00 	.word	0x40012c00
 8003178:	40000400 	.word	0x40000400
 800317c:	40000800 	.word	0x40000800

08003180 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	f023 0201 	bic.w	r2, r3, #1
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f023 030a 	bic.w	r3, r3, #10
 80031bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	621a      	str	r2, [r3, #32]
}
 80031d2:	bf00      	nop
 80031d4:	371c      	adds	r7, #28
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr

080031dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031dc:	b480      	push	{r7}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	f023 0210 	bic.w	r2, r3, #16
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003206:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	031b      	lsls	r3, r3, #12
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003218:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4313      	orrs	r3, r2
 8003222:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	621a      	str	r2, [r3, #32]
}
 8003230:	bf00      	nop
 8003232:	371c      	adds	r7, #28
 8003234:	46bd      	mov	sp, r7
 8003236:	bc80      	pop	{r7}
 8003238:	4770      	bx	lr

0800323a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800323a:	b480      	push	{r7}
 800323c:	b085      	sub	sp, #20
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
 8003242:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003250:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4313      	orrs	r3, r2
 8003258:	f043 0307 	orr.w	r3, r3, #7
 800325c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	609a      	str	r2, [r3, #8]
}
 8003264:	bf00      	nop
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	bc80      	pop	{r7}
 800326c:	4770      	bx	lr

0800326e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800326e:	b480      	push	{r7}
 8003270:	b087      	sub	sp, #28
 8003272:	af00      	add	r7, sp, #0
 8003274:	60f8      	str	r0, [r7, #12]
 8003276:	60b9      	str	r1, [r7, #8]
 8003278:	607a      	str	r2, [r7, #4]
 800327a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003288:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	021a      	lsls	r2, r3, #8
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	431a      	orrs	r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	4313      	orrs	r3, r2
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	4313      	orrs	r3, r2
 800329a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	609a      	str	r2, [r3, #8]
}
 80032a2:	bf00      	nop
 80032a4:	371c      	adds	r7, #28
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr

080032ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d101      	bne.n	80032c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032c0:	2302      	movs	r3, #2
 80032c2:	e046      	b.n	8003352 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a16      	ldr	r2, [pc, #88]	; (800335c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d00e      	beq.n	8003326 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003310:	d009      	beq.n	8003326 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a12      	ldr	r2, [pc, #72]	; (8003360 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d004      	beq.n	8003326 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a10      	ldr	r2, [pc, #64]	; (8003364 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d10c      	bne.n	8003340 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800332c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	4313      	orrs	r3, r2
 8003336:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr
 800335c:	40012c00 	.word	0x40012c00
 8003360:	40000400 	.word	0x40000400
 8003364:	40000800 	.word	0x40000800

08003368 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr

0800337a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr

0800338c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e042      	b.n	8003424 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d106      	bne.n	80033b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7fd fef2 	bl	800119c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2224      	movs	r2, #36	; 0x24
 80033bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f82b 	bl	800342c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695a      	ldr	r2, [r3, #20]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003404:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003466:	f023 030c 	bic.w	r3, r3, #12
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	68b9      	ldr	r1, [r7, #8]
 8003470:	430b      	orrs	r3, r1
 8003472:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699a      	ldr	r2, [r3, #24]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a2c      	ldr	r2, [pc, #176]	; (8003540 <UART_SetConfig+0x114>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d103      	bne.n	800349c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003494:	f7ff fb56 	bl	8002b44 <HAL_RCC_GetPCLK2Freq>
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	e002      	b.n	80034a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800349c:	f7ff fb3e 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 80034a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4613      	mov	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	009a      	lsls	r2, r3, #2
 80034ac:	441a      	add	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b8:	4a22      	ldr	r2, [pc, #136]	; (8003544 <UART_SetConfig+0x118>)
 80034ba:	fba2 2303 	umull	r2, r3, r2, r3
 80034be:	095b      	lsrs	r3, r3, #5
 80034c0:	0119      	lsls	r1, r3, #4
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	009a      	lsls	r2, r3, #2
 80034cc:	441a      	add	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80034d8:	4b1a      	ldr	r3, [pc, #104]	; (8003544 <UART_SetConfig+0x118>)
 80034da:	fba3 0302 	umull	r0, r3, r3, r2
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	2064      	movs	r0, #100	; 0x64
 80034e2:	fb00 f303 	mul.w	r3, r0, r3
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	3332      	adds	r3, #50	; 0x32
 80034ec:	4a15      	ldr	r2, [pc, #84]	; (8003544 <UART_SetConfig+0x118>)
 80034ee:	fba2 2303 	umull	r2, r3, r2, r3
 80034f2:	095b      	lsrs	r3, r3, #5
 80034f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034f8:	4419      	add	r1, r3
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	009a      	lsls	r2, r3, #2
 8003504:	441a      	add	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003510:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <UART_SetConfig+0x118>)
 8003512:	fba3 0302 	umull	r0, r3, r3, r2
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	2064      	movs	r0, #100	; 0x64
 800351a:	fb00 f303 	mul.w	r3, r0, r3
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	3332      	adds	r3, #50	; 0x32
 8003524:	4a07      	ldr	r2, [pc, #28]	; (8003544 <UART_SetConfig+0x118>)
 8003526:	fba2 2303 	umull	r2, r3, r2, r3
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	f003 020f 	and.w	r2, r3, #15
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	440a      	add	r2, r1
 8003536:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003538:	bf00      	nop
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40013800 	.word	0x40013800
 8003544:	51eb851f 	.word	0x51eb851f

08003548 <__errno>:
 8003548:	4b01      	ldr	r3, [pc, #4]	; (8003550 <__errno+0x8>)
 800354a:	6818      	ldr	r0, [r3, #0]
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	20000064 	.word	0x20000064

08003554 <__libc_init_array>:
 8003554:	b570      	push	{r4, r5, r6, lr}
 8003556:	2600      	movs	r6, #0
 8003558:	4d0c      	ldr	r5, [pc, #48]	; (800358c <__libc_init_array+0x38>)
 800355a:	4c0d      	ldr	r4, [pc, #52]	; (8003590 <__libc_init_array+0x3c>)
 800355c:	1b64      	subs	r4, r4, r5
 800355e:	10a4      	asrs	r4, r4, #2
 8003560:	42a6      	cmp	r6, r4
 8003562:	d109      	bne.n	8003578 <__libc_init_array+0x24>
 8003564:	f000 fc6c 	bl	8003e40 <_init>
 8003568:	2600      	movs	r6, #0
 800356a:	4d0a      	ldr	r5, [pc, #40]	; (8003594 <__libc_init_array+0x40>)
 800356c:	4c0a      	ldr	r4, [pc, #40]	; (8003598 <__libc_init_array+0x44>)
 800356e:	1b64      	subs	r4, r4, r5
 8003570:	10a4      	asrs	r4, r4, #2
 8003572:	42a6      	cmp	r6, r4
 8003574:	d105      	bne.n	8003582 <__libc_init_array+0x2e>
 8003576:	bd70      	pop	{r4, r5, r6, pc}
 8003578:	f855 3b04 	ldr.w	r3, [r5], #4
 800357c:	4798      	blx	r3
 800357e:	3601      	adds	r6, #1
 8003580:	e7ee      	b.n	8003560 <__libc_init_array+0xc>
 8003582:	f855 3b04 	ldr.w	r3, [r5], #4
 8003586:	4798      	blx	r3
 8003588:	3601      	adds	r6, #1
 800358a:	e7f2      	b.n	8003572 <__libc_init_array+0x1e>
 800358c:	08003f00 	.word	0x08003f00
 8003590:	08003f00 	.word	0x08003f00
 8003594:	08003f00 	.word	0x08003f00
 8003598:	08003f04 	.word	0x08003f04

0800359c <malloc>:
 800359c:	4b02      	ldr	r3, [pc, #8]	; (80035a8 <malloc+0xc>)
 800359e:	4601      	mov	r1, r0
 80035a0:	6818      	ldr	r0, [r3, #0]
 80035a2:	f000 b85f 	b.w	8003664 <_malloc_r>
 80035a6:	bf00      	nop
 80035a8:	20000064 	.word	0x20000064

080035ac <free>:
 80035ac:	4b02      	ldr	r3, [pc, #8]	; (80035b8 <free+0xc>)
 80035ae:	4601      	mov	r1, r0
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	f000 b80b 	b.w	80035cc <_free_r>
 80035b6:	bf00      	nop
 80035b8:	20000064 	.word	0x20000064

080035bc <memset>:
 80035bc:	4603      	mov	r3, r0
 80035be:	4402      	add	r2, r0
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d100      	bne.n	80035c6 <memset+0xa>
 80035c4:	4770      	bx	lr
 80035c6:	f803 1b01 	strb.w	r1, [r3], #1
 80035ca:	e7f9      	b.n	80035c0 <memset+0x4>

080035cc <_free_r>:
 80035cc:	b538      	push	{r3, r4, r5, lr}
 80035ce:	4605      	mov	r5, r0
 80035d0:	2900      	cmp	r1, #0
 80035d2:	d043      	beq.n	800365c <_free_r+0x90>
 80035d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035d8:	1f0c      	subs	r4, r1, #4
 80035da:	2b00      	cmp	r3, #0
 80035dc:	bfb8      	it	lt
 80035de:	18e4      	addlt	r4, r4, r3
 80035e0:	f000 f8ca 	bl	8003778 <__malloc_lock>
 80035e4:	4a1e      	ldr	r2, [pc, #120]	; (8003660 <_free_r+0x94>)
 80035e6:	6813      	ldr	r3, [r2, #0]
 80035e8:	4610      	mov	r0, r2
 80035ea:	b933      	cbnz	r3, 80035fa <_free_r+0x2e>
 80035ec:	6063      	str	r3, [r4, #4]
 80035ee:	6014      	str	r4, [r2, #0]
 80035f0:	4628      	mov	r0, r5
 80035f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035f6:	f000 b8c5 	b.w	8003784 <__malloc_unlock>
 80035fa:	42a3      	cmp	r3, r4
 80035fc:	d90a      	bls.n	8003614 <_free_r+0x48>
 80035fe:	6821      	ldr	r1, [r4, #0]
 8003600:	1862      	adds	r2, r4, r1
 8003602:	4293      	cmp	r3, r2
 8003604:	bf01      	itttt	eq
 8003606:	681a      	ldreq	r2, [r3, #0]
 8003608:	685b      	ldreq	r3, [r3, #4]
 800360a:	1852      	addeq	r2, r2, r1
 800360c:	6022      	streq	r2, [r4, #0]
 800360e:	6063      	str	r3, [r4, #4]
 8003610:	6004      	str	r4, [r0, #0]
 8003612:	e7ed      	b.n	80035f0 <_free_r+0x24>
 8003614:	461a      	mov	r2, r3
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	b10b      	cbz	r3, 800361e <_free_r+0x52>
 800361a:	42a3      	cmp	r3, r4
 800361c:	d9fa      	bls.n	8003614 <_free_r+0x48>
 800361e:	6811      	ldr	r1, [r2, #0]
 8003620:	1850      	adds	r0, r2, r1
 8003622:	42a0      	cmp	r0, r4
 8003624:	d10b      	bne.n	800363e <_free_r+0x72>
 8003626:	6820      	ldr	r0, [r4, #0]
 8003628:	4401      	add	r1, r0
 800362a:	1850      	adds	r0, r2, r1
 800362c:	4283      	cmp	r3, r0
 800362e:	6011      	str	r1, [r2, #0]
 8003630:	d1de      	bne.n	80035f0 <_free_r+0x24>
 8003632:	6818      	ldr	r0, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	4401      	add	r1, r0
 8003638:	6011      	str	r1, [r2, #0]
 800363a:	6053      	str	r3, [r2, #4]
 800363c:	e7d8      	b.n	80035f0 <_free_r+0x24>
 800363e:	d902      	bls.n	8003646 <_free_r+0x7a>
 8003640:	230c      	movs	r3, #12
 8003642:	602b      	str	r3, [r5, #0]
 8003644:	e7d4      	b.n	80035f0 <_free_r+0x24>
 8003646:	6820      	ldr	r0, [r4, #0]
 8003648:	1821      	adds	r1, r4, r0
 800364a:	428b      	cmp	r3, r1
 800364c:	bf01      	itttt	eq
 800364e:	6819      	ldreq	r1, [r3, #0]
 8003650:	685b      	ldreq	r3, [r3, #4]
 8003652:	1809      	addeq	r1, r1, r0
 8003654:	6021      	streq	r1, [r4, #0]
 8003656:	6063      	str	r3, [r4, #4]
 8003658:	6054      	str	r4, [r2, #4]
 800365a:	e7c9      	b.n	80035f0 <_free_r+0x24>
 800365c:	bd38      	pop	{r3, r4, r5, pc}
 800365e:	bf00      	nop
 8003660:	20000100 	.word	0x20000100

08003664 <_malloc_r>:
 8003664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003666:	1ccd      	adds	r5, r1, #3
 8003668:	f025 0503 	bic.w	r5, r5, #3
 800366c:	3508      	adds	r5, #8
 800366e:	2d0c      	cmp	r5, #12
 8003670:	bf38      	it	cc
 8003672:	250c      	movcc	r5, #12
 8003674:	2d00      	cmp	r5, #0
 8003676:	4606      	mov	r6, r0
 8003678:	db01      	blt.n	800367e <_malloc_r+0x1a>
 800367a:	42a9      	cmp	r1, r5
 800367c:	d903      	bls.n	8003686 <_malloc_r+0x22>
 800367e:	230c      	movs	r3, #12
 8003680:	6033      	str	r3, [r6, #0]
 8003682:	2000      	movs	r0, #0
 8003684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003686:	f000 f877 	bl	8003778 <__malloc_lock>
 800368a:	4921      	ldr	r1, [pc, #132]	; (8003710 <_malloc_r+0xac>)
 800368c:	680a      	ldr	r2, [r1, #0]
 800368e:	4614      	mov	r4, r2
 8003690:	b99c      	cbnz	r4, 80036ba <_malloc_r+0x56>
 8003692:	4f20      	ldr	r7, [pc, #128]	; (8003714 <_malloc_r+0xb0>)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	b923      	cbnz	r3, 80036a2 <_malloc_r+0x3e>
 8003698:	4621      	mov	r1, r4
 800369a:	4630      	mov	r0, r6
 800369c:	f000 f83c 	bl	8003718 <_sbrk_r>
 80036a0:	6038      	str	r0, [r7, #0]
 80036a2:	4629      	mov	r1, r5
 80036a4:	4630      	mov	r0, r6
 80036a6:	f000 f837 	bl	8003718 <_sbrk_r>
 80036aa:	1c43      	adds	r3, r0, #1
 80036ac:	d123      	bne.n	80036f6 <_malloc_r+0x92>
 80036ae:	230c      	movs	r3, #12
 80036b0:	4630      	mov	r0, r6
 80036b2:	6033      	str	r3, [r6, #0]
 80036b4:	f000 f866 	bl	8003784 <__malloc_unlock>
 80036b8:	e7e3      	b.n	8003682 <_malloc_r+0x1e>
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	1b5b      	subs	r3, r3, r5
 80036be:	d417      	bmi.n	80036f0 <_malloc_r+0x8c>
 80036c0:	2b0b      	cmp	r3, #11
 80036c2:	d903      	bls.n	80036cc <_malloc_r+0x68>
 80036c4:	6023      	str	r3, [r4, #0]
 80036c6:	441c      	add	r4, r3
 80036c8:	6025      	str	r5, [r4, #0]
 80036ca:	e004      	b.n	80036d6 <_malloc_r+0x72>
 80036cc:	6863      	ldr	r3, [r4, #4]
 80036ce:	42a2      	cmp	r2, r4
 80036d0:	bf0c      	ite	eq
 80036d2:	600b      	streq	r3, [r1, #0]
 80036d4:	6053      	strne	r3, [r2, #4]
 80036d6:	4630      	mov	r0, r6
 80036d8:	f000 f854 	bl	8003784 <__malloc_unlock>
 80036dc:	f104 000b 	add.w	r0, r4, #11
 80036e0:	1d23      	adds	r3, r4, #4
 80036e2:	f020 0007 	bic.w	r0, r0, #7
 80036e6:	1ac2      	subs	r2, r0, r3
 80036e8:	d0cc      	beq.n	8003684 <_malloc_r+0x20>
 80036ea:	1a1b      	subs	r3, r3, r0
 80036ec:	50a3      	str	r3, [r4, r2]
 80036ee:	e7c9      	b.n	8003684 <_malloc_r+0x20>
 80036f0:	4622      	mov	r2, r4
 80036f2:	6864      	ldr	r4, [r4, #4]
 80036f4:	e7cc      	b.n	8003690 <_malloc_r+0x2c>
 80036f6:	1cc4      	adds	r4, r0, #3
 80036f8:	f024 0403 	bic.w	r4, r4, #3
 80036fc:	42a0      	cmp	r0, r4
 80036fe:	d0e3      	beq.n	80036c8 <_malloc_r+0x64>
 8003700:	1a21      	subs	r1, r4, r0
 8003702:	4630      	mov	r0, r6
 8003704:	f000 f808 	bl	8003718 <_sbrk_r>
 8003708:	3001      	adds	r0, #1
 800370a:	d1dd      	bne.n	80036c8 <_malloc_r+0x64>
 800370c:	e7cf      	b.n	80036ae <_malloc_r+0x4a>
 800370e:	bf00      	nop
 8003710:	20000100 	.word	0x20000100
 8003714:	20000104 	.word	0x20000104

08003718 <_sbrk_r>:
 8003718:	b538      	push	{r3, r4, r5, lr}
 800371a:	2300      	movs	r3, #0
 800371c:	4d05      	ldr	r5, [pc, #20]	; (8003734 <_sbrk_r+0x1c>)
 800371e:	4604      	mov	r4, r0
 8003720:	4608      	mov	r0, r1
 8003722:	602b      	str	r3, [r5, #0]
 8003724:	f7fd fdb2 	bl	800128c <_sbrk>
 8003728:	1c43      	adds	r3, r0, #1
 800372a:	d102      	bne.n	8003732 <_sbrk_r+0x1a>
 800372c:	682b      	ldr	r3, [r5, #0]
 800372e:	b103      	cbz	r3, 8003732 <_sbrk_r+0x1a>
 8003730:	6023      	str	r3, [r4, #0]
 8003732:	bd38      	pop	{r3, r4, r5, pc}
 8003734:	20000260 	.word	0x20000260

08003738 <siprintf>:
 8003738:	b40e      	push	{r1, r2, r3}
 800373a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800373e:	b500      	push	{lr}
 8003740:	b09c      	sub	sp, #112	; 0x70
 8003742:	ab1d      	add	r3, sp, #116	; 0x74
 8003744:	9002      	str	r0, [sp, #8]
 8003746:	9006      	str	r0, [sp, #24]
 8003748:	9107      	str	r1, [sp, #28]
 800374a:	9104      	str	r1, [sp, #16]
 800374c:	4808      	ldr	r0, [pc, #32]	; (8003770 <siprintf+0x38>)
 800374e:	4909      	ldr	r1, [pc, #36]	; (8003774 <siprintf+0x3c>)
 8003750:	f853 2b04 	ldr.w	r2, [r3], #4
 8003754:	9105      	str	r1, [sp, #20]
 8003756:	6800      	ldr	r0, [r0, #0]
 8003758:	a902      	add	r1, sp, #8
 800375a:	9301      	str	r3, [sp, #4]
 800375c:	f000 f874 	bl	8003848 <_svfiprintf_r>
 8003760:	2200      	movs	r2, #0
 8003762:	9b02      	ldr	r3, [sp, #8]
 8003764:	701a      	strb	r2, [r3, #0]
 8003766:	b01c      	add	sp, #112	; 0x70
 8003768:	f85d eb04 	ldr.w	lr, [sp], #4
 800376c:	b003      	add	sp, #12
 800376e:	4770      	bx	lr
 8003770:	20000064 	.word	0x20000064
 8003774:	ffff0208 	.word	0xffff0208

08003778 <__malloc_lock>:
 8003778:	4801      	ldr	r0, [pc, #4]	; (8003780 <__malloc_lock+0x8>)
 800377a:	f000 bafb 	b.w	8003d74 <__retarget_lock_acquire_recursive>
 800377e:	bf00      	nop
 8003780:	20000268 	.word	0x20000268

08003784 <__malloc_unlock>:
 8003784:	4801      	ldr	r0, [pc, #4]	; (800378c <__malloc_unlock+0x8>)
 8003786:	f000 baf6 	b.w	8003d76 <__retarget_lock_release_recursive>
 800378a:	bf00      	nop
 800378c:	20000268 	.word	0x20000268

08003790 <__ssputs_r>:
 8003790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003794:	688e      	ldr	r6, [r1, #8]
 8003796:	4682      	mov	sl, r0
 8003798:	429e      	cmp	r6, r3
 800379a:	460c      	mov	r4, r1
 800379c:	4690      	mov	r8, r2
 800379e:	461f      	mov	r7, r3
 80037a0:	d838      	bhi.n	8003814 <__ssputs_r+0x84>
 80037a2:	898a      	ldrh	r2, [r1, #12]
 80037a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80037a8:	d032      	beq.n	8003810 <__ssputs_r+0x80>
 80037aa:	6825      	ldr	r5, [r4, #0]
 80037ac:	6909      	ldr	r1, [r1, #16]
 80037ae:	3301      	adds	r3, #1
 80037b0:	eba5 0901 	sub.w	r9, r5, r1
 80037b4:	6965      	ldr	r5, [r4, #20]
 80037b6:	444b      	add	r3, r9
 80037b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80037bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80037c0:	106d      	asrs	r5, r5, #1
 80037c2:	429d      	cmp	r5, r3
 80037c4:	bf38      	it	cc
 80037c6:	461d      	movcc	r5, r3
 80037c8:	0553      	lsls	r3, r2, #21
 80037ca:	d531      	bpl.n	8003830 <__ssputs_r+0xa0>
 80037cc:	4629      	mov	r1, r5
 80037ce:	f7ff ff49 	bl	8003664 <_malloc_r>
 80037d2:	4606      	mov	r6, r0
 80037d4:	b950      	cbnz	r0, 80037ec <__ssputs_r+0x5c>
 80037d6:	230c      	movs	r3, #12
 80037d8:	f04f 30ff 	mov.w	r0, #4294967295
 80037dc:	f8ca 3000 	str.w	r3, [sl]
 80037e0:	89a3      	ldrh	r3, [r4, #12]
 80037e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037e6:	81a3      	strh	r3, [r4, #12]
 80037e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ec:	464a      	mov	r2, r9
 80037ee:	6921      	ldr	r1, [r4, #16]
 80037f0:	f000 fad0 	bl	8003d94 <memcpy>
 80037f4:	89a3      	ldrh	r3, [r4, #12]
 80037f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80037fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037fe:	81a3      	strh	r3, [r4, #12]
 8003800:	6126      	str	r6, [r4, #16]
 8003802:	444e      	add	r6, r9
 8003804:	6026      	str	r6, [r4, #0]
 8003806:	463e      	mov	r6, r7
 8003808:	6165      	str	r5, [r4, #20]
 800380a:	eba5 0509 	sub.w	r5, r5, r9
 800380e:	60a5      	str	r5, [r4, #8]
 8003810:	42be      	cmp	r6, r7
 8003812:	d900      	bls.n	8003816 <__ssputs_r+0x86>
 8003814:	463e      	mov	r6, r7
 8003816:	4632      	mov	r2, r6
 8003818:	4641      	mov	r1, r8
 800381a:	6820      	ldr	r0, [r4, #0]
 800381c:	f000 fac8 	bl	8003db0 <memmove>
 8003820:	68a3      	ldr	r3, [r4, #8]
 8003822:	6822      	ldr	r2, [r4, #0]
 8003824:	1b9b      	subs	r3, r3, r6
 8003826:	4432      	add	r2, r6
 8003828:	2000      	movs	r0, #0
 800382a:	60a3      	str	r3, [r4, #8]
 800382c:	6022      	str	r2, [r4, #0]
 800382e:	e7db      	b.n	80037e8 <__ssputs_r+0x58>
 8003830:	462a      	mov	r2, r5
 8003832:	f000 fad7 	bl	8003de4 <_realloc_r>
 8003836:	4606      	mov	r6, r0
 8003838:	2800      	cmp	r0, #0
 800383a:	d1e1      	bne.n	8003800 <__ssputs_r+0x70>
 800383c:	4650      	mov	r0, sl
 800383e:	6921      	ldr	r1, [r4, #16]
 8003840:	f7ff fec4 	bl	80035cc <_free_r>
 8003844:	e7c7      	b.n	80037d6 <__ssputs_r+0x46>
	...

08003848 <_svfiprintf_r>:
 8003848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800384c:	4698      	mov	r8, r3
 800384e:	898b      	ldrh	r3, [r1, #12]
 8003850:	4607      	mov	r7, r0
 8003852:	061b      	lsls	r3, r3, #24
 8003854:	460d      	mov	r5, r1
 8003856:	4614      	mov	r4, r2
 8003858:	b09d      	sub	sp, #116	; 0x74
 800385a:	d50e      	bpl.n	800387a <_svfiprintf_r+0x32>
 800385c:	690b      	ldr	r3, [r1, #16]
 800385e:	b963      	cbnz	r3, 800387a <_svfiprintf_r+0x32>
 8003860:	2140      	movs	r1, #64	; 0x40
 8003862:	f7ff feff 	bl	8003664 <_malloc_r>
 8003866:	6028      	str	r0, [r5, #0]
 8003868:	6128      	str	r0, [r5, #16]
 800386a:	b920      	cbnz	r0, 8003876 <_svfiprintf_r+0x2e>
 800386c:	230c      	movs	r3, #12
 800386e:	603b      	str	r3, [r7, #0]
 8003870:	f04f 30ff 	mov.w	r0, #4294967295
 8003874:	e0d1      	b.n	8003a1a <_svfiprintf_r+0x1d2>
 8003876:	2340      	movs	r3, #64	; 0x40
 8003878:	616b      	str	r3, [r5, #20]
 800387a:	2300      	movs	r3, #0
 800387c:	9309      	str	r3, [sp, #36]	; 0x24
 800387e:	2320      	movs	r3, #32
 8003880:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003884:	2330      	movs	r3, #48	; 0x30
 8003886:	f04f 0901 	mov.w	r9, #1
 800388a:	f8cd 800c 	str.w	r8, [sp, #12]
 800388e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003a34 <_svfiprintf_r+0x1ec>
 8003892:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003896:	4623      	mov	r3, r4
 8003898:	469a      	mov	sl, r3
 800389a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800389e:	b10a      	cbz	r2, 80038a4 <_svfiprintf_r+0x5c>
 80038a0:	2a25      	cmp	r2, #37	; 0x25
 80038a2:	d1f9      	bne.n	8003898 <_svfiprintf_r+0x50>
 80038a4:	ebba 0b04 	subs.w	fp, sl, r4
 80038a8:	d00b      	beq.n	80038c2 <_svfiprintf_r+0x7a>
 80038aa:	465b      	mov	r3, fp
 80038ac:	4622      	mov	r2, r4
 80038ae:	4629      	mov	r1, r5
 80038b0:	4638      	mov	r0, r7
 80038b2:	f7ff ff6d 	bl	8003790 <__ssputs_r>
 80038b6:	3001      	adds	r0, #1
 80038b8:	f000 80aa 	beq.w	8003a10 <_svfiprintf_r+0x1c8>
 80038bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038be:	445a      	add	r2, fp
 80038c0:	9209      	str	r2, [sp, #36]	; 0x24
 80038c2:	f89a 3000 	ldrb.w	r3, [sl]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 80a2 	beq.w	8003a10 <_svfiprintf_r+0x1c8>
 80038cc:	2300      	movs	r3, #0
 80038ce:	f04f 32ff 	mov.w	r2, #4294967295
 80038d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038d6:	f10a 0a01 	add.w	sl, sl, #1
 80038da:	9304      	str	r3, [sp, #16]
 80038dc:	9307      	str	r3, [sp, #28]
 80038de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038e2:	931a      	str	r3, [sp, #104]	; 0x68
 80038e4:	4654      	mov	r4, sl
 80038e6:	2205      	movs	r2, #5
 80038e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038ec:	4851      	ldr	r0, [pc, #324]	; (8003a34 <_svfiprintf_r+0x1ec>)
 80038ee:	f000 fa43 	bl	8003d78 <memchr>
 80038f2:	9a04      	ldr	r2, [sp, #16]
 80038f4:	b9d8      	cbnz	r0, 800392e <_svfiprintf_r+0xe6>
 80038f6:	06d0      	lsls	r0, r2, #27
 80038f8:	bf44      	itt	mi
 80038fa:	2320      	movmi	r3, #32
 80038fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003900:	0711      	lsls	r1, r2, #28
 8003902:	bf44      	itt	mi
 8003904:	232b      	movmi	r3, #43	; 0x2b
 8003906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800390a:	f89a 3000 	ldrb.w	r3, [sl]
 800390e:	2b2a      	cmp	r3, #42	; 0x2a
 8003910:	d015      	beq.n	800393e <_svfiprintf_r+0xf6>
 8003912:	4654      	mov	r4, sl
 8003914:	2000      	movs	r0, #0
 8003916:	f04f 0c0a 	mov.w	ip, #10
 800391a:	9a07      	ldr	r2, [sp, #28]
 800391c:	4621      	mov	r1, r4
 800391e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003922:	3b30      	subs	r3, #48	; 0x30
 8003924:	2b09      	cmp	r3, #9
 8003926:	d94e      	bls.n	80039c6 <_svfiprintf_r+0x17e>
 8003928:	b1b0      	cbz	r0, 8003958 <_svfiprintf_r+0x110>
 800392a:	9207      	str	r2, [sp, #28]
 800392c:	e014      	b.n	8003958 <_svfiprintf_r+0x110>
 800392e:	eba0 0308 	sub.w	r3, r0, r8
 8003932:	fa09 f303 	lsl.w	r3, r9, r3
 8003936:	4313      	orrs	r3, r2
 8003938:	46a2      	mov	sl, r4
 800393a:	9304      	str	r3, [sp, #16]
 800393c:	e7d2      	b.n	80038e4 <_svfiprintf_r+0x9c>
 800393e:	9b03      	ldr	r3, [sp, #12]
 8003940:	1d19      	adds	r1, r3, #4
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	9103      	str	r1, [sp, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	bfbb      	ittet	lt
 800394a:	425b      	neglt	r3, r3
 800394c:	f042 0202 	orrlt.w	r2, r2, #2
 8003950:	9307      	strge	r3, [sp, #28]
 8003952:	9307      	strlt	r3, [sp, #28]
 8003954:	bfb8      	it	lt
 8003956:	9204      	strlt	r2, [sp, #16]
 8003958:	7823      	ldrb	r3, [r4, #0]
 800395a:	2b2e      	cmp	r3, #46	; 0x2e
 800395c:	d10c      	bne.n	8003978 <_svfiprintf_r+0x130>
 800395e:	7863      	ldrb	r3, [r4, #1]
 8003960:	2b2a      	cmp	r3, #42	; 0x2a
 8003962:	d135      	bne.n	80039d0 <_svfiprintf_r+0x188>
 8003964:	9b03      	ldr	r3, [sp, #12]
 8003966:	3402      	adds	r4, #2
 8003968:	1d1a      	adds	r2, r3, #4
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	9203      	str	r2, [sp, #12]
 800396e:	2b00      	cmp	r3, #0
 8003970:	bfb8      	it	lt
 8003972:	f04f 33ff 	movlt.w	r3, #4294967295
 8003976:	9305      	str	r3, [sp, #20]
 8003978:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003a44 <_svfiprintf_r+0x1fc>
 800397c:	2203      	movs	r2, #3
 800397e:	4650      	mov	r0, sl
 8003980:	7821      	ldrb	r1, [r4, #0]
 8003982:	f000 f9f9 	bl	8003d78 <memchr>
 8003986:	b140      	cbz	r0, 800399a <_svfiprintf_r+0x152>
 8003988:	2340      	movs	r3, #64	; 0x40
 800398a:	eba0 000a 	sub.w	r0, r0, sl
 800398e:	fa03 f000 	lsl.w	r0, r3, r0
 8003992:	9b04      	ldr	r3, [sp, #16]
 8003994:	3401      	adds	r4, #1
 8003996:	4303      	orrs	r3, r0
 8003998:	9304      	str	r3, [sp, #16]
 800399a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800399e:	2206      	movs	r2, #6
 80039a0:	4825      	ldr	r0, [pc, #148]	; (8003a38 <_svfiprintf_r+0x1f0>)
 80039a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039a6:	f000 f9e7 	bl	8003d78 <memchr>
 80039aa:	2800      	cmp	r0, #0
 80039ac:	d038      	beq.n	8003a20 <_svfiprintf_r+0x1d8>
 80039ae:	4b23      	ldr	r3, [pc, #140]	; (8003a3c <_svfiprintf_r+0x1f4>)
 80039b0:	bb1b      	cbnz	r3, 80039fa <_svfiprintf_r+0x1b2>
 80039b2:	9b03      	ldr	r3, [sp, #12]
 80039b4:	3307      	adds	r3, #7
 80039b6:	f023 0307 	bic.w	r3, r3, #7
 80039ba:	3308      	adds	r3, #8
 80039bc:	9303      	str	r3, [sp, #12]
 80039be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039c0:	4433      	add	r3, r6
 80039c2:	9309      	str	r3, [sp, #36]	; 0x24
 80039c4:	e767      	b.n	8003896 <_svfiprintf_r+0x4e>
 80039c6:	460c      	mov	r4, r1
 80039c8:	2001      	movs	r0, #1
 80039ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80039ce:	e7a5      	b.n	800391c <_svfiprintf_r+0xd4>
 80039d0:	2300      	movs	r3, #0
 80039d2:	f04f 0c0a 	mov.w	ip, #10
 80039d6:	4619      	mov	r1, r3
 80039d8:	3401      	adds	r4, #1
 80039da:	9305      	str	r3, [sp, #20]
 80039dc:	4620      	mov	r0, r4
 80039de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039e2:	3a30      	subs	r2, #48	; 0x30
 80039e4:	2a09      	cmp	r2, #9
 80039e6:	d903      	bls.n	80039f0 <_svfiprintf_r+0x1a8>
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0c5      	beq.n	8003978 <_svfiprintf_r+0x130>
 80039ec:	9105      	str	r1, [sp, #20]
 80039ee:	e7c3      	b.n	8003978 <_svfiprintf_r+0x130>
 80039f0:	4604      	mov	r4, r0
 80039f2:	2301      	movs	r3, #1
 80039f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80039f8:	e7f0      	b.n	80039dc <_svfiprintf_r+0x194>
 80039fa:	ab03      	add	r3, sp, #12
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	462a      	mov	r2, r5
 8003a00:	4638      	mov	r0, r7
 8003a02:	4b0f      	ldr	r3, [pc, #60]	; (8003a40 <_svfiprintf_r+0x1f8>)
 8003a04:	a904      	add	r1, sp, #16
 8003a06:	f3af 8000 	nop.w
 8003a0a:	1c42      	adds	r2, r0, #1
 8003a0c:	4606      	mov	r6, r0
 8003a0e:	d1d6      	bne.n	80039be <_svfiprintf_r+0x176>
 8003a10:	89ab      	ldrh	r3, [r5, #12]
 8003a12:	065b      	lsls	r3, r3, #25
 8003a14:	f53f af2c 	bmi.w	8003870 <_svfiprintf_r+0x28>
 8003a18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a1a:	b01d      	add	sp, #116	; 0x74
 8003a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a20:	ab03      	add	r3, sp, #12
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	462a      	mov	r2, r5
 8003a26:	4638      	mov	r0, r7
 8003a28:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <_svfiprintf_r+0x1f8>)
 8003a2a:	a904      	add	r1, sp, #16
 8003a2c:	f000 f87c 	bl	8003b28 <_printf_i>
 8003a30:	e7eb      	b.n	8003a0a <_svfiprintf_r+0x1c2>
 8003a32:	bf00      	nop
 8003a34:	08003eca 	.word	0x08003eca
 8003a38:	08003ed4 	.word	0x08003ed4
 8003a3c:	00000000 	.word	0x00000000
 8003a40:	08003791 	.word	0x08003791
 8003a44:	08003ed0 	.word	0x08003ed0

08003a48 <_printf_common>:
 8003a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a4c:	4616      	mov	r6, r2
 8003a4e:	4699      	mov	r9, r3
 8003a50:	688a      	ldr	r2, [r1, #8]
 8003a52:	690b      	ldr	r3, [r1, #16]
 8003a54:	4607      	mov	r7, r0
 8003a56:	4293      	cmp	r3, r2
 8003a58:	bfb8      	it	lt
 8003a5a:	4613      	movlt	r3, r2
 8003a5c:	6033      	str	r3, [r6, #0]
 8003a5e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a62:	460c      	mov	r4, r1
 8003a64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a68:	b10a      	cbz	r2, 8003a6e <_printf_common+0x26>
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	6033      	str	r3, [r6, #0]
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	0699      	lsls	r1, r3, #26
 8003a72:	bf42      	ittt	mi
 8003a74:	6833      	ldrmi	r3, [r6, #0]
 8003a76:	3302      	addmi	r3, #2
 8003a78:	6033      	strmi	r3, [r6, #0]
 8003a7a:	6825      	ldr	r5, [r4, #0]
 8003a7c:	f015 0506 	ands.w	r5, r5, #6
 8003a80:	d106      	bne.n	8003a90 <_printf_common+0x48>
 8003a82:	f104 0a19 	add.w	sl, r4, #25
 8003a86:	68e3      	ldr	r3, [r4, #12]
 8003a88:	6832      	ldr	r2, [r6, #0]
 8003a8a:	1a9b      	subs	r3, r3, r2
 8003a8c:	42ab      	cmp	r3, r5
 8003a8e:	dc28      	bgt.n	8003ae2 <_printf_common+0x9a>
 8003a90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a94:	1e13      	subs	r3, r2, #0
 8003a96:	6822      	ldr	r2, [r4, #0]
 8003a98:	bf18      	it	ne
 8003a9a:	2301      	movne	r3, #1
 8003a9c:	0692      	lsls	r2, r2, #26
 8003a9e:	d42d      	bmi.n	8003afc <_printf_common+0xb4>
 8003aa0:	4649      	mov	r1, r9
 8003aa2:	4638      	mov	r0, r7
 8003aa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003aa8:	47c0      	blx	r8
 8003aaa:	3001      	adds	r0, #1
 8003aac:	d020      	beq.n	8003af0 <_printf_common+0xa8>
 8003aae:	6823      	ldr	r3, [r4, #0]
 8003ab0:	68e5      	ldr	r5, [r4, #12]
 8003ab2:	f003 0306 	and.w	r3, r3, #6
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	bf18      	it	ne
 8003aba:	2500      	movne	r5, #0
 8003abc:	6832      	ldr	r2, [r6, #0]
 8003abe:	f04f 0600 	mov.w	r6, #0
 8003ac2:	68a3      	ldr	r3, [r4, #8]
 8003ac4:	bf08      	it	eq
 8003ac6:	1aad      	subeq	r5, r5, r2
 8003ac8:	6922      	ldr	r2, [r4, #16]
 8003aca:	bf08      	it	eq
 8003acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	bfc4      	itt	gt
 8003ad4:	1a9b      	subgt	r3, r3, r2
 8003ad6:	18ed      	addgt	r5, r5, r3
 8003ad8:	341a      	adds	r4, #26
 8003ada:	42b5      	cmp	r5, r6
 8003adc:	d11a      	bne.n	8003b14 <_printf_common+0xcc>
 8003ade:	2000      	movs	r0, #0
 8003ae0:	e008      	b.n	8003af4 <_printf_common+0xac>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	4652      	mov	r2, sl
 8003ae6:	4649      	mov	r1, r9
 8003ae8:	4638      	mov	r0, r7
 8003aea:	47c0      	blx	r8
 8003aec:	3001      	adds	r0, #1
 8003aee:	d103      	bne.n	8003af8 <_printf_common+0xb0>
 8003af0:	f04f 30ff 	mov.w	r0, #4294967295
 8003af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003af8:	3501      	adds	r5, #1
 8003afa:	e7c4      	b.n	8003a86 <_printf_common+0x3e>
 8003afc:	2030      	movs	r0, #48	; 0x30
 8003afe:	18e1      	adds	r1, r4, r3
 8003b00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b0a:	4422      	add	r2, r4
 8003b0c:	3302      	adds	r3, #2
 8003b0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b12:	e7c5      	b.n	8003aa0 <_printf_common+0x58>
 8003b14:	2301      	movs	r3, #1
 8003b16:	4622      	mov	r2, r4
 8003b18:	4649      	mov	r1, r9
 8003b1a:	4638      	mov	r0, r7
 8003b1c:	47c0      	blx	r8
 8003b1e:	3001      	adds	r0, #1
 8003b20:	d0e6      	beq.n	8003af0 <_printf_common+0xa8>
 8003b22:	3601      	adds	r6, #1
 8003b24:	e7d9      	b.n	8003ada <_printf_common+0x92>
	...

08003b28 <_printf_i>:
 8003b28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b2c:	460c      	mov	r4, r1
 8003b2e:	7e27      	ldrb	r7, [r4, #24]
 8003b30:	4691      	mov	r9, r2
 8003b32:	2f78      	cmp	r7, #120	; 0x78
 8003b34:	4680      	mov	r8, r0
 8003b36:	469a      	mov	sl, r3
 8003b38:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003b3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b3e:	d807      	bhi.n	8003b50 <_printf_i+0x28>
 8003b40:	2f62      	cmp	r7, #98	; 0x62
 8003b42:	d80a      	bhi.n	8003b5a <_printf_i+0x32>
 8003b44:	2f00      	cmp	r7, #0
 8003b46:	f000 80d9 	beq.w	8003cfc <_printf_i+0x1d4>
 8003b4a:	2f58      	cmp	r7, #88	; 0x58
 8003b4c:	f000 80a4 	beq.w	8003c98 <_printf_i+0x170>
 8003b50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b58:	e03a      	b.n	8003bd0 <_printf_i+0xa8>
 8003b5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b5e:	2b15      	cmp	r3, #21
 8003b60:	d8f6      	bhi.n	8003b50 <_printf_i+0x28>
 8003b62:	a001      	add	r0, pc, #4	; (adr r0, 8003b68 <_printf_i+0x40>)
 8003b64:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003b68:	08003bc1 	.word	0x08003bc1
 8003b6c:	08003bd5 	.word	0x08003bd5
 8003b70:	08003b51 	.word	0x08003b51
 8003b74:	08003b51 	.word	0x08003b51
 8003b78:	08003b51 	.word	0x08003b51
 8003b7c:	08003b51 	.word	0x08003b51
 8003b80:	08003bd5 	.word	0x08003bd5
 8003b84:	08003b51 	.word	0x08003b51
 8003b88:	08003b51 	.word	0x08003b51
 8003b8c:	08003b51 	.word	0x08003b51
 8003b90:	08003b51 	.word	0x08003b51
 8003b94:	08003ce3 	.word	0x08003ce3
 8003b98:	08003c05 	.word	0x08003c05
 8003b9c:	08003cc5 	.word	0x08003cc5
 8003ba0:	08003b51 	.word	0x08003b51
 8003ba4:	08003b51 	.word	0x08003b51
 8003ba8:	08003d05 	.word	0x08003d05
 8003bac:	08003b51 	.word	0x08003b51
 8003bb0:	08003c05 	.word	0x08003c05
 8003bb4:	08003b51 	.word	0x08003b51
 8003bb8:	08003b51 	.word	0x08003b51
 8003bbc:	08003ccd 	.word	0x08003ccd
 8003bc0:	680b      	ldr	r3, [r1, #0]
 8003bc2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003bc6:	1d1a      	adds	r2, r3, #4
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	600a      	str	r2, [r1, #0]
 8003bcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e0a4      	b.n	8003d1e <_printf_i+0x1f6>
 8003bd4:	6825      	ldr	r5, [r4, #0]
 8003bd6:	6808      	ldr	r0, [r1, #0]
 8003bd8:	062e      	lsls	r6, r5, #24
 8003bda:	f100 0304 	add.w	r3, r0, #4
 8003bde:	d50a      	bpl.n	8003bf6 <_printf_i+0xce>
 8003be0:	6805      	ldr	r5, [r0, #0]
 8003be2:	600b      	str	r3, [r1, #0]
 8003be4:	2d00      	cmp	r5, #0
 8003be6:	da03      	bge.n	8003bf0 <_printf_i+0xc8>
 8003be8:	232d      	movs	r3, #45	; 0x2d
 8003bea:	426d      	negs	r5, r5
 8003bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bf0:	230a      	movs	r3, #10
 8003bf2:	485e      	ldr	r0, [pc, #376]	; (8003d6c <_printf_i+0x244>)
 8003bf4:	e019      	b.n	8003c2a <_printf_i+0x102>
 8003bf6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003bfa:	6805      	ldr	r5, [r0, #0]
 8003bfc:	600b      	str	r3, [r1, #0]
 8003bfe:	bf18      	it	ne
 8003c00:	b22d      	sxthne	r5, r5
 8003c02:	e7ef      	b.n	8003be4 <_printf_i+0xbc>
 8003c04:	680b      	ldr	r3, [r1, #0]
 8003c06:	6825      	ldr	r5, [r4, #0]
 8003c08:	1d18      	adds	r0, r3, #4
 8003c0a:	6008      	str	r0, [r1, #0]
 8003c0c:	0628      	lsls	r0, r5, #24
 8003c0e:	d501      	bpl.n	8003c14 <_printf_i+0xec>
 8003c10:	681d      	ldr	r5, [r3, #0]
 8003c12:	e002      	b.n	8003c1a <_printf_i+0xf2>
 8003c14:	0669      	lsls	r1, r5, #25
 8003c16:	d5fb      	bpl.n	8003c10 <_printf_i+0xe8>
 8003c18:	881d      	ldrh	r5, [r3, #0]
 8003c1a:	2f6f      	cmp	r7, #111	; 0x6f
 8003c1c:	bf0c      	ite	eq
 8003c1e:	2308      	moveq	r3, #8
 8003c20:	230a      	movne	r3, #10
 8003c22:	4852      	ldr	r0, [pc, #328]	; (8003d6c <_printf_i+0x244>)
 8003c24:	2100      	movs	r1, #0
 8003c26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c2a:	6866      	ldr	r6, [r4, #4]
 8003c2c:	2e00      	cmp	r6, #0
 8003c2e:	bfa8      	it	ge
 8003c30:	6821      	ldrge	r1, [r4, #0]
 8003c32:	60a6      	str	r6, [r4, #8]
 8003c34:	bfa4      	itt	ge
 8003c36:	f021 0104 	bicge.w	r1, r1, #4
 8003c3a:	6021      	strge	r1, [r4, #0]
 8003c3c:	b90d      	cbnz	r5, 8003c42 <_printf_i+0x11a>
 8003c3e:	2e00      	cmp	r6, #0
 8003c40:	d04d      	beq.n	8003cde <_printf_i+0x1b6>
 8003c42:	4616      	mov	r6, r2
 8003c44:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c48:	fb03 5711 	mls	r7, r3, r1, r5
 8003c4c:	5dc7      	ldrb	r7, [r0, r7]
 8003c4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c52:	462f      	mov	r7, r5
 8003c54:	42bb      	cmp	r3, r7
 8003c56:	460d      	mov	r5, r1
 8003c58:	d9f4      	bls.n	8003c44 <_printf_i+0x11c>
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d10b      	bne.n	8003c76 <_printf_i+0x14e>
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	07df      	lsls	r7, r3, #31
 8003c62:	d508      	bpl.n	8003c76 <_printf_i+0x14e>
 8003c64:	6923      	ldr	r3, [r4, #16]
 8003c66:	6861      	ldr	r1, [r4, #4]
 8003c68:	4299      	cmp	r1, r3
 8003c6a:	bfde      	ittt	le
 8003c6c:	2330      	movle	r3, #48	; 0x30
 8003c6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c72:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003c76:	1b92      	subs	r2, r2, r6
 8003c78:	6122      	str	r2, [r4, #16]
 8003c7a:	464b      	mov	r3, r9
 8003c7c:	4621      	mov	r1, r4
 8003c7e:	4640      	mov	r0, r8
 8003c80:	f8cd a000 	str.w	sl, [sp]
 8003c84:	aa03      	add	r2, sp, #12
 8003c86:	f7ff fedf 	bl	8003a48 <_printf_common>
 8003c8a:	3001      	adds	r0, #1
 8003c8c:	d14c      	bne.n	8003d28 <_printf_i+0x200>
 8003c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8003c92:	b004      	add	sp, #16
 8003c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c98:	4834      	ldr	r0, [pc, #208]	; (8003d6c <_printf_i+0x244>)
 8003c9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c9e:	680e      	ldr	r6, [r1, #0]
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	f856 5b04 	ldr.w	r5, [r6], #4
 8003ca6:	061f      	lsls	r7, r3, #24
 8003ca8:	600e      	str	r6, [r1, #0]
 8003caa:	d514      	bpl.n	8003cd6 <_printf_i+0x1ae>
 8003cac:	07d9      	lsls	r1, r3, #31
 8003cae:	bf44      	itt	mi
 8003cb0:	f043 0320 	orrmi.w	r3, r3, #32
 8003cb4:	6023      	strmi	r3, [r4, #0]
 8003cb6:	b91d      	cbnz	r5, 8003cc0 <_printf_i+0x198>
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	f023 0320 	bic.w	r3, r3, #32
 8003cbe:	6023      	str	r3, [r4, #0]
 8003cc0:	2310      	movs	r3, #16
 8003cc2:	e7af      	b.n	8003c24 <_printf_i+0xfc>
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	f043 0320 	orr.w	r3, r3, #32
 8003cca:	6023      	str	r3, [r4, #0]
 8003ccc:	2378      	movs	r3, #120	; 0x78
 8003cce:	4828      	ldr	r0, [pc, #160]	; (8003d70 <_printf_i+0x248>)
 8003cd0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003cd4:	e7e3      	b.n	8003c9e <_printf_i+0x176>
 8003cd6:	065e      	lsls	r6, r3, #25
 8003cd8:	bf48      	it	mi
 8003cda:	b2ad      	uxthmi	r5, r5
 8003cdc:	e7e6      	b.n	8003cac <_printf_i+0x184>
 8003cde:	4616      	mov	r6, r2
 8003ce0:	e7bb      	b.n	8003c5a <_printf_i+0x132>
 8003ce2:	680b      	ldr	r3, [r1, #0]
 8003ce4:	6826      	ldr	r6, [r4, #0]
 8003ce6:	1d1d      	adds	r5, r3, #4
 8003ce8:	6960      	ldr	r0, [r4, #20]
 8003cea:	600d      	str	r5, [r1, #0]
 8003cec:	0635      	lsls	r5, r6, #24
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	d501      	bpl.n	8003cf6 <_printf_i+0x1ce>
 8003cf2:	6018      	str	r0, [r3, #0]
 8003cf4:	e002      	b.n	8003cfc <_printf_i+0x1d4>
 8003cf6:	0671      	lsls	r1, r6, #25
 8003cf8:	d5fb      	bpl.n	8003cf2 <_printf_i+0x1ca>
 8003cfa:	8018      	strh	r0, [r3, #0]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	4616      	mov	r6, r2
 8003d00:	6123      	str	r3, [r4, #16]
 8003d02:	e7ba      	b.n	8003c7a <_printf_i+0x152>
 8003d04:	680b      	ldr	r3, [r1, #0]
 8003d06:	1d1a      	adds	r2, r3, #4
 8003d08:	600a      	str	r2, [r1, #0]
 8003d0a:	681e      	ldr	r6, [r3, #0]
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	4630      	mov	r0, r6
 8003d10:	6862      	ldr	r2, [r4, #4]
 8003d12:	f000 f831 	bl	8003d78 <memchr>
 8003d16:	b108      	cbz	r0, 8003d1c <_printf_i+0x1f4>
 8003d18:	1b80      	subs	r0, r0, r6
 8003d1a:	6060      	str	r0, [r4, #4]
 8003d1c:	6863      	ldr	r3, [r4, #4]
 8003d1e:	6123      	str	r3, [r4, #16]
 8003d20:	2300      	movs	r3, #0
 8003d22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d26:	e7a8      	b.n	8003c7a <_printf_i+0x152>
 8003d28:	4632      	mov	r2, r6
 8003d2a:	4649      	mov	r1, r9
 8003d2c:	4640      	mov	r0, r8
 8003d2e:	6923      	ldr	r3, [r4, #16]
 8003d30:	47d0      	blx	sl
 8003d32:	3001      	adds	r0, #1
 8003d34:	d0ab      	beq.n	8003c8e <_printf_i+0x166>
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	079b      	lsls	r3, r3, #30
 8003d3a:	d413      	bmi.n	8003d64 <_printf_i+0x23c>
 8003d3c:	68e0      	ldr	r0, [r4, #12]
 8003d3e:	9b03      	ldr	r3, [sp, #12]
 8003d40:	4298      	cmp	r0, r3
 8003d42:	bfb8      	it	lt
 8003d44:	4618      	movlt	r0, r3
 8003d46:	e7a4      	b.n	8003c92 <_printf_i+0x16a>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	4632      	mov	r2, r6
 8003d4c:	4649      	mov	r1, r9
 8003d4e:	4640      	mov	r0, r8
 8003d50:	47d0      	blx	sl
 8003d52:	3001      	adds	r0, #1
 8003d54:	d09b      	beq.n	8003c8e <_printf_i+0x166>
 8003d56:	3501      	adds	r5, #1
 8003d58:	68e3      	ldr	r3, [r4, #12]
 8003d5a:	9903      	ldr	r1, [sp, #12]
 8003d5c:	1a5b      	subs	r3, r3, r1
 8003d5e:	42ab      	cmp	r3, r5
 8003d60:	dcf2      	bgt.n	8003d48 <_printf_i+0x220>
 8003d62:	e7eb      	b.n	8003d3c <_printf_i+0x214>
 8003d64:	2500      	movs	r5, #0
 8003d66:	f104 0619 	add.w	r6, r4, #25
 8003d6a:	e7f5      	b.n	8003d58 <_printf_i+0x230>
 8003d6c:	08003edb 	.word	0x08003edb
 8003d70:	08003eec 	.word	0x08003eec

08003d74 <__retarget_lock_acquire_recursive>:
 8003d74:	4770      	bx	lr

08003d76 <__retarget_lock_release_recursive>:
 8003d76:	4770      	bx	lr

08003d78 <memchr>:
 8003d78:	4603      	mov	r3, r0
 8003d7a:	b510      	push	{r4, lr}
 8003d7c:	b2c9      	uxtb	r1, r1
 8003d7e:	4402      	add	r2, r0
 8003d80:	4293      	cmp	r3, r2
 8003d82:	4618      	mov	r0, r3
 8003d84:	d101      	bne.n	8003d8a <memchr+0x12>
 8003d86:	2000      	movs	r0, #0
 8003d88:	e003      	b.n	8003d92 <memchr+0x1a>
 8003d8a:	7804      	ldrb	r4, [r0, #0]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	428c      	cmp	r4, r1
 8003d90:	d1f6      	bne.n	8003d80 <memchr+0x8>
 8003d92:	bd10      	pop	{r4, pc}

08003d94 <memcpy>:
 8003d94:	440a      	add	r2, r1
 8003d96:	4291      	cmp	r1, r2
 8003d98:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d9c:	d100      	bne.n	8003da0 <memcpy+0xc>
 8003d9e:	4770      	bx	lr
 8003da0:	b510      	push	{r4, lr}
 8003da2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003da6:	4291      	cmp	r1, r2
 8003da8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003dac:	d1f9      	bne.n	8003da2 <memcpy+0xe>
 8003dae:	bd10      	pop	{r4, pc}

08003db0 <memmove>:
 8003db0:	4288      	cmp	r0, r1
 8003db2:	b510      	push	{r4, lr}
 8003db4:	eb01 0402 	add.w	r4, r1, r2
 8003db8:	d902      	bls.n	8003dc0 <memmove+0x10>
 8003dba:	4284      	cmp	r4, r0
 8003dbc:	4623      	mov	r3, r4
 8003dbe:	d807      	bhi.n	8003dd0 <memmove+0x20>
 8003dc0:	1e43      	subs	r3, r0, #1
 8003dc2:	42a1      	cmp	r1, r4
 8003dc4:	d008      	beq.n	8003dd8 <memmove+0x28>
 8003dc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003dce:	e7f8      	b.n	8003dc2 <memmove+0x12>
 8003dd0:	4601      	mov	r1, r0
 8003dd2:	4402      	add	r2, r0
 8003dd4:	428a      	cmp	r2, r1
 8003dd6:	d100      	bne.n	8003dda <memmove+0x2a>
 8003dd8:	bd10      	pop	{r4, pc}
 8003dda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003dde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003de2:	e7f7      	b.n	8003dd4 <memmove+0x24>

08003de4 <_realloc_r>:
 8003de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de6:	4607      	mov	r7, r0
 8003de8:	4614      	mov	r4, r2
 8003dea:	460e      	mov	r6, r1
 8003dec:	b921      	cbnz	r1, 8003df8 <_realloc_r+0x14>
 8003dee:	4611      	mov	r1, r2
 8003df0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003df4:	f7ff bc36 	b.w	8003664 <_malloc_r>
 8003df8:	b922      	cbnz	r2, 8003e04 <_realloc_r+0x20>
 8003dfa:	f7ff fbe7 	bl	80035cc <_free_r>
 8003dfe:	4625      	mov	r5, r4
 8003e00:	4628      	mov	r0, r5
 8003e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e04:	f000 f814 	bl	8003e30 <_malloc_usable_size_r>
 8003e08:	42a0      	cmp	r0, r4
 8003e0a:	d20f      	bcs.n	8003e2c <_realloc_r+0x48>
 8003e0c:	4621      	mov	r1, r4
 8003e0e:	4638      	mov	r0, r7
 8003e10:	f7ff fc28 	bl	8003664 <_malloc_r>
 8003e14:	4605      	mov	r5, r0
 8003e16:	2800      	cmp	r0, #0
 8003e18:	d0f2      	beq.n	8003e00 <_realloc_r+0x1c>
 8003e1a:	4631      	mov	r1, r6
 8003e1c:	4622      	mov	r2, r4
 8003e1e:	f7ff ffb9 	bl	8003d94 <memcpy>
 8003e22:	4631      	mov	r1, r6
 8003e24:	4638      	mov	r0, r7
 8003e26:	f7ff fbd1 	bl	80035cc <_free_r>
 8003e2a:	e7e9      	b.n	8003e00 <_realloc_r+0x1c>
 8003e2c:	4635      	mov	r5, r6
 8003e2e:	e7e7      	b.n	8003e00 <_realloc_r+0x1c>

08003e30 <_malloc_usable_size_r>:
 8003e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e34:	1f18      	subs	r0, r3, #4
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	bfbc      	itt	lt
 8003e3a:	580b      	ldrlt	r3, [r1, r0]
 8003e3c:	18c0      	addlt	r0, r0, r3
 8003e3e:	4770      	bx	lr

08003e40 <_init>:
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e42:	bf00      	nop
 8003e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e46:	bc08      	pop	{r3}
 8003e48:	469e      	mov	lr, r3
 8003e4a:	4770      	bx	lr

08003e4c <_fini>:
 8003e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4e:	bf00      	nop
 8003e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e52:	bc08      	pop	{r3}
 8003e54:	469e      	mov	lr, r3
 8003e56:	4770      	bx	lr
