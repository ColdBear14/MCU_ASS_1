
MCU_ASS_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08004304  08004304  00014304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004400  08004400  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  08004400  08004400  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004400  08004400  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004400  08004400  00014400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004404  08004404  00014404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08004408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  200000c8  080044d0  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  080044d0  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e8e  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000265c  00000000  00000000  00031f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  000345e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed0  00000000  00000000  000355d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019128  00000000  00000000  000364a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c86  00000000  00000000  0004f5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008da26  00000000  00000000  00064256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1c7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000452c  00000000  00000000  000f1cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c8 	.word	0x200000c8
 8000128:	00000000 	.word	0x00000000
 800012c:	080042ec 	.word	0x080042ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000cc 	.word	0x200000cc
 8000148:	080042ec 	.word	0x080042ec

0800014c <IsButtonPress>:
int TimerForKeyPress[3] = {300,300,300};

int button_flag[3];
int button_long_flag[3];

int IsButtonPress(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <IsButtonPress+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <IsButtonPress+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <IsButtonPress+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <IsButtonPress+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000108 	.word	0x20000108

08000180 <subKeyProcess>:
	}
	return 0;
}


void subKeyProcess(int index) {
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000108 	.word	0x20000108

080001a0 <getIndex>:

int getIndex(int index) {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	switch(index){
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	2b02      	cmp	r3, #2
 80001ac:	d016      	beq.n	80001dc <getIndex+0x3c>
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	2b02      	cmp	r3, #2
 80001b2:	dc19      	bgt.n	80001e8 <getIndex+0x48>
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d003      	beq.n	80001c2 <getIndex+0x22>
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	2b01      	cmp	r3, #1
 80001be:	d007      	beq.n	80001d0 <getIndex+0x30>
			break;
		case 2:
			return HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
			break;
		default:
			break;
 80001c0:	e012      	b.n	80001e8 <getIndex+0x48>
			return HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80001c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c6:	480b      	ldr	r0, [pc, #44]	; (80001f4 <getIndex+0x54>)
 80001c8:	f001 fe30 	bl	8001e2c <HAL_GPIO_ReadPin>
 80001cc:	4603      	mov	r3, r0
 80001ce:	e00d      	b.n	80001ec <getIndex+0x4c>
			return HAL_GPIO_ReadPin(A0_GPIO_Port, A0_Pin);
 80001d0:	2101      	movs	r1, #1
 80001d2:	4809      	ldr	r0, [pc, #36]	; (80001f8 <getIndex+0x58>)
 80001d4:	f001 fe2a 	bl	8001e2c <HAL_GPIO_ReadPin>
 80001d8:	4603      	mov	r3, r0
 80001da:	e007      	b.n	80001ec <getIndex+0x4c>
			return HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
 80001dc:	2102      	movs	r1, #2
 80001de:	4806      	ldr	r0, [pc, #24]	; (80001f8 <getIndex+0x58>)
 80001e0:	f001 fe24 	bl	8001e2c <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	e001      	b.n	80001ec <getIndex+0x4c>
			break;
 80001e8:	bf00      	nop
	}
	return 0;
 80001ea:	2300      	movs	r3, #0
}
 80001ec:	4618      	mov	r0, r3
 80001ee:	3708      	adds	r7, #8
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	40011000 	.word	0x40011000
 80001f8:	40010800 	.word	0x40010800

080001fc <getKeyInput>:

void getKeyInput() {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 8000202:	2300      	movs	r3, #0
 8000204:	607b      	str	r3, [r7, #4]
 8000206:	e06d      	b.n	80002e4 <getKeyInput+0xe8>
		KeyReg0[i] = KeyReg1[i];
 8000208:	4a3a      	ldr	r2, [pc, #232]	; (80002f4 <getKeyInput+0xf8>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000210:	4939      	ldr	r1, [pc, #228]	; (80002f8 <getKeyInput+0xfc>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000218:	4a38      	ldr	r2, [pc, #224]	; (80002fc <getKeyInput+0x100>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	4934      	ldr	r1, [pc, #208]	; (80002f4 <getKeyInput+0xf8>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		KeyReg2[i] = getIndex(i) ;
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f7ff ffb9 	bl	80001a0 <getIndex>
 800022e:	4602      	mov	r2, r0
 8000230:	4932      	ldr	r1, [pc, #200]	; (80002fc <getKeyInput+0x100>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 8000238:	4a2f      	ldr	r2, [pc, #188]	; (80002f8 <getKeyInput+0xfc>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000240:	492c      	ldr	r1, [pc, #176]	; (80002f4 <getKeyInput+0xf8>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000248:	429a      	cmp	r2, r3
 800024a:	d148      	bne.n	80002de <getKeyInput+0xe2>
 800024c:	4a29      	ldr	r2, [pc, #164]	; (80002f4 <getKeyInput+0xf8>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000254:	4929      	ldr	r1, [pc, #164]	; (80002fc <getKeyInput+0x100>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800025c:	429a      	cmp	r2, r3
 800025e:	d13e      	bne.n	80002de <getKeyInput+0xe2>
			//case short pressed
			if (KeyReg3[i] != KeyReg2[i]) {
 8000260:	4a27      	ldr	r2, [pc, #156]	; (8000300 <getKeyInput+0x104>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000268:	4924      	ldr	r1, [pc, #144]	; (80002fc <getKeyInput+0x100>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000270:	429a      	cmp	r2, r3
 8000272:	d01b      	beq.n	80002ac <getKeyInput+0xb0>
				KeyReg3[i] = KeyReg2[i];
 8000274:	4a21      	ldr	r2, [pc, #132]	; (80002fc <getKeyInput+0x100>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800027c:	4920      	ldr	r1, [pc, #128]	; (8000300 <getKeyInput+0x104>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESS_STATE) {
 8000284:	4a1d      	ldr	r2, [pc, #116]	; (80002fc <getKeyInput+0x100>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d126      	bne.n	80002de <getKeyInput+0xe2>
					//todo
					subKeyProcess(i);
 8000290:	6878      	ldr	r0, [r7, #4]
 8000292:	f7ff ff75 	bl	8000180 <subKeyProcess>
					HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000296:	2120      	movs	r1, #32
 8000298:	481a      	ldr	r0, [pc, #104]	; (8000304 <getKeyInput+0x108>)
 800029a:	f001 fdf6 	bl	8001e8a <HAL_GPIO_TogglePin>
					TimerForKeyPress[i] = 300;
 800029e:	4a1a      	ldr	r2, [pc, #104]	; (8000308 <getKeyInput+0x10c>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80002a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002aa:	e018      	b.n	80002de <getKeyInput+0xe2>

				}
			} else { // case long pressed
				TimerForKeyPress[i]--;
 80002ac:	4a16      	ldr	r2, [pc, #88]	; (8000308 <getKeyInput+0x10c>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b4:	1e5a      	subs	r2, r3, #1
 80002b6:	4914      	ldr	r1, [pc, #80]	; (8000308 <getKeyInput+0x10c>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimerForKeyPress[i] == 0) {
 80002be:	4a12      	ldr	r2, [pc, #72]	; (8000308 <getKeyInput+0x10c>)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d109      	bne.n	80002de <getKeyInput+0xe2>
					//todo
					button_long_flag[i] = 1;
 80002ca:	4a10      	ldr	r2, [pc, #64]	; (800030c <getKeyInput+0x110>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2101      	movs	r1, #1
 80002d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					KeyReg3[i] = NORMAL_STATE;
 80002d4:	4a0a      	ldr	r2, [pc, #40]	; (8000300 <getKeyInput+0x104>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2101      	movs	r1, #1
 80002da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 3; i++) {
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	3301      	adds	r3, #1
 80002e2:	607b      	str	r3, [r7, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2b02      	cmp	r3, #2
 80002e8:	dd8e      	ble.n	8000208 <getKeyInput+0xc>
				}
			}
		}
	}
}
 80002ea:	bf00      	nop
 80002ec:	bf00      	nop
 80002ee:	3708      	adds	r7, #8
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	2000000c 	.word	0x2000000c
 80002f8:	20000000 	.word	0x20000000
 80002fc:	20000018 	.word	0x20000018
 8000300:	20000024 	.word	0x20000024
 8000304:	40010800 	.word	0x40010800
 8000308:	20000030 	.word	0x20000030
 800030c:	20000114 	.word	0x20000114

08000310 <clearStatus_A>:

int status_RED_B = 0;
int status_GREEN_B = 1;
int status_YELLOW_B = 0;

void clearStatus_A(){
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	status_RED_A = 0;
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <clearStatus_A+0x20>)
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
	status_GREEN_A = 0;
 800031a:	4b06      	ldr	r3, [pc, #24]	; (8000334 <clearStatus_A+0x24>)
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
	status_YELLOW_A = 0;
 8000320:	4b05      	ldr	r3, [pc, #20]	; (8000338 <clearStatus_A+0x28>)
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
}
 8000326:	bf00      	nop
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	2000003c 	.word	0x2000003c
 8000334:	200000e4 	.word	0x200000e4
 8000338:	200000e8 	.word	0x200000e8

0800033c <clearStatus_B>:
void clearStatus_B(){
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
	status_RED_B = 0;
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <clearStatus_B+0x20>)
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
	status_GREEN_B = 0;
 8000346:	4b06      	ldr	r3, [pc, #24]	; (8000360 <clearStatus_B+0x24>)
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
	status_YELLOW_B = 0;
 800034c:	4b05      	ldr	r3, [pc, #20]	; (8000364 <clearStatus_B+0x28>)
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
}
 8000352:	bf00      	nop
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	200000ec 	.word	0x200000ec
 8000360:	20000040 	.word	0x20000040
 8000364:	200000f0 	.word	0x200000f0

08000368 <clearStatus>:

void clearStatus(){
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
	status_RED_A = 0;
 800036c:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <clearStatus+0x30>)
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
	status_GREEN_A = 0;
 8000372:	4b0a      	ldr	r3, [pc, #40]	; (800039c <clearStatus+0x34>)
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
	status_YELLOW_A = 0;
 8000378:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <clearStatus+0x38>)
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
	status_RED_B = 0;
 800037e:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <clearStatus+0x3c>)
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
	status_GREEN_B = 0;
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <clearStatus+0x40>)
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
	status_YELLOW_B = 0;
 800038a:	4b08      	ldr	r3, [pc, #32]	; (80003ac <clearStatus+0x44>)
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr
 8000398:	2000003c 	.word	0x2000003c
 800039c:	200000e4 	.word	0x200000e4
 80003a0:	200000e8 	.word	0x200000e8
 80003a4:	200000ec 	.word	0x200000ec
 80003a8:	20000040 	.word	0x20000040
 80003ac:	200000f0 	.word	0x200000f0

080003b0 <displayTraffic>:

void displayTraffic() {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	//group a
	if (status_RED_A == 1) {
 80003b4:	4b2d      	ldr	r3, [pc, #180]	; (800046c <displayTraffic+0xbc>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d109      	bne.n	80003d0 <displayTraffic+0x20>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	2108      	movs	r1, #8
 80003c0:	482b      	ldr	r0, [pc, #172]	; (8000470 <displayTraffic+0xc0>)
 80003c2:	f001 fd4a 	bl	8001e5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80003c6:	2201      	movs	r2, #1
 80003c8:	2120      	movs	r1, #32
 80003ca:	4829      	ldr	r0, [pc, #164]	; (8000470 <displayTraffic+0xc0>)
 80003cc:	f001 fd45 	bl	8001e5a <HAL_GPIO_WritePin>
	}
	if (status_YELLOW_A == 1) {
 80003d0:	4b28      	ldr	r3, [pc, #160]	; (8000474 <displayTraffic+0xc4>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d109      	bne.n	80003ec <displayTraffic+0x3c>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	2108      	movs	r1, #8
 80003dc:	4824      	ldr	r0, [pc, #144]	; (8000470 <displayTraffic+0xc0>)
 80003de:	f001 fd3c 	bl	8001e5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80003e2:	2201      	movs	r2, #1
 80003e4:	2120      	movs	r1, #32
 80003e6:	4822      	ldr	r0, [pc, #136]	; (8000470 <displayTraffic+0xc0>)
 80003e8:	f001 fd37 	bl	8001e5a <HAL_GPIO_WritePin>
	}
	if (status_GREEN_A == 1) {
 80003ec:	4b22      	ldr	r3, [pc, #136]	; (8000478 <displayTraffic+0xc8>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d109      	bne.n	8000408 <displayTraffic+0x58>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80003f4:	2201      	movs	r2, #1
 80003f6:	2108      	movs	r1, #8
 80003f8:	481d      	ldr	r0, [pc, #116]	; (8000470 <displayTraffic+0xc0>)
 80003fa:	f001 fd2e 	bl	8001e5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2120      	movs	r1, #32
 8000402:	481b      	ldr	r0, [pc, #108]	; (8000470 <displayTraffic+0xc0>)
 8000404:	f001 fd29 	bl	8001e5a <HAL_GPIO_WritePin>
	}
	//group b
	if (status_RED_B == 1) {
 8000408:	4b1c      	ldr	r3, [pc, #112]	; (800047c <displayTraffic+0xcc>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2b01      	cmp	r3, #1
 800040e:	d10b      	bne.n	8000428 <displayTraffic+0x78>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000410:	2201      	movs	r2, #1
 8000412:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000416:	481a      	ldr	r0, [pc, #104]	; (8000480 <displayTraffic+0xd0>)
 8000418:	f001 fd1f 	bl	8001e5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, SET);
 800041c:	2201      	movs	r2, #1
 800041e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000422:	4817      	ldr	r0, [pc, #92]	; (8000480 <displayTraffic+0xd0>)
 8000424:	f001 fd19 	bl	8001e5a <HAL_GPIO_WritePin>
	}
	if (status_YELLOW_B == 1) {
 8000428:	4b16      	ldr	r3, [pc, #88]	; (8000484 <displayTraffic+0xd4>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	2b01      	cmp	r3, #1
 800042e:	d10b      	bne.n	8000448 <displayTraffic+0x98>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000436:	4812      	ldr	r0, [pc, #72]	; (8000480 <displayTraffic+0xd0>)
 8000438:	f001 fd0f 	bl	8001e5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, SET);
 800043c:	2201      	movs	r2, #1
 800043e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000442:	480f      	ldr	r0, [pc, #60]	; (8000480 <displayTraffic+0xd0>)
 8000444:	f001 fd09 	bl	8001e5a <HAL_GPIO_WritePin>
	}
	if (status_GREEN_B == 1) {
 8000448:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <displayTraffic+0xd8>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2b01      	cmp	r3, #1
 800044e:	d10b      	bne.n	8000468 <displayTraffic+0xb8>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000450:	2201      	movs	r2, #1
 8000452:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000456:	480a      	ldr	r0, [pc, #40]	; (8000480 <displayTraffic+0xd0>)
 8000458:	f001 fcff 	bl	8001e5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000462:	4807      	ldr	r0, [pc, #28]	; (8000480 <displayTraffic+0xd0>)
 8000464:	f001 fcf9 	bl	8001e5a <HAL_GPIO_WritePin>
	}
}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	2000003c 	.word	0x2000003c
 8000470:	40010c00 	.word	0x40010c00
 8000474:	200000e8 	.word	0x200000e8
 8000478:	200000e4 	.word	0x200000e4
 800047c:	200000ec 	.word	0x200000ec
 8000480:	40010800 	.word	0x40010800
 8000484:	200000f0 	.word	0x200000f0
 8000488:	20000040 	.word	0x20000040

0800048c <statusModeTraffic>:

void statusModeTraffic(){
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	clearStatus();
 8000490:	f7ff ff6a 	bl	8000368 <clearStatus>
	if(statusMode == MODE2){
 8000494:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <statusModeTraffic+0x48>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b02      	cmp	r3, #2
 800049a:	d105      	bne.n	80004a8 <statusModeTraffic+0x1c>
		status_RED_A=1;
 800049c:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <statusModeTraffic+0x4c>)
 800049e:	2201      	movs	r2, #1
 80004a0:	601a      	str	r2, [r3, #0]
		status_RED_B=1;
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <statusModeTraffic+0x50>)
 80004a4:	2201      	movs	r2, #1
 80004a6:	601a      	str	r2, [r3, #0]
	}
	if(statusMode == MODE3){
 80004a8:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <statusModeTraffic+0x48>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b03      	cmp	r3, #3
 80004ae:	d105      	bne.n	80004bc <statusModeTraffic+0x30>
		status_GREEN_A=1;
 80004b0:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <statusModeTraffic+0x54>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	601a      	str	r2, [r3, #0]
		status_GREEN_B=1;
 80004b6:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <statusModeTraffic+0x58>)
 80004b8:	2201      	movs	r2, #1
 80004ba:	601a      	str	r2, [r3, #0]
	}
	if(statusMode == MODE4){
 80004bc:	4b05      	ldr	r3, [pc, #20]	; (80004d4 <statusModeTraffic+0x48>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2b04      	cmp	r3, #4
 80004c2:	d105      	bne.n	80004d0 <statusModeTraffic+0x44>
		status_YELLOW_A=1;
 80004c4:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <statusModeTraffic+0x5c>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	601a      	str	r2, [r3, #0]
		status_YELLOW_B=1;
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <statusModeTraffic+0x60>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	601a      	str	r2, [r3, #0]
	}
}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	200000f8 	.word	0x200000f8
 80004d8:	2000003c 	.word	0x2000003c
 80004dc:	200000ec 	.word	0x200000ec
 80004e0:	200000e4 	.word	0x200000e4
 80004e4:	20000040 	.word	0x20000040
 80004e8:	200000e8 	.word	0x200000e8
 80004ec:	200000f0 	.word	0x200000f0

080004f0 <statusManTraffic>:

void statusManTraffic(){
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
		switch (status_manual) {
 80004f4:	4b30      	ldr	r3, [pc, #192]	; (80005b8 <statusManTraffic+0xc8>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	3b15      	subs	r3, #21
 80004fa:	2b03      	cmp	r3, #3
 80004fc:	d856      	bhi.n	80005ac <statusManTraffic+0xbc>
 80004fe:	a201      	add	r2, pc, #4	; (adr r2, 8000504 <statusManTraffic+0x14>)
 8000500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000504:	08000515 	.word	0x08000515
 8000508:	0800053b 	.word	0x0800053b
 800050c:	08000561 	.word	0x08000561
 8000510:	08000587 	.word	0x08000587
			case RED_GREEN:
				status_RED_A =1;
 8000514:	4b29      	ldr	r3, [pc, #164]	; (80005bc <statusManTraffic+0xcc>)
 8000516:	2201      	movs	r2, #1
 8000518:	601a      	str	r2, [r3, #0]
				status_GREEN_A=0;
 800051a:	4b29      	ldr	r3, [pc, #164]	; (80005c0 <statusManTraffic+0xd0>)
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
				status_YELLOW_A=0;
 8000520:	4b28      	ldr	r3, [pc, #160]	; (80005c4 <statusManTraffic+0xd4>)
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
				status_RED_B=0;
 8000526:	4b28      	ldr	r3, [pc, #160]	; (80005c8 <statusManTraffic+0xd8>)
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
				status_GREEN_B = 1;
 800052c:	4b27      	ldr	r3, [pc, #156]	; (80005cc <statusManTraffic+0xdc>)
 800052e:	2201      	movs	r2, #1
 8000530:	601a      	str	r2, [r3, #0]
				status_YELLOW_B=0;
 8000532:	4b27      	ldr	r3, [pc, #156]	; (80005d0 <statusManTraffic+0xe0>)
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
				break;
 8000538:	e039      	b.n	80005ae <statusManTraffic+0xbe>
			case RED_YELLOW:
				status_RED_A =1;
 800053a:	4b20      	ldr	r3, [pc, #128]	; (80005bc <statusManTraffic+0xcc>)
 800053c:	2201      	movs	r2, #1
 800053e:	601a      	str	r2, [r3, #0]
				status_GREEN_A=0;
 8000540:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <statusManTraffic+0xd0>)
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
				status_YELLOW_A=0;
 8000546:	4b1f      	ldr	r3, [pc, #124]	; (80005c4 <statusManTraffic+0xd4>)
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
				status_RED_B=0;
 800054c:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <statusManTraffic+0xd8>)
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
				status_GREEN_B = 0;
 8000552:	4b1e      	ldr	r3, [pc, #120]	; (80005cc <statusManTraffic+0xdc>)
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
				status_YELLOW_B=1;
 8000558:	4b1d      	ldr	r3, [pc, #116]	; (80005d0 <statusManTraffic+0xe0>)
 800055a:	2201      	movs	r2, #1
 800055c:	601a      	str	r2, [r3, #0]
				break;
 800055e:	e026      	b.n	80005ae <statusManTraffic+0xbe>
			case GREEN_RED:
				status_RED_A =0;
 8000560:	4b16      	ldr	r3, [pc, #88]	; (80005bc <statusManTraffic+0xcc>)
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
				status_GREEN_A=1;
 8000566:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <statusManTraffic+0xd0>)
 8000568:	2201      	movs	r2, #1
 800056a:	601a      	str	r2, [r3, #0]
				status_YELLOW_A=0;
 800056c:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <statusManTraffic+0xd4>)
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
				status_RED_B=1;
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <statusManTraffic+0xd8>)
 8000574:	2201      	movs	r2, #1
 8000576:	601a      	str	r2, [r3, #0]
				status_GREEN_B =0;
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <statusManTraffic+0xdc>)
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
				status_YELLOW_B=0;
 800057e:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <statusManTraffic+0xe0>)
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
				break;
 8000584:	e013      	b.n	80005ae <statusManTraffic+0xbe>
			case YELLOW_RED:
				status_RED_A =0;
 8000586:	4b0d      	ldr	r3, [pc, #52]	; (80005bc <statusManTraffic+0xcc>)
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
				status_GREEN_A=0;
 800058c:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <statusManTraffic+0xd0>)
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
				status_YELLOW_A=1;
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <statusManTraffic+0xd4>)
 8000594:	2201      	movs	r2, #1
 8000596:	601a      	str	r2, [r3, #0]
				status_RED_B=1;
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <statusManTraffic+0xd8>)
 800059a:	2201      	movs	r2, #1
 800059c:	601a      	str	r2, [r3, #0]
				status_GREEN_B = 0;
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <statusManTraffic+0xdc>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
				status_YELLOW_B=0;
 80005a4:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <statusManTraffic+0xe0>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
				break;
 80005aa:	e000      	b.n	80005ae <statusManTraffic+0xbe>
			default:
				break;
 80005ac:	bf00      	nop
		}
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000120 	.word	0x20000120
 80005bc:	2000003c 	.word	0x2000003c
 80005c0:	200000e4 	.word	0x200000e4
 80005c4:	200000e8 	.word	0x200000e8
 80005c8:	200000ec 	.word	0x200000ec
 80005cc:	20000040 	.word	0x20000040
 80005d0:	200000f0 	.word	0x200000f0

080005d4 <statusTraffic_A>:

void statusTraffic_A(){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	clearStatus_A();
 80005d8:	f7ff fe9a 	bl	8000310 <clearStatus_A>
	if(status_A == AUTO_RED){
 80005dc:	4b0b      	ldr	r3, [pc, #44]	; (800060c <statusTraffic_A+0x38>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b0b      	cmp	r3, #11
 80005e2:	d102      	bne.n	80005ea <statusTraffic_A+0x16>
		status_RED_A=1;
 80005e4:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <statusTraffic_A+0x3c>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	601a      	str	r2, [r3, #0]
	}
	if(status_A == AUTO_GREEN){
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <statusTraffic_A+0x38>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b0c      	cmp	r3, #12
 80005f0:	d102      	bne.n	80005f8 <statusTraffic_A+0x24>
		status_GREEN_A=1;
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <statusTraffic_A+0x40>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	601a      	str	r2, [r3, #0]
	}
	if(status_A == AUTO_YELLOW){
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <statusTraffic_A+0x38>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b0d      	cmp	r3, #13
 80005fe:	d102      	bne.n	8000606 <statusTraffic_A+0x32>
		status_YELLOW_A=1;
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <statusTraffic_A+0x44>)
 8000602:	2201      	movs	r2, #1
 8000604:	601a      	str	r2, [r3, #0]
	}
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000044 	.word	0x20000044
 8000610:	2000003c 	.word	0x2000003c
 8000614:	200000e4 	.word	0x200000e4
 8000618:	200000e8 	.word	0x200000e8

0800061c <statusTraffic_B>:

void statusTraffic_B(){
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	clearStatus_B();
 8000620:	f7ff fe8c 	bl	800033c <clearStatus_B>
	if(status_B == AUTO_RED){
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <statusTraffic_B+0x38>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b0b      	cmp	r3, #11
 800062a:	d102      	bne.n	8000632 <statusTraffic_B+0x16>
		status_RED_B=1;
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <statusTraffic_B+0x3c>)
 800062e:	2201      	movs	r2, #1
 8000630:	601a      	str	r2, [r3, #0]
	}
	if(status_B == AUTO_GREEN){
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <statusTraffic_B+0x38>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2b0c      	cmp	r3, #12
 8000638:	d102      	bne.n	8000640 <statusTraffic_B+0x24>
		status_GREEN_B=1;
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <statusTraffic_B+0x40>)
 800063c:	2201      	movs	r2, #1
 800063e:	601a      	str	r2, [r3, #0]
	}
	if(status_B == AUTO_YELLOW){
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <statusTraffic_B+0x38>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b0d      	cmp	r3, #13
 8000646:	d102      	bne.n	800064e <statusTraffic_B+0x32>
		status_YELLOW_B=1;
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <statusTraffic_B+0x44>)
 800064a:	2201      	movs	r2, #1
 800064c:	601a      	str	r2, [r3, #0]
	}
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000048 	.word	0x20000048
 8000658:	200000ec 	.word	0x200000ec
 800065c:	20000040 	.word	0x20000040
 8000660:	200000f0 	.word	0x200000f0

08000664 <fsm_automatic_run>:
int status_B = 10;

int count_Down_A;
int count_Down_B;

void fsm_automatic_run() {
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	fsm_automatic_run_A();
 8000668:	f000 f804 	bl	8000674 <fsm_automatic_run_A>
	fsm_automatic_run_B();
 800066c:	f000 f88a 	bl	8000784 <fsm_automatic_run_B>
}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}

08000674 <fsm_automatic_run_A>:

void fsm_automatic_run_A() {
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	switch (status_A) {
 8000678:	4b3c      	ldr	r3, [pc, #240]	; (800076c <fsm_automatic_run_A+0xf8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	3b0a      	subs	r3, #10
 800067e:	2b03      	cmp	r3, #3
 8000680:	d871      	bhi.n	8000766 <fsm_automatic_run_A+0xf2>
 8000682:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <fsm_automatic_run_A+0x14>)
 8000684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000688:	08000699 	.word	0x08000699
 800068c:	080006b3 	.word	0x080006b3
 8000690:	080006ef 	.word	0x080006ef
 8000694:	0800072b 	.word	0x0800072b
	case AUTO:
		status_A = AUTO_RED;
 8000698:	4b34      	ldr	r3, [pc, #208]	; (800076c <fsm_automatic_run_A+0xf8>)
 800069a:	220b      	movs	r2, #11
 800069c:	601a      	str	r2, [r3, #0]
		count_Down_A = RED_timer;
 800069e:	4b34      	ldr	r3, [pc, #208]	; (8000770 <fsm_automatic_run_A+0xfc>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a34      	ldr	r2, [pc, #208]	; (8000774 <fsm_automatic_run_A+0x100>)
 80006a4:	6013      	str	r3, [r2, #0]
		setTimer(0, 1000);
 80006a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006aa:	2000      	movs	r0, #0
 80006ac:	f000 fed6 	bl	800145c <setTimer>
		break;
 80006b0:	e05a      	b.n	8000768 <fsm_automatic_run_A+0xf4>
	case AUTO_RED:
		statusTraffic_A();
 80006b2:	f7ff ff8f 	bl	80005d4 <statusTraffic_A>
		if (count_Down_A <= 0) {
 80006b6:	4b2f      	ldr	r3, [pc, #188]	; (8000774 <fsm_automatic_run_A+0x100>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	dc06      	bgt.n	80006cc <fsm_automatic_run_A+0x58>
			status_A = AUTO_GREEN;
 80006be:	4b2b      	ldr	r3, [pc, #172]	; (800076c <fsm_automatic_run_A+0xf8>)
 80006c0:	220c      	movs	r2, #12
 80006c2:	601a      	str	r2, [r3, #0]
			count_Down_A = GREEN_timer;
 80006c4:	4b2c      	ldr	r3, [pc, #176]	; (8000778 <fsm_automatic_run_A+0x104>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a2a      	ldr	r2, [pc, #168]	; (8000774 <fsm_automatic_run_A+0x100>)
 80006ca:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[0] == 1){
 80006cc:	4b2b      	ldr	r3, [pc, #172]	; (800077c <fsm_automatic_run_A+0x108>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d109      	bne.n	80006e8 <fsm_automatic_run_A+0x74>
			count_Down_A--;
 80006d4:	4b27      	ldr	r3, [pc, #156]	; (8000774 <fsm_automatic_run_A+0x100>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	3b01      	subs	r3, #1
 80006da:	4a26      	ldr	r2, [pc, #152]	; (8000774 <fsm_automatic_run_A+0x100>)
 80006dc:	6013      	str	r3, [r2, #0]
			setTimer(0, 1000);
 80006de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006e2:	2000      	movs	r0, #0
 80006e4:	f000 feba 	bl	800145c <setTimer>
		}
		displayTraffic();
 80006e8:	f7ff fe62 	bl	80003b0 <displayTraffic>
		break;
 80006ec:	e03c      	b.n	8000768 <fsm_automatic_run_A+0xf4>
	case AUTO_GREEN:
		statusTraffic_A();
 80006ee:	f7ff ff71 	bl	80005d4 <statusTraffic_A>
		if (count_Down_A <= 0) {
 80006f2:	4b20      	ldr	r3, [pc, #128]	; (8000774 <fsm_automatic_run_A+0x100>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	dc06      	bgt.n	8000708 <fsm_automatic_run_A+0x94>
			status_A = AUTO_YELLOW;
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <fsm_automatic_run_A+0xf8>)
 80006fc:	220d      	movs	r2, #13
 80006fe:	601a      	str	r2, [r3, #0]
			count_Down_A = YELLOW_timer;
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <fsm_automatic_run_A+0x10c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a1b      	ldr	r2, [pc, #108]	; (8000774 <fsm_automatic_run_A+0x100>)
 8000706:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[0] == 1){
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <fsm_automatic_run_A+0x108>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d109      	bne.n	8000724 <fsm_automatic_run_A+0xb0>
			count_Down_A--;
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <fsm_automatic_run_A+0x100>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	3b01      	subs	r3, #1
 8000716:	4a17      	ldr	r2, [pc, #92]	; (8000774 <fsm_automatic_run_A+0x100>)
 8000718:	6013      	str	r3, [r2, #0]
			setTimer(0, 1000);
 800071a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800071e:	2000      	movs	r0, #0
 8000720:	f000 fe9c 	bl	800145c <setTimer>
		}
		displayTraffic();
 8000724:	f7ff fe44 	bl	80003b0 <displayTraffic>

		break;
 8000728:	e01e      	b.n	8000768 <fsm_automatic_run_A+0xf4>
	case AUTO_YELLOW:
		statusTraffic_A();
 800072a:	f7ff ff53 	bl	80005d4 <statusTraffic_A>
		if (count_Down_A <= 0) {
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <fsm_automatic_run_A+0x100>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	dc06      	bgt.n	8000744 <fsm_automatic_run_A+0xd0>
			status_A = AUTO_RED;
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <fsm_automatic_run_A+0xf8>)
 8000738:	220b      	movs	r2, #11
 800073a:	601a      	str	r2, [r3, #0]
			count_Down_A = RED_timer;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <fsm_automatic_run_A+0xfc>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a0c      	ldr	r2, [pc, #48]	; (8000774 <fsm_automatic_run_A+0x100>)
 8000742:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[0]==1){
 8000744:	4b0d      	ldr	r3, [pc, #52]	; (800077c <fsm_automatic_run_A+0x108>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d109      	bne.n	8000760 <fsm_automatic_run_A+0xec>
			count_Down_A--;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <fsm_automatic_run_A+0x100>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	3b01      	subs	r3, #1
 8000752:	4a08      	ldr	r2, [pc, #32]	; (8000774 <fsm_automatic_run_A+0x100>)
 8000754:	6013      	str	r3, [r2, #0]
			setTimer(0, 1000);
 8000756:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800075a:	2000      	movs	r0, #0
 800075c:	f000 fe7e 	bl	800145c <setTimer>
		}
		displayTraffic();
 8000760:	f7ff fe26 	bl	80003b0 <displayTraffic>

		break;
 8000764:	e000      	b.n	8000768 <fsm_automatic_run_A+0xf4>
	default:
		break;
 8000766:	bf00      	nop
	}
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000044 	.word	0x20000044
 8000770:	2000004c 	.word	0x2000004c
 8000774:	20000124 	.word	0x20000124
 8000778:	20000050 	.word	0x20000050
 800077c:	20000238 	.word	0x20000238
 8000780:	20000054 	.word	0x20000054

08000784 <fsm_automatic_run_B>:

void fsm_automatic_run_B() {
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	switch (status_B) {
 8000788:	4b3c      	ldr	r3, [pc, #240]	; (800087c <fsm_automatic_run_B+0xf8>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	3b0a      	subs	r3, #10
 800078e:	2b03      	cmp	r3, #3
 8000790:	d871      	bhi.n	8000876 <fsm_automatic_run_B+0xf2>
 8000792:	a201      	add	r2, pc, #4	; (adr r2, 8000798 <fsm_automatic_run_B+0x14>)
 8000794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000798:	080007a9 	.word	0x080007a9
 800079c:	080007c3 	.word	0x080007c3
 80007a0:	080007ff 	.word	0x080007ff
 80007a4:	0800083b 	.word	0x0800083b
	case AUTO:
		status_B = AUTO_GREEN;
 80007a8:	4b34      	ldr	r3, [pc, #208]	; (800087c <fsm_automatic_run_B+0xf8>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	601a      	str	r2, [r3, #0]
		count_Down_B = GREEN_timer;
 80007ae:	4b34      	ldr	r3, [pc, #208]	; (8000880 <fsm_automatic_run_B+0xfc>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a34      	ldr	r2, [pc, #208]	; (8000884 <fsm_automatic_run_B+0x100>)
 80007b4:	6013      	str	r3, [r2, #0]
		setTimer(1, 1000);
 80007b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007ba:	2001      	movs	r0, #1
 80007bc:	f000 fe4e 	bl	800145c <setTimer>
		break;
 80007c0:	e05a      	b.n	8000878 <fsm_automatic_run_B+0xf4>
	case AUTO_RED:
		statusTraffic_B();
 80007c2:	f7ff ff2b 	bl	800061c <statusTraffic_B>
		if (count_Down_B <= 0) {
 80007c6:	4b2f      	ldr	r3, [pc, #188]	; (8000884 <fsm_automatic_run_B+0x100>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	dc06      	bgt.n	80007dc <fsm_automatic_run_B+0x58>
			status_B = AUTO_GREEN;
 80007ce:	4b2b      	ldr	r3, [pc, #172]	; (800087c <fsm_automatic_run_B+0xf8>)
 80007d0:	220c      	movs	r2, #12
 80007d2:	601a      	str	r2, [r3, #0]
			count_Down_B = GREEN_timer;
 80007d4:	4b2a      	ldr	r3, [pc, #168]	; (8000880 <fsm_automatic_run_B+0xfc>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a2a      	ldr	r2, [pc, #168]	; (8000884 <fsm_automatic_run_B+0x100>)
 80007da:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[1] == 1){
 80007dc:	4b2a      	ldr	r3, [pc, #168]	; (8000888 <fsm_automatic_run_B+0x104>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d109      	bne.n	80007f8 <fsm_automatic_run_B+0x74>
			count_Down_B--;
 80007e4:	4b27      	ldr	r3, [pc, #156]	; (8000884 <fsm_automatic_run_B+0x100>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	3b01      	subs	r3, #1
 80007ea:	4a26      	ldr	r2, [pc, #152]	; (8000884 <fsm_automatic_run_B+0x100>)
 80007ec:	6013      	str	r3, [r2, #0]
			setTimer(1, 1000);
 80007ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007f2:	2001      	movs	r0, #1
 80007f4:	f000 fe32 	bl	800145c <setTimer>
		}
		displayTraffic();
 80007f8:	f7ff fdda 	bl	80003b0 <displayTraffic>
		break;
 80007fc:	e03c      	b.n	8000878 <fsm_automatic_run_B+0xf4>
	case AUTO_GREEN:
		statusTraffic_B();
 80007fe:	f7ff ff0d 	bl	800061c <statusTraffic_B>
		if (count_Down_B <= 0) {
 8000802:	4b20      	ldr	r3, [pc, #128]	; (8000884 <fsm_automatic_run_B+0x100>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	dc06      	bgt.n	8000818 <fsm_automatic_run_B+0x94>
			status_B = AUTO_YELLOW;
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <fsm_automatic_run_B+0xf8>)
 800080c:	220d      	movs	r2, #13
 800080e:	601a      	str	r2, [r3, #0]
			count_Down_B = YELLOW_timer;
 8000810:	4b1e      	ldr	r3, [pc, #120]	; (800088c <fsm_automatic_run_B+0x108>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a1b      	ldr	r2, [pc, #108]	; (8000884 <fsm_automatic_run_B+0x100>)
 8000816:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[1] == 1){
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <fsm_automatic_run_B+0x104>)
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d109      	bne.n	8000834 <fsm_automatic_run_B+0xb0>
			count_Down_B--;
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <fsm_automatic_run_B+0x100>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	3b01      	subs	r3, #1
 8000826:	4a17      	ldr	r2, [pc, #92]	; (8000884 <fsm_automatic_run_B+0x100>)
 8000828:	6013      	str	r3, [r2, #0]
			setTimer(1, 1000);
 800082a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800082e:	2001      	movs	r0, #1
 8000830:	f000 fe14 	bl	800145c <setTimer>
		}
		displayTraffic();
 8000834:	f7ff fdbc 	bl	80003b0 <displayTraffic>

		break;
 8000838:	e01e      	b.n	8000878 <fsm_automatic_run_B+0xf4>
	case AUTO_YELLOW:
		statusTraffic_B();
 800083a:	f7ff feef 	bl	800061c <statusTraffic_B>
		if (count_Down_B <= 0) {
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <fsm_automatic_run_B+0x100>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	dc06      	bgt.n	8000854 <fsm_automatic_run_B+0xd0>
			status_B = AUTO_RED;
 8000846:	4b0d      	ldr	r3, [pc, #52]	; (800087c <fsm_automatic_run_B+0xf8>)
 8000848:	220b      	movs	r2, #11
 800084a:	601a      	str	r2, [r3, #0]
			count_Down_B = RED_timer;
 800084c:	4b10      	ldr	r3, [pc, #64]	; (8000890 <fsm_automatic_run_B+0x10c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a0c      	ldr	r2, [pc, #48]	; (8000884 <fsm_automatic_run_B+0x100>)
 8000852:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[1]==1){
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <fsm_automatic_run_B+0x104>)
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	2b01      	cmp	r3, #1
 800085a:	d109      	bne.n	8000870 <fsm_automatic_run_B+0xec>
			count_Down_B--;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <fsm_automatic_run_B+0x100>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	3b01      	subs	r3, #1
 8000862:	4a08      	ldr	r2, [pc, #32]	; (8000884 <fsm_automatic_run_B+0x100>)
 8000864:	6013      	str	r3, [r2, #0]
			setTimer(1, 1000);
 8000866:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800086a:	2001      	movs	r0, #1
 800086c:	f000 fdf6 	bl	800145c <setTimer>
		}
		displayTraffic();
 8000870:	f7ff fd9e 	bl	80003b0 <displayTraffic>

		break;
 8000874:	e000      	b.n	8000878 <fsm_automatic_run_B+0xf4>
	default:
		break;
 8000876:	bf00      	nop
	}
}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000048 	.word	0x20000048
 8000880:	20000050 	.word	0x20000050
 8000884:	20000128 	.word	0x20000128
 8000888:	20000238 	.word	0x20000238
 800088c:	20000054 	.word	0x20000054
 8000890:	2000004c 	.word	0x2000004c

08000894 <fsm_lcd_run>:
 *      Author: Hy
 */

#include "fsm_lcd.h"

void fsm_lcd_run(){
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	switch(statusMode){
 8000898:	4b6a      	ldr	r3, [pc, #424]	; (8000a44 <fsm_lcd_run+0x1b0>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	3b01      	subs	r3, #1
 800089e:	2b03      	cmp	r3, #3
 80008a0:	f200 80cc 	bhi.w	8000a3c <fsm_lcd_run+0x1a8>
 80008a4:	a201      	add	r2, pc, #4	; (adr r2, 80008ac <fsm_lcd_run+0x18>)
 80008a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008aa:	bf00      	nop
 80008ac:	080008bd 	.word	0x080008bd
 80008b0:	080009a7 	.word	0x080009a7
 80008b4:	080009d9 	.word	0x080009d9
 80008b8:	08000a0b 	.word	0x08000a0b
	case MODE1:
		if(status_A == AUTO_RED){
 80008bc:	4b62      	ldr	r3, [pc, #392]	; (8000a48 <fsm_lcd_run+0x1b4>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2b0b      	cmp	r3, #11
 80008c2:	d10c      	bne.n	80008de <fsm_lcd_run+0x4a>
			lcd_goto_XY(1, 0);
 80008c4:	2100      	movs	r1, #0
 80008c6:	2001      	movs	r0, #1
 80008c8:	f000 fbec 	bl	80010a4 <lcd_goto_XY>
			lcd_send_string("RED A:");
 80008cc:	485f      	ldr	r0, [pc, #380]	; (8000a4c <fsm_lcd_run+0x1b8>)
 80008ce:	f000 fba9 	bl	8001024 <lcd_send_string>
			if(count_Down_A == 0 ) lcd_clear_display();
 80008d2:	4b5f      	ldr	r3, [pc, #380]	; (8000a50 <fsm_lcd_run+0x1bc>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d101      	bne.n	80008de <fsm_lcd_run+0x4a>
 80008da:	f000 fbb8 	bl	800104e <lcd_clear_display>
		}
		if(status_A == AUTO_GREEN){
 80008de:	4b5a      	ldr	r3, [pc, #360]	; (8000a48 <fsm_lcd_run+0x1b4>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b0c      	cmp	r3, #12
 80008e4:	d10c      	bne.n	8000900 <fsm_lcd_run+0x6c>
			lcd_goto_XY(1, 0);
 80008e6:	2100      	movs	r1, #0
 80008e8:	2001      	movs	r0, #1
 80008ea:	f000 fbdb 	bl	80010a4 <lcd_goto_XY>
			lcd_send_string("GREEN A:");
 80008ee:	4859      	ldr	r0, [pc, #356]	; (8000a54 <fsm_lcd_run+0x1c0>)
 80008f0:	f000 fb98 	bl	8001024 <lcd_send_string>
			if(count_Down_A == 0 ) lcd_clear_display();
 80008f4:	4b56      	ldr	r3, [pc, #344]	; (8000a50 <fsm_lcd_run+0x1bc>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d101      	bne.n	8000900 <fsm_lcd_run+0x6c>
 80008fc:	f000 fba7 	bl	800104e <lcd_clear_display>
		}
		if(status_A == AUTO_YELLOW){
 8000900:	4b51      	ldr	r3, [pc, #324]	; (8000a48 <fsm_lcd_run+0x1b4>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b0d      	cmp	r3, #13
 8000906:	d10c      	bne.n	8000922 <fsm_lcd_run+0x8e>
			lcd_goto_XY(1, 0);
 8000908:	2100      	movs	r1, #0
 800090a:	2001      	movs	r0, #1
 800090c:	f000 fbca 	bl	80010a4 <lcd_goto_XY>
			lcd_send_string("YELLOW A:");
 8000910:	4851      	ldr	r0, [pc, #324]	; (8000a58 <fsm_lcd_run+0x1c4>)
 8000912:	f000 fb87 	bl	8001024 <lcd_send_string>
			if(count_Down_A == 0 ) lcd_clear_display();
 8000916:	4b4e      	ldr	r3, [pc, #312]	; (8000a50 <fsm_lcd_run+0x1bc>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d101      	bne.n	8000922 <fsm_lcd_run+0x8e>
 800091e:	f000 fb96 	bl	800104e <lcd_clear_display>
		}
		if(status_B == AUTO_RED){
 8000922:	4b4e      	ldr	r3, [pc, #312]	; (8000a5c <fsm_lcd_run+0x1c8>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b0b      	cmp	r3, #11
 8000928:	d10c      	bne.n	8000944 <fsm_lcd_run+0xb0>
			lcd_goto_XY(2, 0);
 800092a:	2100      	movs	r1, #0
 800092c:	2002      	movs	r0, #2
 800092e:	f000 fbb9 	bl	80010a4 <lcd_goto_XY>
			lcd_send_string("RED B:");
 8000932:	484b      	ldr	r0, [pc, #300]	; (8000a60 <fsm_lcd_run+0x1cc>)
 8000934:	f000 fb76 	bl	8001024 <lcd_send_string>
			if(count_Down_B == 0 ) lcd_clear_display();
 8000938:	4b4a      	ldr	r3, [pc, #296]	; (8000a64 <fsm_lcd_run+0x1d0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d101      	bne.n	8000944 <fsm_lcd_run+0xb0>
 8000940:	f000 fb85 	bl	800104e <lcd_clear_display>
		}
		if(status_B == AUTO_GREEN){
 8000944:	4b45      	ldr	r3, [pc, #276]	; (8000a5c <fsm_lcd_run+0x1c8>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b0c      	cmp	r3, #12
 800094a:	d10c      	bne.n	8000966 <fsm_lcd_run+0xd2>
			lcd_goto_XY(2, 0);
 800094c:	2100      	movs	r1, #0
 800094e:	2002      	movs	r0, #2
 8000950:	f000 fba8 	bl	80010a4 <lcd_goto_XY>
			lcd_send_string("GREEN B:");
 8000954:	4844      	ldr	r0, [pc, #272]	; (8000a68 <fsm_lcd_run+0x1d4>)
 8000956:	f000 fb65 	bl	8001024 <lcd_send_string>
			if(count_Down_B == 0 ) lcd_clear_display();
 800095a:	4b42      	ldr	r3, [pc, #264]	; (8000a64 <fsm_lcd_run+0x1d0>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d101      	bne.n	8000966 <fsm_lcd_run+0xd2>
 8000962:	f000 fb74 	bl	800104e <lcd_clear_display>
		}
		if(status_B == AUTO_YELLOW){
 8000966:	4b3d      	ldr	r3, [pc, #244]	; (8000a5c <fsm_lcd_run+0x1c8>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b0d      	cmp	r3, #13
 800096c:	d10c      	bne.n	8000988 <fsm_lcd_run+0xf4>
			lcd_goto_XY(2, 0);
 800096e:	2100      	movs	r1, #0
 8000970:	2002      	movs	r0, #2
 8000972:	f000 fb97 	bl	80010a4 <lcd_goto_XY>
			lcd_send_string("YELLOW B:");
 8000976:	483d      	ldr	r0, [pc, #244]	; (8000a6c <fsm_lcd_run+0x1d8>)
 8000978:	f000 fb54 	bl	8001024 <lcd_send_string>
			if(count_Down_B == 0 ) lcd_clear_display();
 800097c:	4b39      	ldr	r3, [pc, #228]	; (8000a64 <fsm_lcd_run+0x1d0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d101      	bne.n	8000988 <fsm_lcd_run+0xf4>
 8000984:	f000 fb63 	bl	800104e <lcd_clear_display>
		}
		lcd_display_value(1, 10, count_Down_A);
 8000988:	4b31      	ldr	r3, [pc, #196]	; (8000a50 <fsm_lcd_run+0x1bc>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	461a      	mov	r2, r3
 800098e:	210a      	movs	r1, #10
 8000990:	2001      	movs	r0, #1
 8000992:	f000 fb63 	bl	800105c <lcd_display_value>
		lcd_display_value(2, 10, count_Down_B);
 8000996:	4b33      	ldr	r3, [pc, #204]	; (8000a64 <fsm_lcd_run+0x1d0>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	461a      	mov	r2, r3
 800099c:	210a      	movs	r1, #10
 800099e:	2002      	movs	r0, #2
 80009a0:	f000 fb5c 	bl	800105c <lcd_display_value>

		break;
 80009a4:	e04b      	b.n	8000a3e <fsm_lcd_run+0x1aa>
	case MODE2:
		lcd_goto_XY(1, 0);
 80009a6:	2100      	movs	r1, #0
 80009a8:	2001      	movs	r0, #1
 80009aa:	f000 fb7b 	bl	80010a4 <lcd_goto_XY>
		lcd_send_string("SET TIMER RED");
 80009ae:	4830      	ldr	r0, [pc, #192]	; (8000a70 <fsm_lcd_run+0x1dc>)
 80009b0:	f000 fb38 	bl	8001024 <lcd_send_string>
		lcd_goto_XY(2, 1);
 80009b4:	2101      	movs	r1, #1
 80009b6:	2002      	movs	r0, #2
 80009b8:	f000 fb74 	bl	80010a4 <lcd_goto_XY>
		lcd_send_string("DURATION:");
 80009bc:	482d      	ldr	r0, [pc, #180]	; (8000a74 <fsm_lcd_run+0x1e0>)
 80009be:	f000 fb31 	bl	8001024 <lcd_send_string>
		lcd_display_value(2, 10, RED_timer + temp);
 80009c2:	4b2d      	ldr	r3, [pc, #180]	; (8000a78 <fsm_lcd_run+0x1e4>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	4b2d      	ldr	r3, [pc, #180]	; (8000a7c <fsm_lcd_run+0x1e8>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4413      	add	r3, r2
 80009cc:	461a      	mov	r2, r3
 80009ce:	210a      	movs	r1, #10
 80009d0:	2002      	movs	r0, #2
 80009d2:	f000 fb43 	bl	800105c <lcd_display_value>
		break;
 80009d6:	e032      	b.n	8000a3e <fsm_lcd_run+0x1aa>
	case MODE3:
		lcd_goto_XY(1, 0);
 80009d8:	2100      	movs	r1, #0
 80009da:	2001      	movs	r0, #1
 80009dc:	f000 fb62 	bl	80010a4 <lcd_goto_XY>
		lcd_send_string("SET TIMER GREEN");
 80009e0:	4827      	ldr	r0, [pc, #156]	; (8000a80 <fsm_lcd_run+0x1ec>)
 80009e2:	f000 fb1f 	bl	8001024 <lcd_send_string>
		lcd_goto_XY(2, 1);
 80009e6:	2101      	movs	r1, #1
 80009e8:	2002      	movs	r0, #2
 80009ea:	f000 fb5b 	bl	80010a4 <lcd_goto_XY>
		lcd_send_string("DURATION:");
 80009ee:	4821      	ldr	r0, [pc, #132]	; (8000a74 <fsm_lcd_run+0x1e0>)
 80009f0:	f000 fb18 	bl	8001024 <lcd_send_string>
		lcd_display_value(2, 10, GREEN_timer + temp);
 80009f4:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <fsm_lcd_run+0x1f0>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <fsm_lcd_run+0x1e8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4413      	add	r3, r2
 80009fe:	461a      	mov	r2, r3
 8000a00:	210a      	movs	r1, #10
 8000a02:	2002      	movs	r0, #2
 8000a04:	f000 fb2a 	bl	800105c <lcd_display_value>
		break;
 8000a08:	e019      	b.n	8000a3e <fsm_lcd_run+0x1aa>
	case MODE4:
		lcd_goto_XY(1, 0);
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f000 fb49 	bl	80010a4 <lcd_goto_XY>
		lcd_send_string("SET TIMER YELLOW");
 8000a12:	481d      	ldr	r0, [pc, #116]	; (8000a88 <fsm_lcd_run+0x1f4>)
 8000a14:	f000 fb06 	bl	8001024 <lcd_send_string>
		lcd_goto_XY(2, 1);
 8000a18:	2101      	movs	r1, #1
 8000a1a:	2002      	movs	r0, #2
 8000a1c:	f000 fb42 	bl	80010a4 <lcd_goto_XY>
		lcd_send_string("DURATION:");
 8000a20:	4814      	ldr	r0, [pc, #80]	; (8000a74 <fsm_lcd_run+0x1e0>)
 8000a22:	f000 faff 	bl	8001024 <lcd_send_string>
		lcd_display_value(2, 10, YELLOW_timer + temp);
 8000a26:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <fsm_lcd_run+0x1f8>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <fsm_lcd_run+0x1e8>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	461a      	mov	r2, r3
 8000a32:	210a      	movs	r1, #10
 8000a34:	2002      	movs	r0, #2
 8000a36:	f000 fb11 	bl	800105c <lcd_display_value>
		break;
 8000a3a:	e000      	b.n	8000a3e <fsm_lcd_run+0x1aa>


	default:
		break;
 8000a3c:	bf00      	nop
	}
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200000f8 	.word	0x200000f8
 8000a48:	20000044 	.word	0x20000044
 8000a4c:	08004304 	.word	0x08004304
 8000a50:	20000124 	.word	0x20000124
 8000a54:	0800430c 	.word	0x0800430c
 8000a58:	08004318 	.word	0x08004318
 8000a5c:	20000048 	.word	0x20000048
 8000a60:	08004324 	.word	0x08004324
 8000a64:	20000128 	.word	0x20000128
 8000a68:	0800432c 	.word	0x0800432c
 8000a6c:	08004338 	.word	0x08004338
 8000a70:	08004344 	.word	0x08004344
 8000a74:	08004354 	.word	0x08004354
 8000a78:	2000004c 	.word	0x2000004c
 8000a7c:	200000f4 	.word	0x200000f4
 8000a80:	08004360 	.word	0x08004360
 8000a84:	20000050 	.word	0x20000050
 8000a88:	08004370 	.word	0x08004370
 8000a8c:	20000054 	.word	0x20000054

08000a90 <status_manual_mode>:

#include "fsm_manual.h"

int status_manual;

void status_manual_mode(){
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
	if(status_A == AUTO_RED && status_B == AUTO_GREEN){
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <status_manual_mode+0x64>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b0b      	cmp	r3, #11
 8000a9a:	d106      	bne.n	8000aaa <status_manual_mode+0x1a>
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <status_manual_mode+0x68>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b0c      	cmp	r3, #12
 8000aa2:	d102      	bne.n	8000aaa <status_manual_mode+0x1a>
		status_manual = RED_GREEN;
 8000aa4:	4b15      	ldr	r3, [pc, #84]	; (8000afc <status_manual_mode+0x6c>)
 8000aa6:	2215      	movs	r2, #21
 8000aa8:	601a      	str	r2, [r3, #0]

	}
	if(status_A == AUTO_RED && status_B == AUTO_YELLOW){
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <status_manual_mode+0x64>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b0b      	cmp	r3, #11
 8000ab0:	d106      	bne.n	8000ac0 <status_manual_mode+0x30>
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <status_manual_mode+0x68>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b0d      	cmp	r3, #13
 8000ab8:	d102      	bne.n	8000ac0 <status_manual_mode+0x30>
		status_manual = RED_YELLOW;
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <status_manual_mode+0x6c>)
 8000abc:	2216      	movs	r2, #22
 8000abe:	601a      	str	r2, [r3, #0]

	}
	if(status_A == AUTO_GREEN && status_B == AUTO_RED){
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <status_manual_mode+0x64>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b0c      	cmp	r3, #12
 8000ac6:	d106      	bne.n	8000ad6 <status_manual_mode+0x46>
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <status_manual_mode+0x68>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b0b      	cmp	r3, #11
 8000ace:	d102      	bne.n	8000ad6 <status_manual_mode+0x46>
		status_manual = GREEN_RED;
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <status_manual_mode+0x6c>)
 8000ad2:	2217      	movs	r2, #23
 8000ad4:	601a      	str	r2, [r3, #0]

	}
	if(status_A == AUTO_YELLOW && status_B == AUTO_RED){
 8000ad6:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <status_manual_mode+0x64>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b0d      	cmp	r3, #13
 8000adc:	d106      	bne.n	8000aec <status_manual_mode+0x5c>
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <status_manual_mode+0x68>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b0b      	cmp	r3, #11
 8000ae4:	d102      	bne.n	8000aec <status_manual_mode+0x5c>
		status_manual = YELLOW_RED;
 8000ae6:	4b05      	ldr	r3, [pc, #20]	; (8000afc <status_manual_mode+0x6c>)
 8000ae8:	2218      	movs	r2, #24
 8000aea:	601a      	str	r2, [r3, #0]

	}
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	20000044 	.word	0x20000044
 8000af8:	20000048 	.word	0x20000048
 8000afc:	20000120 	.word	0x20000120

08000b00 <fsm_manual_run>:

void fsm_manual_run(){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	switch(status_manual){
 8000b04:	4b84      	ldr	r3, [pc, #528]	; (8000d18 <fsm_manual_run+0x218>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	3b14      	subs	r3, #20
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	f200 8101 	bhi.w	8000d12 <fsm_manual_run+0x212>
 8000b10:	a201      	add	r2, pc, #4	; (adr r2, 8000b18 <fsm_manual_run+0x18>)
 8000b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b16:	bf00      	nop
 8000b18:	08000b2d 	.word	0x08000b2d
 8000b1c:	08000b33 	.word	0x08000b33
 8000b20:	08000bab 	.word	0x08000bab
 8000b24:	08000c23 	.word	0x08000c23
 8000b28:	08000c9b 	.word	0x08000c9b
	case MAN:
		status_manual_mode();
 8000b2c:	f7ff ffb0 	bl	8000a90 <status_manual_mode>
		break;
 8000b30:	e0f0      	b.n	8000d14 <fsm_manual_run+0x214>
	case RED_GREEN:
		statusManTraffic();
 8000b32:	f7ff fcdd 	bl	80004f0 <statusManTraffic>
		lcd_goto_XY(1, 1);
 8000b36:	2101      	movs	r1, #1
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f000 fab3 	bl	80010a4 <lcd_goto_XY>
		lcd_send_string("RED");
 8000b3e:	4877      	ldr	r0, [pc, #476]	; (8000d1c <fsm_manual_run+0x21c>)
 8000b40:	f000 fa70 	bl	8001024 <lcd_send_string>
		lcd_goto_XY(2, 1);
 8000b44:	2101      	movs	r1, #1
 8000b46:	2002      	movs	r0, #2
 8000b48:	f000 faac 	bl	80010a4 <lcd_goto_XY>
		lcd_send_string("GREEN");
 8000b4c:	4874      	ldr	r0, [pc, #464]	; (8000d20 <fsm_manual_run+0x220>)
 8000b4e:	f000 fa69 	bl	8001024 <lcd_send_string>
		if(IsButtonPress(2)== 1){
 8000b52:	2002      	movs	r0, #2
 8000b54:	f7ff fafa 	bl	800014c <IsButtonPress>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d104      	bne.n	8000b68 <fsm_manual_run+0x68>
			status_manual = RED_YELLOW;
 8000b5e:	4b6e      	ldr	r3, [pc, #440]	; (8000d18 <fsm_manual_run+0x218>)
 8000b60:	2216      	movs	r2, #22
 8000b62:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000b64:	f000 fa73 	bl	800104e <lcd_clear_display>
		}
		if(IsButtonPress(3)==1 ){
 8000b68:	2003      	movs	r0, #3
 8000b6a:	f7ff faef 	bl	800014c <IsButtonPress>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d117      	bne.n	8000ba4 <fsm_manual_run+0xa4>
			status_A = AUTO_RED;
 8000b74:	4b6b      	ldr	r3, [pc, #428]	; (8000d24 <fsm_manual_run+0x224>)
 8000b76:	220b      	movs	r2, #11
 8000b78:	601a      	str	r2, [r3, #0]
			status_B = AUTO_GREEN;
 8000b7a:	4b6b      	ldr	r3, [pc, #428]	; (8000d28 <fsm_manual_run+0x228>)
 8000b7c:	220c      	movs	r2, #12
 8000b7e:	601a      	str	r2, [r3, #0]
			setTimer(0, 1000);
 8000b80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b84:	2000      	movs	r0, #0
 8000b86:	f000 fc69 	bl	800145c <setTimer>
			setTimer(1, 1000);
 8000b8a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f000 fc64 	bl	800145c <setTimer>
			count_Down_A = RED_timer;
 8000b94:	4b65      	ldr	r3, [pc, #404]	; (8000d2c <fsm_manual_run+0x22c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a65      	ldr	r2, [pc, #404]	; (8000d30 <fsm_manual_run+0x230>)
 8000b9a:	6013      	str	r3, [r2, #0]
			count_Down_B = GREEN_timer;
 8000b9c:	4b65      	ldr	r3, [pc, #404]	; (8000d34 <fsm_manual_run+0x234>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a65      	ldr	r2, [pc, #404]	; (8000d38 <fsm_manual_run+0x238>)
 8000ba2:	6013      	str	r3, [r2, #0]
		}
		displayTraffic();
 8000ba4:	f7ff fc04 	bl	80003b0 <displayTraffic>
		break;
 8000ba8:	e0b4      	b.n	8000d14 <fsm_manual_run+0x214>
	case RED_YELLOW:
		statusManTraffic();
 8000baa:	f7ff fca1 	bl	80004f0 <statusManTraffic>
		lcd_goto_XY(1, 1);
 8000bae:	2101      	movs	r1, #1
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f000 fa77 	bl	80010a4 <lcd_goto_XY>
		lcd_send_string("RED");
 8000bb6:	4859      	ldr	r0, [pc, #356]	; (8000d1c <fsm_manual_run+0x21c>)
 8000bb8:	f000 fa34 	bl	8001024 <lcd_send_string>
		lcd_goto_XY(2, 1);
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	2002      	movs	r0, #2
 8000bc0:	f000 fa70 	bl	80010a4 <lcd_goto_XY>
		lcd_send_string("YELLOW");
 8000bc4:	485d      	ldr	r0, [pc, #372]	; (8000d3c <fsm_manual_run+0x23c>)
 8000bc6:	f000 fa2d 	bl	8001024 <lcd_send_string>
		if(IsButtonPress(2)== 1){
 8000bca:	2002      	movs	r0, #2
 8000bcc:	f7ff fabe 	bl	800014c <IsButtonPress>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d104      	bne.n	8000be0 <fsm_manual_run+0xe0>
			status_manual = GREEN_RED;
 8000bd6:	4b50      	ldr	r3, [pc, #320]	; (8000d18 <fsm_manual_run+0x218>)
 8000bd8:	2217      	movs	r2, #23
 8000bda:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000bdc:	f000 fa37 	bl	800104e <lcd_clear_display>
		}
		if(IsButtonPress(3)==1 ){
 8000be0:	2003      	movs	r0, #3
 8000be2:	f7ff fab3 	bl	800014c <IsButtonPress>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d117      	bne.n	8000c1c <fsm_manual_run+0x11c>
			status_A = AUTO_RED;
 8000bec:	4b4d      	ldr	r3, [pc, #308]	; (8000d24 <fsm_manual_run+0x224>)
 8000bee:	220b      	movs	r2, #11
 8000bf0:	601a      	str	r2, [r3, #0]
			status_B = AUTO_YELLOW;
 8000bf2:	4b4d      	ldr	r3, [pc, #308]	; (8000d28 <fsm_manual_run+0x228>)
 8000bf4:	220d      	movs	r2, #13
 8000bf6:	601a      	str	r2, [r3, #0]
			setTimer(0, 1000);
 8000bf8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f000 fc2d 	bl	800145c <setTimer>
			setTimer(1, 1000);
 8000c02:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c06:	2001      	movs	r0, #1
 8000c08:	f000 fc28 	bl	800145c <setTimer>
			count_Down_A = RED_timer;
 8000c0c:	4b47      	ldr	r3, [pc, #284]	; (8000d2c <fsm_manual_run+0x22c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a47      	ldr	r2, [pc, #284]	; (8000d30 <fsm_manual_run+0x230>)
 8000c12:	6013      	str	r3, [r2, #0]
			count_Down_B = YELLOW_timer;
 8000c14:	4b4a      	ldr	r3, [pc, #296]	; (8000d40 <fsm_manual_run+0x240>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a47      	ldr	r2, [pc, #284]	; (8000d38 <fsm_manual_run+0x238>)
 8000c1a:	6013      	str	r3, [r2, #0]
		}
		displayTraffic();
 8000c1c:	f7ff fbc8 	bl	80003b0 <displayTraffic>
		break;
 8000c20:	e078      	b.n	8000d14 <fsm_manual_run+0x214>
	case GREEN_RED:
		statusManTraffic();
 8000c22:	f7ff fc65 	bl	80004f0 <statusManTraffic>
		lcd_goto_XY(1, 1);
 8000c26:	2101      	movs	r1, #1
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f000 fa3b 	bl	80010a4 <lcd_goto_XY>
		lcd_send_string("GREEN");
 8000c2e:	483c      	ldr	r0, [pc, #240]	; (8000d20 <fsm_manual_run+0x220>)
 8000c30:	f000 f9f8 	bl	8001024 <lcd_send_string>
		lcd_goto_XY(2, 1);
 8000c34:	2101      	movs	r1, #1
 8000c36:	2002      	movs	r0, #2
 8000c38:	f000 fa34 	bl	80010a4 <lcd_goto_XY>
		lcd_send_string("RED");
 8000c3c:	4837      	ldr	r0, [pc, #220]	; (8000d1c <fsm_manual_run+0x21c>)
 8000c3e:	f000 f9f1 	bl	8001024 <lcd_send_string>
		if(IsButtonPress(2)== 1){
 8000c42:	2002      	movs	r0, #2
 8000c44:	f7ff fa82 	bl	800014c <IsButtonPress>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d104      	bne.n	8000c58 <fsm_manual_run+0x158>
			status_manual = YELLOW_RED;
 8000c4e:	4b32      	ldr	r3, [pc, #200]	; (8000d18 <fsm_manual_run+0x218>)
 8000c50:	2218      	movs	r2, #24
 8000c52:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000c54:	f000 f9fb 	bl	800104e <lcd_clear_display>
		}
		if(IsButtonPress(3)==1 ){
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f7ff fa77 	bl	800014c <IsButtonPress>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d117      	bne.n	8000c94 <fsm_manual_run+0x194>
			status_A = AUTO_GREEN;
 8000c64:	4b2f      	ldr	r3, [pc, #188]	; (8000d24 <fsm_manual_run+0x224>)
 8000c66:	220c      	movs	r2, #12
 8000c68:	601a      	str	r2, [r3, #0]
			status_B = AUTO_RED;
 8000c6a:	4b2f      	ldr	r3, [pc, #188]	; (8000d28 <fsm_manual_run+0x228>)
 8000c6c:	220b      	movs	r2, #11
 8000c6e:	601a      	str	r2, [r3, #0]
			setTimer(0, 1000);
 8000c70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c74:	2000      	movs	r0, #0
 8000c76:	f000 fbf1 	bl	800145c <setTimer>
			setTimer(1, 1000);
 8000c7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c7e:	2001      	movs	r0, #1
 8000c80:	f000 fbec 	bl	800145c <setTimer>
			count_Down_A = GREEN_timer;
 8000c84:	4b2b      	ldr	r3, [pc, #172]	; (8000d34 <fsm_manual_run+0x234>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a29      	ldr	r2, [pc, #164]	; (8000d30 <fsm_manual_run+0x230>)
 8000c8a:	6013      	str	r3, [r2, #0]
			count_Down_B = RED_timer;
 8000c8c:	4b27      	ldr	r3, [pc, #156]	; (8000d2c <fsm_manual_run+0x22c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a29      	ldr	r2, [pc, #164]	; (8000d38 <fsm_manual_run+0x238>)
 8000c92:	6013      	str	r3, [r2, #0]
		}
		displayTraffic();
 8000c94:	f7ff fb8c 	bl	80003b0 <displayTraffic>
		break;
 8000c98:	e03c      	b.n	8000d14 <fsm_manual_run+0x214>
	case YELLOW_RED:
		statusManTraffic();
 8000c9a:	f7ff fc29 	bl	80004f0 <statusManTraffic>
		lcd_goto_XY(1, 1);
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f000 f9ff 	bl	80010a4 <lcd_goto_XY>
		lcd_send_string("YELLOW");
 8000ca6:	4825      	ldr	r0, [pc, #148]	; (8000d3c <fsm_manual_run+0x23c>)
 8000ca8:	f000 f9bc 	bl	8001024 <lcd_send_string>
		lcd_goto_XY(2, 1);
 8000cac:	2101      	movs	r1, #1
 8000cae:	2002      	movs	r0, #2
 8000cb0:	f000 f9f8 	bl	80010a4 <lcd_goto_XY>
		lcd_send_string("RED");
 8000cb4:	4819      	ldr	r0, [pc, #100]	; (8000d1c <fsm_manual_run+0x21c>)
 8000cb6:	f000 f9b5 	bl	8001024 <lcd_send_string>
		if(IsButtonPress(2)== 1){
 8000cba:	2002      	movs	r0, #2
 8000cbc:	f7ff fa46 	bl	800014c <IsButtonPress>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d104      	bne.n	8000cd0 <fsm_manual_run+0x1d0>
			status_manual = RED_GREEN;
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <fsm_manual_run+0x218>)
 8000cc8:	2215      	movs	r2, #21
 8000cca:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000ccc:	f000 f9bf 	bl	800104e <lcd_clear_display>
		}
		if(IsButtonPress(3)==1 ){
 8000cd0:	2003      	movs	r0, #3
 8000cd2:	f7ff fa3b 	bl	800014c <IsButtonPress>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d117      	bne.n	8000d0c <fsm_manual_run+0x20c>
			status_A = AUTO_YELLOW;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <fsm_manual_run+0x224>)
 8000cde:	220d      	movs	r2, #13
 8000ce0:	601a      	str	r2, [r3, #0]
			status_B = AUTO_RED;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <fsm_manual_run+0x228>)
 8000ce4:	220b      	movs	r2, #11
 8000ce6:	601a      	str	r2, [r3, #0]
			setTimer(0, 1000);
 8000ce8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cec:	2000      	movs	r0, #0
 8000cee:	f000 fbb5 	bl	800145c <setTimer>
			setTimer(1, 1000);
 8000cf2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	f000 fbb0 	bl	800145c <setTimer>
			count_Down_A = YELLOW_timer;
 8000cfc:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <fsm_manual_run+0x240>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <fsm_manual_run+0x230>)
 8000d02:	6013      	str	r3, [r2, #0]
			count_Down_B = RED_timer;
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <fsm_manual_run+0x22c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <fsm_manual_run+0x238>)
 8000d0a:	6013      	str	r3, [r2, #0]
		}
		displayTraffic();
 8000d0c:	f7ff fb50 	bl	80003b0 <displayTraffic>
		break;
 8000d10:	e000      	b.n	8000d14 <fsm_manual_run+0x214>
	default:
		break;
 8000d12:	bf00      	nop
	}
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000120 	.word	0x20000120
 8000d1c:	08004384 	.word	0x08004384
 8000d20:	08004388 	.word	0x08004388
 8000d24:	20000044 	.word	0x20000044
 8000d28:	20000048 	.word	0x20000048
 8000d2c:	2000004c 	.word	0x2000004c
 8000d30:	20000124 	.word	0x20000124
 8000d34:	20000050 	.word	0x20000050
 8000d38:	20000128 	.word	0x20000128
 8000d3c:	08004390 	.word	0x08004390
 8000d40:	20000054 	.word	0x20000054

08000d44 <fsm_mode>:
int GREEN_timer = 3;
int YELLOW_timer = 2;

int temp =0;

void fsm_mode(){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	switch(statusMode){
 8000d48:	4b67      	ldr	r3, [pc, #412]	; (8000ee8 <fsm_mode+0x1a4>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b04      	cmp	r3, #4
 8000d4e:	f200 80c5 	bhi.w	8000edc <fsm_mode+0x198>
 8000d52:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <fsm_mode+0x14>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000d6d 	.word	0x08000d6d
 8000d5c:	08000d81 	.word	0x08000d81
 8000d60:	08000dbd 	.word	0x08000dbd
 8000d64:	08000e19 	.word	0x08000e19
 8000d68:	08000e75 	.word	0x08000e75
	case INIT:
		statusMode = MODE1;
 8000d6c:	4b5e      	ldr	r3, [pc, #376]	; (8000ee8 <fsm_mode+0x1a4>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	601a      	str	r2, [r3, #0]
		status_A = AUTO;
 8000d72:	4b5e      	ldr	r3, [pc, #376]	; (8000eec <fsm_mode+0x1a8>)
 8000d74:	220a      	movs	r2, #10
 8000d76:	601a      	str	r2, [r3, #0]
		status_B = AUTO;
 8000d78:	4b5d      	ldr	r3, [pc, #372]	; (8000ef0 <fsm_mode+0x1ac>)
 8000d7a:	220a      	movs	r2, #10
 8000d7c:	601a      	str	r2, [r3, #0]
		break;
 8000d7e:	e0b0      	b.n	8000ee2 <fsm_mode+0x19e>
	case MODE1:
		if(IsButtonPress(0)==1){
 8000d80:	2000      	movs	r0, #0
 8000d82:	f7ff f9e3 	bl	800014c <IsButtonPress>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d10a      	bne.n	8000da2 <fsm_mode+0x5e>
			statusMode=MODE2;
 8000d8c:	4b56      	ldr	r3, [pc, #344]	; (8000ee8 <fsm_mode+0x1a4>)
 8000d8e:	2202      	movs	r2, #2
 8000d90:	601a      	str	r2, [r3, #0]
			status_A = 0;
 8000d92:	4b56      	ldr	r3, [pc, #344]	; (8000eec <fsm_mode+0x1a8>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
			status_B = 0;
 8000d98:	4b55      	ldr	r3, [pc, #340]	; (8000ef0 <fsm_mode+0x1ac>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000d9e:	f000 f956 	bl	800104e <lcd_clear_display>
		}
		if(IsButtonPress(2) == 1){
 8000da2:	2002      	movs	r0, #2
 8000da4:	f7ff f9d2 	bl	800014c <IsButtonPress>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	f040 8098 	bne.w	8000ee0 <fsm_mode+0x19c>
			status_manual = MAN;
 8000db0:	4b50      	ldr	r3, [pc, #320]	; (8000ef4 <fsm_mode+0x1b0>)
 8000db2:	2214      	movs	r2, #20
 8000db4:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000db6:	f000 f94a 	bl	800104e <lcd_clear_display>
		}
		break;
 8000dba:	e091      	b.n	8000ee0 <fsm_mode+0x19c>
	case MODE2:
		statusModeTraffic();
 8000dbc:	f7ff fb66 	bl	800048c <statusModeTraffic>

		if(IsButtonPress(0)==1){
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f7ff f9c3 	bl	800014c <IsButtonPress>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d107      	bne.n	8000ddc <fsm_mode+0x98>
			statusMode=MODE3;
 8000dcc:	4b46      	ldr	r3, [pc, #280]	; (8000ee8 <fsm_mode+0x1a4>)
 8000dce:	2203      	movs	r2, #3
 8000dd0:	601a      	str	r2, [r3, #0]
			temp=0;
 8000dd2:	4b49      	ldr	r3, [pc, #292]	; (8000ef8 <fsm_mode+0x1b4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000dd8:	f000 f939 	bl	800104e <lcd_clear_display>

		}
		if(IsButtonPress(1)==1){
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f7ff f9b5 	bl	800014c <IsButtonPress>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d104      	bne.n	8000df2 <fsm_mode+0xae>
			temp+=1;
 8000de8:	4b43      	ldr	r3, [pc, #268]	; (8000ef8 <fsm_mode+0x1b4>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	4a42      	ldr	r2, [pc, #264]	; (8000ef8 <fsm_mode+0x1b4>)
 8000df0:	6013      	str	r3, [r2, #0]
		}
		if(IsButtonPress(2)==1){
 8000df2:	2002      	movs	r0, #2
 8000df4:	f7ff f9aa 	bl	800014c <IsButtonPress>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d109      	bne.n	8000e12 <fsm_mode+0xce>
			RED_timer+=temp;
 8000dfe:	4b3f      	ldr	r3, [pc, #252]	; (8000efc <fsm_mode+0x1b8>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	4b3d      	ldr	r3, [pc, #244]	; (8000ef8 <fsm_mode+0x1b4>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4413      	add	r3, r2
 8000e08:	4a3c      	ldr	r2, [pc, #240]	; (8000efc <fsm_mode+0x1b8>)
 8000e0a:	6013      	str	r3, [r2, #0]
			temp=0;
 8000e0c:	4b3a      	ldr	r3, [pc, #232]	; (8000ef8 <fsm_mode+0x1b4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
		}
		displayTraffic();
 8000e12:	f7ff facd 	bl	80003b0 <displayTraffic>
		break;
 8000e16:	e064      	b.n	8000ee2 <fsm_mode+0x19e>
	case MODE3:
		statusModeTraffic();
 8000e18:	f7ff fb38 	bl	800048c <statusModeTraffic>
		if(IsButtonPress(0)==1){
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f7ff f995 	bl	800014c <IsButtonPress>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d107      	bne.n	8000e38 <fsm_mode+0xf4>
			statusMode=MODE4;
 8000e28:	4b2f      	ldr	r3, [pc, #188]	; (8000ee8 <fsm_mode+0x1a4>)
 8000e2a:	2204      	movs	r2, #4
 8000e2c:	601a      	str	r2, [r3, #0]
			temp=0;
 8000e2e:	4b32      	ldr	r3, [pc, #200]	; (8000ef8 <fsm_mode+0x1b4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000e34:	f000 f90b 	bl	800104e <lcd_clear_display>

		}
		if(IsButtonPress(1)==1){
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f7ff f987 	bl	800014c <IsButtonPress>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d104      	bne.n	8000e4e <fsm_mode+0x10a>
			temp+=1;
 8000e44:	4b2c      	ldr	r3, [pc, #176]	; (8000ef8 <fsm_mode+0x1b4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	4a2b      	ldr	r2, [pc, #172]	; (8000ef8 <fsm_mode+0x1b4>)
 8000e4c:	6013      	str	r3, [r2, #0]
		}
		if(IsButtonPress(2)==1){
 8000e4e:	2002      	movs	r0, #2
 8000e50:	f7ff f97c 	bl	800014c <IsButtonPress>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d109      	bne.n	8000e6e <fsm_mode+0x12a>
			GREEN_timer+=temp;
 8000e5a:	4b29      	ldr	r3, [pc, #164]	; (8000f00 <fsm_mode+0x1bc>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <fsm_mode+0x1b4>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	4a26      	ldr	r2, [pc, #152]	; (8000f00 <fsm_mode+0x1bc>)
 8000e66:	6013      	str	r3, [r2, #0]
			temp=0;
 8000e68:	4b23      	ldr	r3, [pc, #140]	; (8000ef8 <fsm_mode+0x1b4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
		}
		displayTraffic();
 8000e6e:	f7ff fa9f 	bl	80003b0 <displayTraffic>
		break;
 8000e72:	e036      	b.n	8000ee2 <fsm_mode+0x19e>
	case MODE4:
		statusModeTraffic();
 8000e74:	f7ff fb0a 	bl	800048c <statusModeTraffic>
		if(IsButtonPress(0)==1){
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f7ff f967 	bl	800014c <IsButtonPress>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d10d      	bne.n	8000ea0 <fsm_mode+0x15c>
			temp=0;
 8000e84:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <fsm_mode+0x1b4>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
			statusMode=MODE1;
 8000e8a:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <fsm_mode+0x1a4>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	601a      	str	r2, [r3, #0]
			status_A = AUTO;
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <fsm_mode+0x1a8>)
 8000e92:	220a      	movs	r2, #10
 8000e94:	601a      	str	r2, [r3, #0]
			status_B = AUTO;
 8000e96:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <fsm_mode+0x1ac>)
 8000e98:	220a      	movs	r2, #10
 8000e9a:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000e9c:	f000 f8d7 	bl	800104e <lcd_clear_display>
		}
		if(IsButtonPress(1)==1){
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f7ff f953 	bl	800014c <IsButtonPress>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d104      	bne.n	8000eb6 <fsm_mode+0x172>
			temp+=1;
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <fsm_mode+0x1b4>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	4a11      	ldr	r2, [pc, #68]	; (8000ef8 <fsm_mode+0x1b4>)
 8000eb4:	6013      	str	r3, [r2, #0]
		}
		if(IsButtonPress(2)==1){
 8000eb6:	2002      	movs	r0, #2
 8000eb8:	f7ff f948 	bl	800014c <IsButtonPress>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d109      	bne.n	8000ed6 <fsm_mode+0x192>
			YELLOW_timer+=temp;
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <fsm_mode+0x1c0>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <fsm_mode+0x1b4>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <fsm_mode+0x1c0>)
 8000ece:	6013      	str	r3, [r2, #0]
			temp=0;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <fsm_mode+0x1b4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
		}
		displayTraffic();
 8000ed6:	f7ff fa6b 	bl	80003b0 <displayTraffic>
		break;
 8000eda:	e002      	b.n	8000ee2 <fsm_mode+0x19e>
	default:
		break;
 8000edc:	bf00      	nop
 8000ede:	e000      	b.n	8000ee2 <fsm_mode+0x19e>
		break;
 8000ee0:	bf00      	nop
	}
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200000f8 	.word	0x200000f8
 8000eec:	20000044 	.word	0x20000044
 8000ef0:	20000048 	.word	0x20000048
 8000ef4:	20000120 	.word	0x20000120
 8000ef8:	200000f4 	.word	0x200000f4
 8000efc:	2000004c 	.word	0x2000004c
 8000f00:	20000050 	.word	0x20000050
 8000f04:	20000054 	.word	0x20000054

08000f08 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af02      	add	r7, sp, #8
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	f023 030f 	bic.w	r3, r3, #15
 8000f18:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	011b      	lsls	r3, r3, #4
 8000f1e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	f043 030c 	orr.w	r3, r3, #12
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	f043 0308 	orr.w	r3, r3, #8
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f34:	7bbb      	ldrb	r3, [r7, #14]
 8000f36:	f043 030c 	orr.w	r3, r3, #12
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f3e:	7bbb      	ldrb	r3, [r7, #14]
 8000f40:	f043 0308 	orr.w	r3, r3, #8
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f48:	f107 0208 	add.w	r2, r7, #8
 8000f4c:	2364      	movs	r3, #100	; 0x64
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2304      	movs	r3, #4
 8000f52:	2142      	movs	r1, #66	; 0x42
 8000f54:	4803      	ldr	r0, [pc, #12]	; (8000f64 <lcd_send_cmd+0x5c>)
 8000f56:	f001 f917 	bl	8002188 <HAL_I2C_Master_Transmit>
}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000012c 	.word	0x2000012c

08000f68 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af02      	add	r7, sp, #8
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	f023 030f 	bic.w	r3, r3, #15
 8000f78:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	011b      	lsls	r3, r3, #4
 8000f7e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	f043 030d 	orr.w	r3, r3, #13
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	f043 0309 	orr.w	r3, r3, #9
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000f94:	7bbb      	ldrb	r3, [r7, #14]
 8000f96:	f043 030d 	orr.w	r3, r3, #13
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000f9e:	7bbb      	ldrb	r3, [r7, #14]
 8000fa0:	f043 0309 	orr.w	r3, r3, #9
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000fa8:	f107 0208 	add.w	r2, r7, #8
 8000fac:	2364      	movs	r3, #100	; 0x64
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2304      	movs	r3, #4
 8000fb2:	2142      	movs	r1, #66	; 0x42
 8000fb4:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <lcd_send_data+0x5c>)
 8000fb6:	f001 f8e7 	bl	8002188 <HAL_I2C_Master_Transmit>
}
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000012c 	.word	0x2000012c

08000fc8 <lcd_init>:

void lcd_init (void) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000fcc:	2033      	movs	r0, #51	; 0x33
 8000fce:	f7ff ff9b 	bl	8000f08 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000fd2:	2032      	movs	r0, #50	; 0x32
 8000fd4:	f7ff ff98 	bl	8000f08 <lcd_send_cmd>
	HAL_Delay(50);
 8000fd8:	2032      	movs	r0, #50	; 0x32
 8000fda:	f000 fc71 	bl	80018c0 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000fde:	2028      	movs	r0, #40	; 0x28
 8000fe0:	f7ff ff92 	bl	8000f08 <lcd_send_cmd>
	HAL_Delay(50);
 8000fe4:	2032      	movs	r0, #50	; 0x32
 8000fe6:	f000 fc6b 	bl	80018c0 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000fea:	2001      	movs	r0, #1
 8000fec:	f7ff ff8c 	bl	8000f08 <lcd_send_cmd>
	HAL_Delay(50);
 8000ff0:	2032      	movs	r0, #50	; 0x32
 8000ff2:	f000 fc65 	bl	80018c0 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000ff6:	2006      	movs	r0, #6
 8000ff8:	f7ff ff86 	bl	8000f08 <lcd_send_cmd>
	HAL_Delay(50);
 8000ffc:	2032      	movs	r0, #50	; 0x32
 8000ffe:	f000 fc5f 	bl	80018c0 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8001002:	200c      	movs	r0, #12
 8001004:	f7ff ff80 	bl	8000f08 <lcd_send_cmd>
	HAL_Delay(50);
 8001008:	2032      	movs	r0, #50	; 0x32
 800100a:	f000 fc59 	bl	80018c0 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 800100e:	2002      	movs	r0, #2
 8001010:	f7ff ff7a 	bl	8000f08 <lcd_send_cmd>
	HAL_Delay(50);
 8001014:	2032      	movs	r0, #50	; 0x32
 8001016:	f000 fc53 	bl	80018c0 <HAL_Delay>
	lcd_send_cmd (0x80);
 800101a:	2080      	movs	r0, #128	; 0x80
 800101c:	f7ff ff74 	bl	8000f08 <lcd_send_cmd>
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}

08001024 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800102c:	e006      	b.n	800103c <lcd_send_string+0x18>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	1c5a      	adds	r2, r3, #1
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff96 	bl	8000f68 <lcd_send_data>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1f4      	bne.n	800102e <lcd_send_string+0xa>
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <lcd_clear_display>:

void lcd_clear_display (void)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8001052:	2001      	movs	r0, #1
 8001054:	f7ff ff58 	bl	8000f08 <lcd_send_cmd>
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}

0800105c <lcd_display_value>:

void lcd_display_value(int row, int col, int value) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
    char *buffer = (char *)malloc(5 * sizeof(char)); // Cấp phát động 5 bytes (đủ cho 4 chữ số và '\0')
 8001068:	2005      	movs	r0, #5
 800106a:	f002 fced 	bl	8003a48 <malloc>
 800106e:	4603      	mov	r3, r0
 8001070:	617b      	str	r3, [r7, #20]
    if (buffer == NULL) return; // Kiểm tra cấp phát thành công
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d00f      	beq.n	8001098 <lcd_display_value+0x3c>

    sprintf(buffer, "%-11d", value); // Chuyển giá trị thành chuỗi
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	4909      	ldr	r1, [pc, #36]	; (80010a0 <lcd_display_value+0x44>)
 800107c:	6978      	ldr	r0, [r7, #20]
 800107e:	f002 fdb1 	bl	8003be4 <siprintf>
    lcd_goto_XY(row, col);
 8001082:	68b9      	ldr	r1, [r7, #8]
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f000 f80d 	bl	80010a4 <lcd_goto_XY>
    lcd_send_string(buffer);
 800108a:	6978      	ldr	r0, [r7, #20]
 800108c:	f7ff ffca 	bl	8001024 <lcd_send_string>

    free(buffer); // Giải phóng bộ nhớ sau khi dùng
 8001090:	6978      	ldr	r0, [r7, #20]
 8001092:	f002 fce1 	bl	8003a58 <free>
 8001096:	e000      	b.n	800109a <lcd_display_value+0x3e>
    if (buffer == NULL) return; // Kiểm tra cấp phát thành công
 8001098:	bf00      	nop
}
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	08004398 	.word	0x08004398

080010a4 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d108      	bne.n	80010c6 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	4413      	add	r3, r2
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	337f      	adds	r3, #127	; 0x7f
 80010c2:	73fb      	strb	r3, [r7, #15]
 80010c4:	e008      	b.n	80010d8 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	3340      	adds	r3, #64	; 0x40
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ff14 	bl	8000f08 <lcd_send_cmd>
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ec:	f000 fb86 	bl	80017fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f0:	f000 f818 	bl	8001124 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f4:	f000 f8fa 	bl	80012ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010f8:	f000 f8ce 	bl	8001298 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010fc:	f000 f852 	bl	80011a4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001100:	f000 f87e 	bl	8001200 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001104:	4806      	ldr	r0, [pc, #24]	; (8001120 <main+0x38>)
 8001106:	f001 fff5 	bl	80030f4 <HAL_TIM_Base_Start_IT>
  lcd_init();
 800110a:	f7ff ff5d 	bl	8000fc8 <lcd_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_automatic_run();
 800110e:	f7ff faa9 	bl	8000664 <fsm_automatic_run>
	  fsm_mode();
 8001112:	f7ff fe17 	bl	8000d44 <fsm_mode>
	  fsm_manual_run();
 8001116:	f7ff fcf3 	bl	8000b00 <fsm_manual_run>
	  fsm_lcd_run();
 800111a:	f7ff fbbb 	bl	8000894 <fsm_lcd_run>
	  fsm_automatic_run();
 800111e:	e7f6      	b.n	800110e <main+0x26>
 8001120:	20000180 	.word	0x20000180

08001124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b090      	sub	sp, #64	; 0x40
 8001128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112a:	f107 0318 	add.w	r3, r7, #24
 800112e:	2228      	movs	r2, #40	; 0x28
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f002 fc98 	bl	8003a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001146:	2302      	movs	r3, #2
 8001148:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800114a:	2301      	movs	r3, #1
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800114e:	2310      	movs	r3, #16
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001152:	2302      	movs	r3, #2
 8001154:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001156:	2300      	movs	r3, #0
 8001158:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800115a:	2300      	movs	r3, #0
 800115c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115e:	f107 0318 	add.w	r3, r7, #24
 8001162:	4618      	mov	r0, r3
 8001164:	f001 fb68 	bl	8002838 <HAL_RCC_OscConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800116e:	f000 f96f 	bl	8001450 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001172:	230f      	movs	r3, #15
 8001174:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001176:	2302      	movs	r3, #2
 8001178:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800117e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001182:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f001 fdd3 	bl	8002d38 <HAL_RCC_ClockConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001198:	f000 f95a 	bl	8001450 <Error_Handler>
  }
}
 800119c:	bf00      	nop
 800119e:	3740      	adds	r7, #64	; 0x40
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011aa:	4a13      	ldr	r2, [pc, #76]	; (80011f8 <MX_I2C1_Init+0x54>)
 80011ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011b0:	4a12      	ldr	r2, [pc, #72]	; (80011fc <MX_I2C1_Init+0x58>)
 80011b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011bc:	2200      	movs	r2, #0
 80011be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011e0:	4804      	ldr	r0, [pc, #16]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011e2:	f000 fe8d 	bl	8001f00 <HAL_I2C_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011ec:	f000 f930 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	2000012c 	.word	0x2000012c
 80011f8:	40005400 	.word	0x40005400
 80011fc:	000186a0 	.word	0x000186a0

08001200 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001214:	463b      	mov	r3, r7
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800121c:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <MX_TIM2_Init+0x94>)
 800121e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001222:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <MX_TIM2_Init+0x94>)
 8001226:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800122a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <MX_TIM2_Init+0x94>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001232:	4b18      	ldr	r3, [pc, #96]	; (8001294 <MX_TIM2_Init+0x94>)
 8001234:	2209      	movs	r2, #9
 8001236:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001238:	4b16      	ldr	r3, [pc, #88]	; (8001294 <MX_TIM2_Init+0x94>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <MX_TIM2_Init+0x94>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001244:	4813      	ldr	r0, [pc, #76]	; (8001294 <MX_TIM2_Init+0x94>)
 8001246:	f001 ff05 	bl	8003054 <HAL_TIM_Base_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001250:	f000 f8fe 	bl	8001450 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001258:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	4619      	mov	r1, r3
 8001260:	480c      	ldr	r0, [pc, #48]	; (8001294 <MX_TIM2_Init+0x94>)
 8001262:	f002 f889 	bl	8003378 <HAL_TIM_ConfigClockSource>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800126c:	f000 f8f0 	bl	8001450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001270:	2300      	movs	r3, #0
 8001272:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001278:	463b      	mov	r3, r7
 800127a:	4619      	mov	r1, r3
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_TIM2_Init+0x94>)
 800127e:	f002 fa6b 	bl	8003758 <HAL_TIMEx_MasterConfigSynchronization>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001288:	f000 f8e2 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000180 	.word	0x20000180

08001298 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 800129e:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <MX_USART2_UART_Init+0x50>)
 80012a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012be:	220c      	movs	r2, #12
 80012c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012d0:	f002 fab2 	bl	8003838 <HAL_UART_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012da:	f000 f8b9 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200001c8 	.word	0x200001c8
 80012e8:	40004400 	.word	0x40004400

080012ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f2:	f107 0310 	add.w	r3, r7, #16
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001300:	4b48      	ldr	r3, [pc, #288]	; (8001424 <MX_GPIO_Init+0x138>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	4a47      	ldr	r2, [pc, #284]	; (8001424 <MX_GPIO_Init+0x138>)
 8001306:	f043 0310 	orr.w	r3, r3, #16
 800130a:	6193      	str	r3, [r2, #24]
 800130c:	4b45      	ldr	r3, [pc, #276]	; (8001424 <MX_GPIO_Init+0x138>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f003 0310 	and.w	r3, r3, #16
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001318:	4b42      	ldr	r3, [pc, #264]	; (8001424 <MX_GPIO_Init+0x138>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a41      	ldr	r2, [pc, #260]	; (8001424 <MX_GPIO_Init+0x138>)
 800131e:	f043 0320 	orr.w	r3, r3, #32
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b3f      	ldr	r3, [pc, #252]	; (8001424 <MX_GPIO_Init+0x138>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f003 0320 	and.w	r3, r3, #32
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	4b3c      	ldr	r3, [pc, #240]	; (8001424 <MX_GPIO_Init+0x138>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a3b      	ldr	r2, [pc, #236]	; (8001424 <MX_GPIO_Init+0x138>)
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b39      	ldr	r3, [pc, #228]	; (8001424 <MX_GPIO_Init+0x138>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001348:	4b36      	ldr	r3, [pc, #216]	; (8001424 <MX_GPIO_Init+0x138>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	4a35      	ldr	r2, [pc, #212]	; (8001424 <MX_GPIO_Init+0x138>)
 800134e:	f043 0308 	orr.w	r3, r3, #8
 8001352:	6193      	str	r3, [r2, #24]
 8001354:	4b33      	ldr	r3, [pc, #204]	; (8001424 <MX_GPIO_Init+0x138>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f003 0308 	and.w	r3, r3, #8
 800135c:	603b      	str	r3, [r7, #0]
 800135e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D7_Pin|D8_Pin, GPIO_PIN_RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001366:	4830      	ldr	r0, [pc, #192]	; (8001428 <MX_GPIO_Init+0x13c>)
 8001368:	f000 fd77 	bl	8001e5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 618f 	mov.w	r1, #1144	; 0x478
 8001372:	482e      	ldr	r0, [pc, #184]	; (800142c <MX_GPIO_Init+0x140>)
 8001374:	f000 fd71 	bl	8001e5a <HAL_GPIO_WritePin>
                          |D10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	2180      	movs	r1, #128	; 0x80
 800137c:	482c      	ldr	r0, [pc, #176]	; (8001430 <MX_GPIO_Init+0x144>)
 800137e:	f000 fd6c 	bl	8001e5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001382:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001388:	4b2a      	ldr	r3, [pc, #168]	; (8001434 <MX_GPIO_Init+0x148>)
 800138a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	4619      	mov	r1, r3
 8001396:	4826      	ldr	r0, [pc, #152]	; (8001430 <MX_GPIO_Init+0x144>)
 8001398:	f000 fbc4 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_Pin A1_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin;
 800139c:	2303      	movs	r3, #3
 800139e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	4619      	mov	r1, r3
 80013ae:	481e      	ldr	r0, [pc, #120]	; (8001428 <MX_GPIO_Init+0x13c>)
 80013b0:	f000 fbb8 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D7_Pin D8_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D7_Pin|D8_Pin;
 80013b4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80013b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ba:	2301      	movs	r3, #1
 80013bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2302      	movs	r3, #2
 80013c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c6:	f107 0310 	add.w	r3, r7, #16
 80013ca:	4619      	mov	r1, r3
 80013cc:	4816      	ldr	r0, [pc, #88]	; (8001428 <MX_GPIO_Init+0x13c>)
 80013ce:	f000 fba9 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin
                           D10_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin
 80013d2:	f44f 638f 	mov.w	r3, #1144	; 0x478
 80013d6:	613b      	str	r3, [r7, #16]
                          |D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d8:	2301      	movs	r3, #1
 80013da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2302      	movs	r3, #2
 80013e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	4619      	mov	r1, r3
 80013ea:	4810      	ldr	r0, [pc, #64]	; (800142c <MX_GPIO_Init+0x140>)
 80013ec:	f000 fb9a 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_Pin */
  GPIO_InitStruct.Pin = D9_Pin;
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f4:	2301      	movs	r3, #1
 80013f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2302      	movs	r3, #2
 80013fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D9_GPIO_Port, &GPIO_InitStruct);
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	4619      	mov	r1, r3
 8001406:	480a      	ldr	r0, [pc, #40]	; (8001430 <MX_GPIO_Init+0x144>)
 8001408:	f000 fb8c 	bl	8001b24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800140c:	2200      	movs	r2, #0
 800140e:	2100      	movs	r1, #0
 8001410:	2028      	movs	r0, #40	; 0x28
 8001412:	f000 fb50 	bl	8001ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001416:	2028      	movs	r0, #40	; 0x28
 8001418:	f000 fb69 	bl	8001aee <HAL_NVIC_EnableIRQ>

}
 800141c:	bf00      	nop
 800141e:	3720      	adds	r7, #32
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40021000 	.word	0x40021000
 8001428:	40010800 	.word	0x40010800
 800142c:	40010c00 	.word	0x40010c00
 8001430:	40011000 	.word	0x40011000
 8001434:	10110000 	.word	0x10110000

08001438 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	timerun();
 8001440:	f000 f82c 	bl	800149c <timerun>
	getKeyInput();
 8001444:	f7fe feda 	bl	80001fc <getKeyInput>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001454:	b672      	cpsid	i
}
 8001456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001458:	e7fe      	b.n	8001458 <Error_Handler+0x8>
	...

0800145c <setTimer>:


int timer_flag[10];
int timer_counter[10];

void setTimer(int index, int counter) {
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
    timer_flag[index] = 0;
 8001466:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <setTimer+0x34>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2100      	movs	r1, #0
 800146c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    timer_counter[index] = counter / TICK;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	4a08      	ldr	r2, [pc, #32]	; (8001494 <setTimer+0x38>)
 8001474:	fb82 1203 	smull	r1, r2, r2, r3
 8001478:	1092      	asrs	r2, r2, #2
 800147a:	17db      	asrs	r3, r3, #31
 800147c:	1ad2      	subs	r2, r2, r3
 800147e:	4906      	ldr	r1, [pc, #24]	; (8001498 <setTimer+0x3c>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	20000238 	.word	0x20000238
 8001494:	66666667 	.word	0x66666667
 8001498:	20000210 	.word	0x20000210

0800149c <timerun>:

void timerun() {
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
    for (int i = 0; i < 10; i++) {  // Corrected loop condition
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	e01c      	b.n	80014e2 <timerun+0x46>
        if (timer_counter[i] >= 0) {
 80014a8:	4a12      	ldr	r2, [pc, #72]	; (80014f4 <timerun+0x58>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	db13      	blt.n	80014dc <timerun+0x40>
            timer_counter[i]--;
 80014b4:	4a0f      	ldr	r2, [pc, #60]	; (80014f4 <timerun+0x58>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014bc:	1e5a      	subs	r2, r3, #1
 80014be:	490d      	ldr	r1, [pc, #52]	; (80014f4 <timerun+0x58>)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if (timer_counter[i] <= 0) {
 80014c6:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <timerun+0x58>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	dc04      	bgt.n	80014dc <timerun+0x40>
                timer_flag[i] = 1;
 80014d2:	4a09      	ldr	r2, [pc, #36]	; (80014f8 <timerun+0x5c>)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2101      	movs	r1, #1
 80014d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < 10; i++) {  // Corrected loop condition
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3301      	adds	r3, #1
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b09      	cmp	r3, #9
 80014e6:	dddf      	ble.n	80014a8 <timerun+0xc>
            }
        }
    }
}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	20000210 	.word	0x20000210
 80014f8:	20000238 	.word	0x20000238

080014fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_MspInit+0x5c>)
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	4a14      	ldr	r2, [pc, #80]	; (8001558 <HAL_MspInit+0x5c>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6193      	str	r3, [r2, #24]
 800150e:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_MspInit+0x5c>)
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <HAL_MspInit+0x5c>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	4a0e      	ldr	r2, [pc, #56]	; (8001558 <HAL_MspInit+0x5c>)
 8001520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001524:	61d3      	str	r3, [r2, #28]
 8001526:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <HAL_MspInit+0x5c>)
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <HAL_MspInit+0x60>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	4a04      	ldr	r2, [pc, #16]	; (800155c <HAL_MspInit+0x60>)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154e:	bf00      	nop
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	40021000 	.word	0x40021000
 800155c:	40010000 	.word	0x40010000

08001560 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	; 0x28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a1d      	ldr	r2, [pc, #116]	; (80015f0 <HAL_I2C_MspInit+0x90>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d132      	bne.n	80015e6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001580:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <HAL_I2C_MspInit+0x94>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a1b      	ldr	r2, [pc, #108]	; (80015f4 <HAL_I2C_MspInit+0x94>)
 8001586:	f043 0308 	orr.w	r3, r3, #8
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <HAL_I2C_MspInit+0x94>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f003 0308 	and.w	r3, r3, #8
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001598:	f44f 7340 	mov.w	r3, #768	; 0x300
 800159c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800159e:	2312      	movs	r3, #18
 80015a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015a2:	2303      	movs	r3, #3
 80015a4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	4812      	ldr	r0, [pc, #72]	; (80015f8 <HAL_I2C_MspInit+0x98>)
 80015ae:	f000 fab9 	bl	8001b24 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80015b2:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_I2C_MspInit+0x9c>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	f043 0302 	orr.w	r3, r3, #2
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
 80015c8:	4a0c      	ldr	r2, [pc, #48]	; (80015fc <HAL_I2C_MspInit+0x9c>)
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <HAL_I2C_MspInit+0x94>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	4a08      	ldr	r2, [pc, #32]	; (80015f4 <HAL_I2C_MspInit+0x94>)
 80015d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015d8:	61d3      	str	r3, [r2, #28]
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_I2C_MspInit+0x94>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015e6:	bf00      	nop
 80015e8:	3728      	adds	r7, #40	; 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40005400 	.word	0x40005400
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40010c00 	.word	0x40010c00
 80015fc:	40010000 	.word	0x40010000

08001600 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001610:	d113      	bne.n	800163a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <HAL_TIM_Base_MspInit+0x44>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <HAL_TIM_Base_MspInit+0x44>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	61d3      	str	r3, [r2, #28]
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <HAL_TIM_Base_MspInit+0x44>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2100      	movs	r1, #0
 800162e:	201c      	movs	r0, #28
 8001630:	f000 fa41 	bl	8001ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001634:	201c      	movs	r0, #28
 8001636:	f000 fa5a 	bl	8001aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800163a:	bf00      	nop
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000

08001648 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0310 	add.w	r3, r7, #16
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a15      	ldr	r2, [pc, #84]	; (80016b8 <HAL_UART_MspInit+0x70>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d123      	bne.n	80016b0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001668:	4b14      	ldr	r3, [pc, #80]	; (80016bc <HAL_UART_MspInit+0x74>)
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	4a13      	ldr	r2, [pc, #76]	; (80016bc <HAL_UART_MspInit+0x74>)
 800166e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001672:	61d3      	str	r3, [r2, #28]
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_UART_MspInit+0x74>)
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <HAL_UART_MspInit+0x74>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	4a0d      	ldr	r2, [pc, #52]	; (80016bc <HAL_UART_MspInit+0x74>)
 8001686:	f043 0304 	orr.w	r3, r3, #4
 800168a:	6193      	str	r3, [r2, #24]
 800168c:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <HAL_UART_MspInit+0x74>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001698:	230c      	movs	r3, #12
 800169a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2302      	movs	r3, #2
 80016a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a4:	f107 0310 	add.w	r3, r7, #16
 80016a8:	4619      	mov	r1, r3
 80016aa:	4805      	ldr	r0, [pc, #20]	; (80016c0 <HAL_UART_MspInit+0x78>)
 80016ac:	f000 fa3a 	bl	8001b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016b0:	bf00      	nop
 80016b2:	3720      	adds	r7, #32
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40004400 	.word	0x40004400
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40010800 	.word	0x40010800

080016c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <NMI_Handler+0x4>

080016ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ce:	e7fe      	b.n	80016ce <HardFault_Handler+0x4>

080016d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <MemManage_Handler+0x4>

080016d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016da:	e7fe      	b.n	80016da <BusFault_Handler+0x4>

080016dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <UsageFault_Handler+0x4>

080016e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr

080016ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr

080016fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr

08001706 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800170a:	f000 f8bd 	bl	8001888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <TIM2_IRQHandler+0x10>)
 800171a:	f001 fd3d 	bl	8003198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000180 	.word	0x20000180

08001728 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800172c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001730:	f000 fbc4 	bl	8001ebc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}

08001738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001740:	4a14      	ldr	r2, [pc, #80]	; (8001794 <_sbrk+0x5c>)
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <_sbrk+0x60>)
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800174c:	4b13      	ldr	r3, [pc, #76]	; (800179c <_sbrk+0x64>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d102      	bne.n	800175a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <_sbrk+0x64>)
 8001756:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <_sbrk+0x68>)
 8001758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <_sbrk+0x64>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	429a      	cmp	r2, r3
 8001766:	d207      	bcs.n	8001778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001768:	f002 f944 	bl	80039f4 <__errno>
 800176c:	4603      	mov	r3, r0
 800176e:	220c      	movs	r2, #12
 8001770:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
 8001776:	e009      	b.n	800178c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <_sbrk+0x64>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800177e:	4b07      	ldr	r3, [pc, #28]	; (800179c <_sbrk+0x64>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	4a05      	ldr	r2, [pc, #20]	; (800179c <_sbrk+0x64>)
 8001788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20005000 	.word	0x20005000
 8001798:	00000400 	.word	0x00000400
 800179c:	200000fc 	.word	0x200000fc
 80017a0:	20000278 	.word	0x20000278

080017a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017b0:	f7ff fff8 	bl	80017a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017b4:	480b      	ldr	r0, [pc, #44]	; (80017e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017b6:	490c      	ldr	r1, [pc, #48]	; (80017e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017b8:	4a0c      	ldr	r2, [pc, #48]	; (80017ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017bc:	e002      	b.n	80017c4 <LoopCopyDataInit>

080017be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c2:	3304      	adds	r3, #4

080017c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c8:	d3f9      	bcc.n	80017be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ca:	4a09      	ldr	r2, [pc, #36]	; (80017f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017cc:	4c09      	ldr	r4, [pc, #36]	; (80017f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d0:	e001      	b.n	80017d6 <LoopFillZerobss>

080017d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d4:	3204      	adds	r2, #4

080017d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d8:	d3fb      	bcc.n	80017d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017da:	f002 f911 	bl	8003a00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017de:	f7ff fc83 	bl	80010e8 <main>
  bx lr
 80017e2:	4770      	bx	lr
  ldr r0, =_sdata
 80017e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e8:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 80017ec:	08004408 	.word	0x08004408
  ldr r2, =_sbss
 80017f0:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 80017f4:	20000274 	.word	0x20000274

080017f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017f8:	e7fe      	b.n	80017f8 <ADC1_2_IRQHandler>
	...

080017fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <HAL_Init+0x28>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a07      	ldr	r2, [pc, #28]	; (8001824 <HAL_Init+0x28>)
 8001806:	f043 0310 	orr.w	r3, r3, #16
 800180a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800180c:	2003      	movs	r0, #3
 800180e:	f000 f947 	bl	8001aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001812:	2000      	movs	r0, #0
 8001814:	f000 f808 	bl	8001828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001818:	f7ff fe70 	bl	80014fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40022000 	.word	0x40022000

08001828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_InitTick+0x54>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_InitTick+0x58>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	4619      	mov	r1, r3
 800183a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001842:	fbb2 f3f3 	udiv	r3, r2, r3
 8001846:	4618      	mov	r0, r3
 8001848:	f000 f95f 	bl	8001b0a <HAL_SYSTICK_Config>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e00e      	b.n	8001874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b0f      	cmp	r3, #15
 800185a:	d80a      	bhi.n	8001872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800185c:	2200      	movs	r2, #0
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	f04f 30ff 	mov.w	r0, #4294967295
 8001864:	f000 f927 	bl	8001ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001868:	4a06      	ldr	r2, [pc, #24]	; (8001884 <HAL_InitTick+0x5c>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800186e:	2300      	movs	r3, #0
 8001870:	e000      	b.n	8001874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
}
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000058 	.word	0x20000058
 8001880:	20000060 	.word	0x20000060
 8001884:	2000005c 	.word	0x2000005c

08001888 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_IncTick+0x1c>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <HAL_IncTick+0x20>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4413      	add	r3, r2
 8001898:	4a03      	ldr	r2, [pc, #12]	; (80018a8 <HAL_IncTick+0x20>)
 800189a:	6013      	str	r3, [r2, #0]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr
 80018a4:	20000060 	.word	0x20000060
 80018a8:	20000260 	.word	0x20000260

080018ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return uwTick;
 80018b0:	4b02      	ldr	r3, [pc, #8]	; (80018bc <HAL_GetTick+0x10>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	20000260 	.word	0x20000260

080018c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c8:	f7ff fff0 	bl	80018ac <HAL_GetTick>
 80018cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d8:	d005      	beq.n	80018e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <HAL_Delay+0x44>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4413      	add	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018e6:	bf00      	nop
 80018e8:	f7ff ffe0 	bl	80018ac <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d8f7      	bhi.n	80018e8 <HAL_Delay+0x28>
  {
  }
}
 80018f8:	bf00      	nop
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000060 	.word	0x20000060

08001908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <__NVIC_SetPriorityGrouping+0x44>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001924:	4013      	ands	r3, r2
 8001926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800193a:	4a04      	ldr	r2, [pc, #16]	; (800194c <__NVIC_SetPriorityGrouping+0x44>)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	60d3      	str	r3, [r2, #12]
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <__NVIC_GetPriorityGrouping+0x18>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	0a1b      	lsrs	r3, r3, #8
 800195a:	f003 0307 	and.w	r3, r3, #7
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	2b00      	cmp	r3, #0
 800197c:	db0b      	blt.n	8001996 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	f003 021f 	and.w	r2, r3, #31
 8001984:	4906      	ldr	r1, [pc, #24]	; (80019a0 <__NVIC_EnableIRQ+0x34>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	095b      	lsrs	r3, r3, #5
 800198c:	2001      	movs	r0, #1
 800198e:	fa00 f202 	lsl.w	r2, r0, r2
 8001992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	e000e100 	.word	0xe000e100

080019a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	6039      	str	r1, [r7, #0]
 80019ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	db0a      	blt.n	80019ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	490c      	ldr	r1, [pc, #48]	; (80019f0 <__NVIC_SetPriority+0x4c>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	0112      	lsls	r2, r2, #4
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	440b      	add	r3, r1
 80019c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019cc:	e00a      	b.n	80019e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4908      	ldr	r1, [pc, #32]	; (80019f4 <__NVIC_SetPriority+0x50>)
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	3b04      	subs	r3, #4
 80019dc:	0112      	lsls	r2, r2, #4
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	440b      	add	r3, r1
 80019e2:	761a      	strb	r2, [r3, #24]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000e100 	.word	0xe000e100
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	; 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f1c3 0307 	rsb	r3, r3, #7
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	bf28      	it	cs
 8001a16:	2304      	movcs	r3, #4
 8001a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	2b06      	cmp	r3, #6
 8001a20:	d902      	bls.n	8001a28 <NVIC_EncodePriority+0x30>
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3b03      	subs	r3, #3
 8001a26:	e000      	b.n	8001a2a <NVIC_EncodePriority+0x32>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43da      	mvns	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a40:	f04f 31ff 	mov.w	r1, #4294967295
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	43d9      	mvns	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	4313      	orrs	r3, r2
         );
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3724      	adds	r7, #36	; 0x24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a6c:	d301      	bcc.n	8001a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00f      	b.n	8001a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <SysTick_Config+0x40>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f7ff ff90 	bl	80019a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <SysTick_Config+0x40>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8a:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <SysTick_Config+0x40>)
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	e000e010 	.word	0xe000e010

08001aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff2d 	bl	8001908 <__NVIC_SetPriorityGrouping>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac8:	f7ff ff42 	bl	8001950 <__NVIC_GetPriorityGrouping>
 8001acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f7ff ff90 	bl	80019f8 <NVIC_EncodePriority>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff5f 	bl	80019a4 <__NVIC_SetPriority>
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff35 	bl	800196c <__NVIC_EnableIRQ>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ffa2 	bl	8001a5c <SysTick_Config>
 8001b18:	4603      	mov	r3, r0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b08b      	sub	sp, #44	; 0x2c
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b32:	2300      	movs	r3, #0
 8001b34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b36:	e169      	b.n	8001e0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	69fa      	ldr	r2, [r7, #28]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	f040 8158 	bne.w	8001e06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	4a9a      	ldr	r2, [pc, #616]	; (8001dc4 <HAL_GPIO_Init+0x2a0>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d05e      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b60:	4a98      	ldr	r2, [pc, #608]	; (8001dc4 <HAL_GPIO_Init+0x2a0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d875      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b66:	4a98      	ldr	r2, [pc, #608]	; (8001dc8 <HAL_GPIO_Init+0x2a4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d058      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b6c:	4a96      	ldr	r2, [pc, #600]	; (8001dc8 <HAL_GPIO_Init+0x2a4>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d86f      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b72:	4a96      	ldr	r2, [pc, #600]	; (8001dcc <HAL_GPIO_Init+0x2a8>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d052      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b78:	4a94      	ldr	r2, [pc, #592]	; (8001dcc <HAL_GPIO_Init+0x2a8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d869      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b7e:	4a94      	ldr	r2, [pc, #592]	; (8001dd0 <HAL_GPIO_Init+0x2ac>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d04c      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b84:	4a92      	ldr	r2, [pc, #584]	; (8001dd0 <HAL_GPIO_Init+0x2ac>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d863      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b8a:	4a92      	ldr	r2, [pc, #584]	; (8001dd4 <HAL_GPIO_Init+0x2b0>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d046      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
 8001b90:	4a90      	ldr	r2, [pc, #576]	; (8001dd4 <HAL_GPIO_Init+0x2b0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d85d      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b96:	2b12      	cmp	r3, #18
 8001b98:	d82a      	bhi.n	8001bf0 <HAL_GPIO_Init+0xcc>
 8001b9a:	2b12      	cmp	r3, #18
 8001b9c:	d859      	bhi.n	8001c52 <HAL_GPIO_Init+0x12e>
 8001b9e:	a201      	add	r2, pc, #4	; (adr r2, 8001ba4 <HAL_GPIO_Init+0x80>)
 8001ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba4:	08001c1f 	.word	0x08001c1f
 8001ba8:	08001bf9 	.word	0x08001bf9
 8001bac:	08001c0b 	.word	0x08001c0b
 8001bb0:	08001c4d 	.word	0x08001c4d
 8001bb4:	08001c53 	.word	0x08001c53
 8001bb8:	08001c53 	.word	0x08001c53
 8001bbc:	08001c53 	.word	0x08001c53
 8001bc0:	08001c53 	.word	0x08001c53
 8001bc4:	08001c53 	.word	0x08001c53
 8001bc8:	08001c53 	.word	0x08001c53
 8001bcc:	08001c53 	.word	0x08001c53
 8001bd0:	08001c53 	.word	0x08001c53
 8001bd4:	08001c53 	.word	0x08001c53
 8001bd8:	08001c53 	.word	0x08001c53
 8001bdc:	08001c53 	.word	0x08001c53
 8001be0:	08001c53 	.word	0x08001c53
 8001be4:	08001c53 	.word	0x08001c53
 8001be8:	08001c01 	.word	0x08001c01
 8001bec:	08001c15 	.word	0x08001c15
 8001bf0:	4a79      	ldr	r2, [pc, #484]	; (8001dd8 <HAL_GPIO_Init+0x2b4>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d013      	beq.n	8001c1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bf6:	e02c      	b.n	8001c52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	623b      	str	r3, [r7, #32]
          break;
 8001bfe:	e029      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	3304      	adds	r3, #4
 8001c06:	623b      	str	r3, [r7, #32]
          break;
 8001c08:	e024      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	3308      	adds	r3, #8
 8001c10:	623b      	str	r3, [r7, #32]
          break;
 8001c12:	e01f      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	330c      	adds	r3, #12
 8001c1a:	623b      	str	r3, [r7, #32]
          break;
 8001c1c:	e01a      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d102      	bne.n	8001c2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c26:	2304      	movs	r3, #4
 8001c28:	623b      	str	r3, [r7, #32]
          break;
 8001c2a:	e013      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d105      	bne.n	8001c40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c34:	2308      	movs	r3, #8
 8001c36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	611a      	str	r2, [r3, #16]
          break;
 8001c3e:	e009      	b.n	8001c54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c40:	2308      	movs	r3, #8
 8001c42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69fa      	ldr	r2, [r7, #28]
 8001c48:	615a      	str	r2, [r3, #20]
          break;
 8001c4a:	e003      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	623b      	str	r3, [r7, #32]
          break;
 8001c50:	e000      	b.n	8001c54 <HAL_GPIO_Init+0x130>
          break;
 8001c52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	2bff      	cmp	r3, #255	; 0xff
 8001c58:	d801      	bhi.n	8001c5e <HAL_GPIO_Init+0x13a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	e001      	b.n	8001c62 <HAL_GPIO_Init+0x13e>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3304      	adds	r3, #4
 8001c62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	2bff      	cmp	r3, #255	; 0xff
 8001c68:	d802      	bhi.n	8001c70 <HAL_GPIO_Init+0x14c>
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	e002      	b.n	8001c76 <HAL_GPIO_Init+0x152>
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	3b08      	subs	r3, #8
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	210f      	movs	r1, #15
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	fa01 f303 	lsl.w	r3, r1, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	401a      	ands	r2, r3
 8001c88:	6a39      	ldr	r1, [r7, #32]
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c90:	431a      	orrs	r2, r3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 80b1 	beq.w	8001e06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ca4:	4b4d      	ldr	r3, [pc, #308]	; (8001ddc <HAL_GPIO_Init+0x2b8>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	4a4c      	ldr	r2, [pc, #304]	; (8001ddc <HAL_GPIO_Init+0x2b8>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6193      	str	r3, [r2, #24]
 8001cb0:	4b4a      	ldr	r3, [pc, #296]	; (8001ddc <HAL_GPIO_Init+0x2b8>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cbc:	4a48      	ldr	r2, [pc, #288]	; (8001de0 <HAL_GPIO_Init+0x2bc>)
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	089b      	lsrs	r3, r3, #2
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	220f      	movs	r2, #15
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a40      	ldr	r2, [pc, #256]	; (8001de4 <HAL_GPIO_Init+0x2c0>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d013      	beq.n	8001d10 <HAL_GPIO_Init+0x1ec>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a3f      	ldr	r2, [pc, #252]	; (8001de8 <HAL_GPIO_Init+0x2c4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d00d      	beq.n	8001d0c <HAL_GPIO_Init+0x1e8>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a3e      	ldr	r2, [pc, #248]	; (8001dec <HAL_GPIO_Init+0x2c8>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d007      	beq.n	8001d08 <HAL_GPIO_Init+0x1e4>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a3d      	ldr	r2, [pc, #244]	; (8001df0 <HAL_GPIO_Init+0x2cc>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d101      	bne.n	8001d04 <HAL_GPIO_Init+0x1e0>
 8001d00:	2303      	movs	r3, #3
 8001d02:	e006      	b.n	8001d12 <HAL_GPIO_Init+0x1ee>
 8001d04:	2304      	movs	r3, #4
 8001d06:	e004      	b.n	8001d12 <HAL_GPIO_Init+0x1ee>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e002      	b.n	8001d12 <HAL_GPIO_Init+0x1ee>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <HAL_GPIO_Init+0x1ee>
 8001d10:	2300      	movs	r3, #0
 8001d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d14:	f002 0203 	and.w	r2, r2, #3
 8001d18:	0092      	lsls	r2, r2, #2
 8001d1a:	4093      	lsls	r3, r2
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d22:	492f      	ldr	r1, [pc, #188]	; (8001de0 <HAL_GPIO_Init+0x2bc>)
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	089b      	lsrs	r3, r3, #2
 8001d28:	3302      	adds	r3, #2
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d006      	beq.n	8001d4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d3c:	4b2d      	ldr	r3, [pc, #180]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	492c      	ldr	r1, [pc, #176]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	608b      	str	r3, [r1, #8]
 8001d48:	e006      	b.n	8001d58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d4a:	4b2a      	ldr	r3, [pc, #168]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	4928      	ldr	r1, [pc, #160]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d006      	beq.n	8001d72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d64:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	4922      	ldr	r1, [pc, #136]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	60cb      	str	r3, [r1, #12]
 8001d70:	e006      	b.n	8001d80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d72:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	491e      	ldr	r1, [pc, #120]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d006      	beq.n	8001d9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d8c:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	4918      	ldr	r1, [pc, #96]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]
 8001d98:	e006      	b.n	8001da8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d9a:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	4914      	ldr	r1, [pc, #80]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d021      	beq.n	8001df8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001db4:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	490e      	ldr	r1, [pc, #56]	; (8001df4 <HAL_GPIO_Init+0x2d0>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	600b      	str	r3, [r1, #0]
 8001dc0:	e021      	b.n	8001e06 <HAL_GPIO_Init+0x2e2>
 8001dc2:	bf00      	nop
 8001dc4:	10320000 	.word	0x10320000
 8001dc8:	10310000 	.word	0x10310000
 8001dcc:	10220000 	.word	0x10220000
 8001dd0:	10210000 	.word	0x10210000
 8001dd4:	10120000 	.word	0x10120000
 8001dd8:	10110000 	.word	0x10110000
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40010000 	.word	0x40010000
 8001de4:	40010800 	.word	0x40010800
 8001de8:	40010c00 	.word	0x40010c00
 8001dec:	40011000 	.word	0x40011000
 8001df0:	40011400 	.word	0x40011400
 8001df4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <HAL_GPIO_Init+0x304>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	4909      	ldr	r1, [pc, #36]	; (8001e28 <HAL_GPIO_Init+0x304>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	3301      	adds	r3, #1
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	fa22 f303 	lsr.w	r3, r2, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f47f ae8e 	bne.w	8001b38 <HAL_GPIO_Init+0x14>
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	bf00      	nop
 8001e20:	372c      	adds	r7, #44	; 0x2c
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	40010400 	.word	0x40010400

08001e2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	887b      	ldrh	r3, [r7, #2]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d002      	beq.n	8001e4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e44:	2301      	movs	r3, #1
 8001e46:	73fb      	strb	r3, [r7, #15]
 8001e48:	e001      	b.n	8001e4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr

08001e5a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	460b      	mov	r3, r1
 8001e64:	807b      	strh	r3, [r7, #2]
 8001e66:	4613      	mov	r3, r2
 8001e68:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e6a:	787b      	ldrb	r3, [r7, #1]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e70:	887a      	ldrh	r2, [r7, #2]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e76:	e003      	b.n	8001e80 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e78:	887b      	ldrh	r3, [r7, #2]
 8001e7a:	041a      	lsls	r2, r3, #16
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	611a      	str	r2, [r3, #16]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr

08001e8a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b085      	sub	sp, #20
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	460b      	mov	r3, r1
 8001e94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e9c:	887a      	ldrh	r2, [r7, #2]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	041a      	lsls	r2, r3, #16
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	43d9      	mvns	r1, r3
 8001ea8:	887b      	ldrh	r3, [r7, #2]
 8001eaa:	400b      	ands	r3, r1
 8001eac:	431a      	orrs	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	611a      	str	r2, [r3, #16]
}
 8001eb2:	bf00      	nop
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ec8:	695a      	ldr	r2, [r3, #20]
 8001eca:	88fb      	ldrh	r3, [r7, #6]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d006      	beq.n	8001ee0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ed2:	4a05      	ldr	r2, [pc, #20]	; (8001ee8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ed4:	88fb      	ldrh	r3, [r7, #6]
 8001ed6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ed8:	88fb      	ldrh	r3, [r7, #6]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 f806 	bl	8001eec <HAL_GPIO_EXTI_Callback>
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40010400 	.word	0x40010400

08001eec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr

08001f00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e12b      	b.n	800216a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d106      	bne.n	8001f2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff fb1a 	bl	8001560 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2224      	movs	r2, #36	; 0x24
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 0201 	bic.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f64:	f001 f830 	bl	8002fc8 <HAL_RCC_GetPCLK1Freq>
 8001f68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4a81      	ldr	r2, [pc, #516]	; (8002174 <HAL_I2C_Init+0x274>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d807      	bhi.n	8001f84 <HAL_I2C_Init+0x84>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4a80      	ldr	r2, [pc, #512]	; (8002178 <HAL_I2C_Init+0x278>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	bf94      	ite	ls
 8001f7c:	2301      	movls	r3, #1
 8001f7e:	2300      	movhi	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	e006      	b.n	8001f92 <HAL_I2C_Init+0x92>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4a7d      	ldr	r2, [pc, #500]	; (800217c <HAL_I2C_Init+0x27c>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	bf94      	ite	ls
 8001f8c:	2301      	movls	r3, #1
 8001f8e:	2300      	movhi	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e0e7      	b.n	800216a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4a78      	ldr	r2, [pc, #480]	; (8002180 <HAL_I2C_Init+0x280>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	0c9b      	lsrs	r3, r3, #18
 8001fa4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	4a6a      	ldr	r2, [pc, #424]	; (8002174 <HAL_I2C_Init+0x274>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d802      	bhi.n	8001fd4 <HAL_I2C_Init+0xd4>
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	e009      	b.n	8001fe8 <HAL_I2C_Init+0xe8>
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fda:	fb02 f303 	mul.w	r3, r2, r3
 8001fde:	4a69      	ldr	r2, [pc, #420]	; (8002184 <HAL_I2C_Init+0x284>)
 8001fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe4:	099b      	lsrs	r3, r3, #6
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	430b      	orrs	r3, r1
 8001fee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ffa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	495c      	ldr	r1, [pc, #368]	; (8002174 <HAL_I2C_Init+0x274>)
 8002004:	428b      	cmp	r3, r1
 8002006:	d819      	bhi.n	800203c <HAL_I2C_Init+0x13c>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	1e59      	subs	r1, r3, #1
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	fbb1 f3f3 	udiv	r3, r1, r3
 8002016:	1c59      	adds	r1, r3, #1
 8002018:	f640 73fc 	movw	r3, #4092	; 0xffc
 800201c:	400b      	ands	r3, r1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00a      	beq.n	8002038 <HAL_I2C_Init+0x138>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	1e59      	subs	r1, r3, #1
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002030:	3301      	adds	r3, #1
 8002032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002036:	e051      	b.n	80020dc <HAL_I2C_Init+0x1dc>
 8002038:	2304      	movs	r3, #4
 800203a:	e04f      	b.n	80020dc <HAL_I2C_Init+0x1dc>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d111      	bne.n	8002068 <HAL_I2C_Init+0x168>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	1e58      	subs	r0, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6859      	ldr	r1, [r3, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	440b      	add	r3, r1
 8002052:	fbb0 f3f3 	udiv	r3, r0, r3
 8002056:	3301      	adds	r3, #1
 8002058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800205c:	2b00      	cmp	r3, #0
 800205e:	bf0c      	ite	eq
 8002060:	2301      	moveq	r3, #1
 8002062:	2300      	movne	r3, #0
 8002064:	b2db      	uxtb	r3, r3
 8002066:	e012      	b.n	800208e <HAL_I2C_Init+0x18e>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1e58      	subs	r0, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6859      	ldr	r1, [r3, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	0099      	lsls	r1, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	fbb0 f3f3 	udiv	r3, r0, r3
 800207e:	3301      	adds	r3, #1
 8002080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002084:	2b00      	cmp	r3, #0
 8002086:	bf0c      	ite	eq
 8002088:	2301      	moveq	r3, #1
 800208a:	2300      	movne	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_I2C_Init+0x196>
 8002092:	2301      	movs	r3, #1
 8002094:	e022      	b.n	80020dc <HAL_I2C_Init+0x1dc>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10e      	bne.n	80020bc <HAL_I2C_Init+0x1bc>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	1e58      	subs	r0, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6859      	ldr	r1, [r3, #4]
 80020a6:	460b      	mov	r3, r1
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	440b      	add	r3, r1
 80020ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b0:	3301      	adds	r3, #1
 80020b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ba:	e00f      	b.n	80020dc <HAL_I2C_Init+0x1dc>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	1e58      	subs	r0, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6859      	ldr	r1, [r3, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	0099      	lsls	r1, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80020d2:	3301      	adds	r3, #1
 80020d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	6809      	ldr	r1, [r1, #0]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69da      	ldr	r2, [r3, #28]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800210a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6911      	ldr	r1, [r2, #16]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68d2      	ldr	r2, [r2, #12]
 8002116:	4311      	orrs	r1, r2
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	430b      	orrs	r3, r1
 800211e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695a      	ldr	r2, [r3, #20]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2220      	movs	r2, #32
 8002156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	000186a0 	.word	0x000186a0
 8002178:	001e847f 	.word	0x001e847f
 800217c:	003d08ff 	.word	0x003d08ff
 8002180:	431bde83 	.word	0x431bde83
 8002184:	10624dd3 	.word	0x10624dd3

08002188 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af02      	add	r7, sp, #8
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	607a      	str	r2, [r7, #4]
 8002192:	461a      	mov	r2, r3
 8002194:	460b      	mov	r3, r1
 8002196:	817b      	strh	r3, [r7, #10]
 8002198:	4613      	mov	r3, r2
 800219a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800219c:	f7ff fb86 	bl	80018ac <HAL_GetTick>
 80021a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b20      	cmp	r3, #32
 80021ac:	f040 80e0 	bne.w	8002370 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	2319      	movs	r3, #25
 80021b6:	2201      	movs	r2, #1
 80021b8:	4970      	ldr	r1, [pc, #448]	; (800237c <HAL_I2C_Master_Transmit+0x1f4>)
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 f964 	bl	8002488 <I2C_WaitOnFlagUntilTimeout>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021c6:	2302      	movs	r3, #2
 80021c8:	e0d3      	b.n	8002372 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d101      	bne.n	80021d8 <HAL_I2C_Master_Transmit+0x50>
 80021d4:	2302      	movs	r3, #2
 80021d6:	e0cc      	b.n	8002372 <HAL_I2C_Master_Transmit+0x1ea>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d007      	beq.n	80021fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f042 0201 	orr.w	r2, r2, #1
 80021fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800220c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2221      	movs	r2, #33	; 0x21
 8002212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2210      	movs	r2, #16
 800221a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	893a      	ldrh	r2, [r7, #8]
 800222e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002234:	b29a      	uxth	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4a50      	ldr	r2, [pc, #320]	; (8002380 <HAL_I2C_Master_Transmit+0x1f8>)
 800223e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002240:	8979      	ldrh	r1, [r7, #10]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	6a3a      	ldr	r2, [r7, #32]
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 f89c 	bl	8002384 <I2C_MasterRequestWrite>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e08d      	b.n	8002372 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800226c:	e066      	b.n	800233c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	6a39      	ldr	r1, [r7, #32]
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 fa22 	bl	80026bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00d      	beq.n	800229a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	2b04      	cmp	r3, #4
 8002284:	d107      	bne.n	8002296 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002294:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e06b      	b.n	8002372 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	781a      	ldrb	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d11b      	bne.n	8002310 <HAL_I2C_Master_Transmit+0x188>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d017      	beq.n	8002310 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	781a      	ldrb	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	6a39      	ldr	r1, [r7, #32]
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 fa19 	bl	800274c <I2C_WaitOnBTFFlagUntilTimeout>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00d      	beq.n	800233c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	2b04      	cmp	r3, #4
 8002326:	d107      	bne.n	8002338 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002336:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e01a      	b.n	8002372 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002340:	2b00      	cmp	r3, #0
 8002342:	d194      	bne.n	800226e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002352:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	e000      	b.n	8002372 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002370:	2302      	movs	r3, #2
  }
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	00100002 	.word	0x00100002
 8002380:	ffff0000 	.word	0xffff0000

08002384 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af02      	add	r7, sp, #8
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	460b      	mov	r3, r1
 8002392:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	2b08      	cmp	r3, #8
 800239e:	d006      	beq.n	80023ae <I2C_MasterRequestWrite+0x2a>
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d003      	beq.n	80023ae <I2C_MasterRequestWrite+0x2a>
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023ac:	d108      	bne.n	80023c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	e00b      	b.n	80023d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c4:	2b12      	cmp	r3, #18
 80023c6:	d107      	bne.n	80023d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 f84f 	bl	8002488 <I2C_WaitOnFlagUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00d      	beq.n	800240c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023fe:	d103      	bne.n	8002408 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002406:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e035      	b.n	8002478 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002414:	d108      	bne.n	8002428 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002416:	897b      	ldrh	r3, [r7, #10]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	461a      	mov	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002424:	611a      	str	r2, [r3, #16]
 8002426:	e01b      	b.n	8002460 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002428:	897b      	ldrh	r3, [r7, #10]
 800242a:	11db      	asrs	r3, r3, #7
 800242c:	b2db      	uxtb	r3, r3
 800242e:	f003 0306 	and.w	r3, r3, #6
 8002432:	b2db      	uxtb	r3, r3
 8002434:	f063 030f 	orn	r3, r3, #15
 8002438:	b2da      	uxtb	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	490e      	ldr	r1, [pc, #56]	; (8002480 <I2C_MasterRequestWrite+0xfc>)
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 f898 	bl	800257c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e010      	b.n	8002478 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002456:	897b      	ldrh	r3, [r7, #10]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	4907      	ldr	r1, [pc, #28]	; (8002484 <I2C_MasterRequestWrite+0x100>)
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 f888 	bl	800257c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	00010008 	.word	0x00010008
 8002484:	00010002 	.word	0x00010002

08002488 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	603b      	str	r3, [r7, #0]
 8002494:	4613      	mov	r3, r2
 8002496:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002498:	e048      	b.n	800252c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a0:	d044      	beq.n	800252c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024a2:	f7ff fa03 	bl	80018ac <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d302      	bcc.n	80024b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d139      	bne.n	800252c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	0c1b      	lsrs	r3, r3, #16
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d10d      	bne.n	80024de <I2C_WaitOnFlagUntilTimeout+0x56>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	43da      	mvns	r2, r3
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	4013      	ands	r3, r2
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	bf0c      	ite	eq
 80024d4:	2301      	moveq	r3, #1
 80024d6:	2300      	movne	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	461a      	mov	r2, r3
 80024dc:	e00c      	b.n	80024f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	43da      	mvns	r2, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	4013      	ands	r3, r2
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	bf0c      	ite	eq
 80024f0:	2301      	moveq	r3, #1
 80024f2:	2300      	movne	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	461a      	mov	r2, r3
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d116      	bne.n	800252c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	f043 0220 	orr.w	r2, r3, #32
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e023      	b.n	8002574 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	0c1b      	lsrs	r3, r3, #16
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b01      	cmp	r3, #1
 8002534:	d10d      	bne.n	8002552 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	43da      	mvns	r2, r3
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	4013      	ands	r3, r2
 8002542:	b29b      	uxth	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	bf0c      	ite	eq
 8002548:	2301      	moveq	r3, #1
 800254a:	2300      	movne	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	461a      	mov	r2, r3
 8002550:	e00c      	b.n	800256c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	43da      	mvns	r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	4013      	ands	r3, r2
 800255e:	b29b      	uxth	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	bf0c      	ite	eq
 8002564:	2301      	moveq	r3, #1
 8002566:	2300      	movne	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	461a      	mov	r2, r3
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	429a      	cmp	r2, r3
 8002570:	d093      	beq.n	800249a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
 8002588:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800258a:	e071      	b.n	8002670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259a:	d123      	bne.n	80025e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2220      	movs	r2, #32
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	f043 0204 	orr.w	r2, r3, #4
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e067      	b.n	80026b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ea:	d041      	beq.n	8002670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ec:	f7ff f95e 	bl	80018ac <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d302      	bcc.n	8002602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d136      	bne.n	8002670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	0c1b      	lsrs	r3, r3, #16
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b01      	cmp	r3, #1
 800260a:	d10c      	bne.n	8002626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	43da      	mvns	r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	4013      	ands	r3, r2
 8002618:	b29b      	uxth	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	bf14      	ite	ne
 800261e:	2301      	movne	r3, #1
 8002620:	2300      	moveq	r3, #0
 8002622:	b2db      	uxtb	r3, r3
 8002624:	e00b      	b.n	800263e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	43da      	mvns	r2, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	4013      	ands	r3, r2
 8002632:	b29b      	uxth	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf14      	ite	ne
 8002638:	2301      	movne	r3, #1
 800263a:	2300      	moveq	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d016      	beq.n	8002670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2220      	movs	r2, #32
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	f043 0220 	orr.w	r2, r3, #32
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e021      	b.n	80026b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	0c1b      	lsrs	r3, r3, #16
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b01      	cmp	r3, #1
 8002678:	d10c      	bne.n	8002694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	43da      	mvns	r2, r3
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	4013      	ands	r3, r2
 8002686:	b29b      	uxth	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	bf14      	ite	ne
 800268c:	2301      	movne	r3, #1
 800268e:	2300      	moveq	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	e00b      	b.n	80026ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	43da      	mvns	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	4013      	ands	r3, r2
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	bf14      	ite	ne
 80026a6:	2301      	movne	r3, #1
 80026a8:	2300      	moveq	r3, #0
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f47f af6d 	bne.w	800258c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026c8:	e034      	b.n	8002734 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 f886 	bl	80027dc <I2C_IsAcknowledgeFailed>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e034      	b.n	8002744 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e0:	d028      	beq.n	8002734 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e2:	f7ff f8e3 	bl	80018ac <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d302      	bcc.n	80026f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d11d      	bne.n	8002734 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002702:	2b80      	cmp	r3, #128	; 0x80
 8002704:	d016      	beq.n	8002734 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	f043 0220 	orr.w	r2, r3, #32
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e007      	b.n	8002744 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273e:	2b80      	cmp	r3, #128	; 0x80
 8002740:	d1c3      	bne.n	80026ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002758:	e034      	b.n	80027c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 f83e 	bl	80027dc <I2C_IsAcknowledgeFailed>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e034      	b.n	80027d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002770:	d028      	beq.n	80027c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002772:	f7ff f89b 	bl	80018ac <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	429a      	cmp	r2, r3
 8002780:	d302      	bcc.n	8002788 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d11d      	bne.n	80027c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	2b04      	cmp	r3, #4
 8002794:	d016      	beq.n	80027c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	f043 0220 	orr.w	r2, r3, #32
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e007      	b.n	80027d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d1c3      	bne.n	800275a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f2:	d11b      	bne.n	800282c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	f043 0204 	orr.w	r2, r3, #4
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e26c      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 8087 	beq.w	8002966 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002858:	4b92      	ldr	r3, [pc, #584]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 030c 	and.w	r3, r3, #12
 8002860:	2b04      	cmp	r3, #4
 8002862:	d00c      	beq.n	800287e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002864:	4b8f      	ldr	r3, [pc, #572]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 030c 	and.w	r3, r3, #12
 800286c:	2b08      	cmp	r3, #8
 800286e:	d112      	bne.n	8002896 <HAL_RCC_OscConfig+0x5e>
 8002870:	4b8c      	ldr	r3, [pc, #560]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287c:	d10b      	bne.n	8002896 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800287e:	4b89      	ldr	r3, [pc, #548]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d06c      	beq.n	8002964 <HAL_RCC_OscConfig+0x12c>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d168      	bne.n	8002964 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e246      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800289e:	d106      	bne.n	80028ae <HAL_RCC_OscConfig+0x76>
 80028a0:	4b80      	ldr	r3, [pc, #512]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a7f      	ldr	r2, [pc, #508]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	e02e      	b.n	800290c <HAL_RCC_OscConfig+0xd4>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCC_OscConfig+0x98>
 80028b6:	4b7b      	ldr	r3, [pc, #492]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a7a      	ldr	r2, [pc, #488]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	4b78      	ldr	r3, [pc, #480]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a77      	ldr	r2, [pc, #476]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	e01d      	b.n	800290c <HAL_RCC_OscConfig+0xd4>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCC_OscConfig+0xbc>
 80028da:	4b72      	ldr	r3, [pc, #456]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a71      	ldr	r2, [pc, #452]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	4b6f      	ldr	r3, [pc, #444]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a6e      	ldr	r2, [pc, #440]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	e00b      	b.n	800290c <HAL_RCC_OscConfig+0xd4>
 80028f4:	4b6b      	ldr	r3, [pc, #428]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a6a      	ldr	r2, [pc, #424]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	4b68      	ldr	r3, [pc, #416]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a67      	ldr	r2, [pc, #412]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800290a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d013      	beq.n	800293c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002914:	f7fe ffca 	bl	80018ac <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800291c:	f7fe ffc6 	bl	80018ac <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b64      	cmp	r3, #100	; 0x64
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e1fa      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292e:	4b5d      	ldr	r3, [pc, #372]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0xe4>
 800293a:	e014      	b.n	8002966 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293c:	f7fe ffb6 	bl	80018ac <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002944:	f7fe ffb2 	bl	80018ac <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b64      	cmp	r3, #100	; 0x64
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e1e6      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002956:	4b53      	ldr	r3, [pc, #332]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x10c>
 8002962:	e000      	b.n	8002966 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d063      	beq.n	8002a3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002972:	4b4c      	ldr	r3, [pc, #304]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00b      	beq.n	8002996 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800297e:	4b49      	ldr	r3, [pc, #292]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b08      	cmp	r3, #8
 8002988:	d11c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x18c>
 800298a:	4b46      	ldr	r3, [pc, #280]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d116      	bne.n	80029c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002996:	4b43      	ldr	r3, [pc, #268]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d005      	beq.n	80029ae <HAL_RCC_OscConfig+0x176>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d001      	beq.n	80029ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e1ba      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ae:	4b3d      	ldr	r3, [pc, #244]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4939      	ldr	r1, [pc, #228]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c2:	e03a      	b.n	8002a3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d020      	beq.n	8002a0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029cc:	4b36      	ldr	r3, [pc, #216]	; (8002aa8 <HAL_RCC_OscConfig+0x270>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d2:	f7fe ff6b 	bl	80018ac <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029da:	f7fe ff67 	bl	80018ac <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e19b      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ec:	4b2d      	ldr	r3, [pc, #180]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f0      	beq.n	80029da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f8:	4b2a      	ldr	r3, [pc, #168]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4927      	ldr	r1, [pc, #156]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	600b      	str	r3, [r1, #0]
 8002a0c:	e015      	b.n	8002a3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a0e:	4b26      	ldr	r3, [pc, #152]	; (8002aa8 <HAL_RCC_OscConfig+0x270>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7fe ff4a 	bl	80018ac <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a1c:	f7fe ff46 	bl	80018ac <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e17a      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a2e:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d03a      	beq.n	8002abc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d019      	beq.n	8002a82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a4e:	4b17      	ldr	r3, [pc, #92]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002a50:	2201      	movs	r2, #1
 8002a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a54:	f7fe ff2a 	bl	80018ac <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a5c:	f7fe ff26 	bl	80018ac <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e15a      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a6e:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f0      	beq.n	8002a5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a7a:	2001      	movs	r0, #1
 8002a7c:	f000 facc 	bl	8003018 <RCC_Delay>
 8002a80:	e01c      	b.n	8002abc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a82:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a88:	f7fe ff10 	bl	80018ac <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a8e:	e00f      	b.n	8002ab0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a90:	f7fe ff0c 	bl	80018ac <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d908      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e140      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	42420000 	.word	0x42420000
 8002aac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab0:	4b9e      	ldr	r3, [pc, #632]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1e9      	bne.n	8002a90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80a6 	beq.w	8002c16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aca:	2300      	movs	r3, #0
 8002acc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ace:	4b97      	ldr	r3, [pc, #604]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10d      	bne.n	8002af6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ada:	4b94      	ldr	r3, [pc, #592]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	4a93      	ldr	r2, [pc, #588]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	61d3      	str	r3, [r2, #28]
 8002ae6:	4b91      	ldr	r3, [pc, #580]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af2:	2301      	movs	r3, #1
 8002af4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af6:	4b8e      	ldr	r3, [pc, #568]	; (8002d30 <HAL_RCC_OscConfig+0x4f8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d118      	bne.n	8002b34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b02:	4b8b      	ldr	r3, [pc, #556]	; (8002d30 <HAL_RCC_OscConfig+0x4f8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a8a      	ldr	r2, [pc, #552]	; (8002d30 <HAL_RCC_OscConfig+0x4f8>)
 8002b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b0e:	f7fe fecd 	bl	80018ac <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b16:	f7fe fec9 	bl	80018ac <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b64      	cmp	r3, #100	; 0x64
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e0fd      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b28:	4b81      	ldr	r3, [pc, #516]	; (8002d30 <HAL_RCC_OscConfig+0x4f8>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0f0      	beq.n	8002b16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d106      	bne.n	8002b4a <HAL_RCC_OscConfig+0x312>
 8002b3c:	4b7b      	ldr	r3, [pc, #492]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	4a7a      	ldr	r2, [pc, #488]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	6213      	str	r3, [r2, #32]
 8002b48:	e02d      	b.n	8002ba6 <HAL_RCC_OscConfig+0x36e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10c      	bne.n	8002b6c <HAL_RCC_OscConfig+0x334>
 8002b52:	4b76      	ldr	r3, [pc, #472]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	4a75      	ldr	r2, [pc, #468]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002b58:	f023 0301 	bic.w	r3, r3, #1
 8002b5c:	6213      	str	r3, [r2, #32]
 8002b5e:	4b73      	ldr	r3, [pc, #460]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	4a72      	ldr	r2, [pc, #456]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002b64:	f023 0304 	bic.w	r3, r3, #4
 8002b68:	6213      	str	r3, [r2, #32]
 8002b6a:	e01c      	b.n	8002ba6 <HAL_RCC_OscConfig+0x36e>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	2b05      	cmp	r3, #5
 8002b72:	d10c      	bne.n	8002b8e <HAL_RCC_OscConfig+0x356>
 8002b74:	4b6d      	ldr	r3, [pc, #436]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	4a6c      	ldr	r2, [pc, #432]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002b7a:	f043 0304 	orr.w	r3, r3, #4
 8002b7e:	6213      	str	r3, [r2, #32]
 8002b80:	4b6a      	ldr	r3, [pc, #424]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	4a69      	ldr	r2, [pc, #420]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	6213      	str	r3, [r2, #32]
 8002b8c:	e00b      	b.n	8002ba6 <HAL_RCC_OscConfig+0x36e>
 8002b8e:	4b67      	ldr	r3, [pc, #412]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	4a66      	ldr	r2, [pc, #408]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002b94:	f023 0301 	bic.w	r3, r3, #1
 8002b98:	6213      	str	r3, [r2, #32]
 8002b9a:	4b64      	ldr	r3, [pc, #400]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	4a63      	ldr	r2, [pc, #396]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002ba0:	f023 0304 	bic.w	r3, r3, #4
 8002ba4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d015      	beq.n	8002bda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bae:	f7fe fe7d 	bl	80018ac <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb4:	e00a      	b.n	8002bcc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb6:	f7fe fe79 	bl	80018ac <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e0ab      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bcc:	4b57      	ldr	r3, [pc, #348]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0ee      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x37e>
 8002bd8:	e014      	b.n	8002c04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bda:	f7fe fe67 	bl	80018ac <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be0:	e00a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be2:	f7fe fe63 	bl	80018ac <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e095      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf8:	4b4c      	ldr	r3, [pc, #304]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1ee      	bne.n	8002be2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c04:	7dfb      	ldrb	r3, [r7, #23]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d105      	bne.n	8002c16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0a:	4b48      	ldr	r3, [pc, #288]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	4a47      	ldr	r2, [pc, #284]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 8081 	beq.w	8002d22 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c20:	4b42      	ldr	r3, [pc, #264]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 030c 	and.w	r3, r3, #12
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d061      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d146      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c34:	4b3f      	ldr	r3, [pc, #252]	; (8002d34 <HAL_RCC_OscConfig+0x4fc>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3a:	f7fe fe37 	bl	80018ac <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c42:	f7fe fe33 	bl	80018ac <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e067      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c54:	4b35      	ldr	r3, [pc, #212]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1f0      	bne.n	8002c42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c68:	d108      	bne.n	8002c7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c6a:	4b30      	ldr	r3, [pc, #192]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	492d      	ldr	r1, [pc, #180]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c7c:	4b2b      	ldr	r3, [pc, #172]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a19      	ldr	r1, [r3, #32]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	4927      	ldr	r1, [pc, #156]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c94:	4b27      	ldr	r3, [pc, #156]	; (8002d34 <HAL_RCC_OscConfig+0x4fc>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9a:	f7fe fe07 	bl	80018ac <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca2:	f7fe fe03 	bl	80018ac <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e037      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cb4:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0f0      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x46a>
 8002cc0:	e02f      	b.n	8002d22 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc2:	4b1c      	ldr	r3, [pc, #112]	; (8002d34 <HAL_RCC_OscConfig+0x4fc>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc8:	f7fe fdf0 	bl	80018ac <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd0:	f7fe fdec 	bl	80018ac <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e020      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce2:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x498>
 8002cee:	e018      	b.n	8002d22 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e013      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <HAL_RCC_OscConfig+0x4f4>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d106      	bne.n	8002d1e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d001      	beq.n	8002d22 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	40007000 	.word	0x40007000
 8002d34:	42420060 	.word	0x42420060

08002d38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0d0      	b.n	8002eee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b6a      	ldr	r3, [pc, #424]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d910      	bls.n	8002d7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5a:	4b67      	ldr	r3, [pc, #412]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 0207 	bic.w	r2, r3, #7
 8002d62:	4965      	ldr	r1, [pc, #404]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6a:	4b63      	ldr	r3, [pc, #396]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d001      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0b8      	b.n	8002eee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d020      	beq.n	8002dca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d94:	4b59      	ldr	r3, [pc, #356]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	4a58      	ldr	r2, [pc, #352]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002d9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dac:	4b53      	ldr	r3, [pc, #332]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	4a52      	ldr	r2, [pc, #328]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002db2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002db6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db8:	4b50      	ldr	r3, [pc, #320]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	494d      	ldr	r1, [pc, #308]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d040      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d107      	bne.n	8002dee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dde:	4b47      	ldr	r3, [pc, #284]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d115      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e07f      	b.n	8002eee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d107      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df6:	4b41      	ldr	r3, [pc, #260]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e073      	b.n	8002eee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e06:	4b3d      	ldr	r3, [pc, #244]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e06b      	b.n	8002eee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e16:	4b39      	ldr	r3, [pc, #228]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f023 0203 	bic.w	r2, r3, #3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4936      	ldr	r1, [pc, #216]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e28:	f7fe fd40 	bl	80018ac <HAL_GetTick>
 8002e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2e:	e00a      	b.n	8002e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e30:	f7fe fd3c 	bl	80018ac <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e053      	b.n	8002eee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e46:	4b2d      	ldr	r3, [pc, #180]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f003 020c 	and.w	r2, r3, #12
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d1eb      	bne.n	8002e30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e58:	4b27      	ldr	r3, [pc, #156]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d210      	bcs.n	8002e88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e66:	4b24      	ldr	r3, [pc, #144]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f023 0207 	bic.w	r2, r3, #7
 8002e6e:	4922      	ldr	r1, [pc, #136]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e76:	4b20      	ldr	r3, [pc, #128]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e032      	b.n	8002eee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e94:	4b19      	ldr	r3, [pc, #100]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	4916      	ldr	r1, [pc, #88]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d009      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002eb2:	4b12      	ldr	r3, [pc, #72]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	490e      	ldr	r1, [pc, #56]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ec6:	f000 f821 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	091b      	lsrs	r3, r3, #4
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	490a      	ldr	r1, [pc, #40]	; (8002f00 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed8:	5ccb      	ldrb	r3, [r1, r3]
 8002eda:	fa22 f303 	lsr.w	r3, r2, r3
 8002ede:	4a09      	ldr	r2, [pc, #36]	; (8002f04 <HAL_RCC_ClockConfig+0x1cc>)
 8002ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <HAL_RCC_ClockConfig+0x1d0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fe fc9e 	bl	8001828 <HAL_InitTick>

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40022000 	.word	0x40022000
 8002efc:	40021000 	.word	0x40021000
 8002f00:	080043a0 	.word	0x080043a0
 8002f04:	20000058 	.word	0x20000058
 8002f08:	2000005c 	.word	0x2000005c

08002f0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	2300      	movs	r3, #0
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f26:	4b1e      	ldr	r3, [pc, #120]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d002      	beq.n	8002f3c <HAL_RCC_GetSysClockFreq+0x30>
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d003      	beq.n	8002f42 <HAL_RCC_GetSysClockFreq+0x36>
 8002f3a:	e027      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f3c:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f3e:	613b      	str	r3, [r7, #16]
      break;
 8002f40:	e027      	b.n	8002f92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	0c9b      	lsrs	r3, r3, #18
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	4a17      	ldr	r2, [pc, #92]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f4c:	5cd3      	ldrb	r3, [r2, r3]
 8002f4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d010      	beq.n	8002f7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f5a:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	0c5b      	lsrs	r3, r3, #17
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	4a11      	ldr	r2, [pc, #68]	; (8002fac <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f66:	5cd3      	ldrb	r3, [r2, r3]
 8002f68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a0d      	ldr	r2, [pc, #52]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f6e:	fb02 f203 	mul.w	r2, r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	e004      	b.n	8002f86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a0c      	ldr	r2, [pc, #48]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f80:	fb02 f303 	mul.w	r3, r2, r3
 8002f84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	613b      	str	r3, [r7, #16]
      break;
 8002f8a:	e002      	b.n	8002f92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f8e:	613b      	str	r3, [r7, #16]
      break;
 8002f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f92:	693b      	ldr	r3, [r7, #16]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	371c      	adds	r7, #28
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	007a1200 	.word	0x007a1200
 8002fa8:	080043b8 	.word	0x080043b8
 8002fac:	080043c8 	.word	0x080043c8
 8002fb0:	003d0900 	.word	0x003d0900

08002fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fb8:	4b02      	ldr	r3, [pc, #8]	; (8002fc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fba:	681b      	ldr	r3, [r3, #0]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr
 8002fc4:	20000058 	.word	0x20000058

08002fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fcc:	f7ff fff2 	bl	8002fb4 <HAL_RCC_GetHCLKFreq>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	0a1b      	lsrs	r3, r3, #8
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	4903      	ldr	r1, [pc, #12]	; (8002fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fde:	5ccb      	ldrb	r3, [r1, r3]
 8002fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	080043b0 	.word	0x080043b0

08002ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ff4:	f7ff ffde 	bl	8002fb4 <HAL_RCC_GetHCLKFreq>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	4b05      	ldr	r3, [pc, #20]	; (8003010 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	0adb      	lsrs	r3, r3, #11
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	4903      	ldr	r1, [pc, #12]	; (8003014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003006:	5ccb      	ldrb	r3, [r1, r3]
 8003008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800300c:	4618      	mov	r0, r3
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40021000 	.word	0x40021000
 8003014:	080043b0 	.word	0x080043b0

08003018 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003020:	4b0a      	ldr	r3, [pc, #40]	; (800304c <RCC_Delay+0x34>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a0a      	ldr	r2, [pc, #40]	; (8003050 <RCC_Delay+0x38>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	0a5b      	lsrs	r3, r3, #9
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	fb02 f303 	mul.w	r3, r2, r3
 8003032:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003034:	bf00      	nop
  }
  while (Delay --);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1e5a      	subs	r2, r3, #1
 800303a:	60fa      	str	r2, [r7, #12]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1f9      	bne.n	8003034 <RCC_Delay+0x1c>
}
 8003040:	bf00      	nop
 8003042:	bf00      	nop
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr
 800304c:	20000058 	.word	0x20000058
 8003050:	10624dd3 	.word	0x10624dd3

08003054 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e041      	b.n	80030ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d106      	bne.n	8003080 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7fe fac0 	bl	8001600 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3304      	adds	r3, #4
 8003090:	4619      	mov	r1, r3
 8003092:	4610      	mov	r0, r2
 8003094:	f000 fa5c 	bl	8003550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b01      	cmp	r3, #1
 8003106:	d001      	beq.n	800310c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e03a      	b.n	8003182 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a18      	ldr	r2, [pc, #96]	; (800318c <HAL_TIM_Base_Start_IT+0x98>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00e      	beq.n	800314c <HAL_TIM_Base_Start_IT+0x58>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003136:	d009      	beq.n	800314c <HAL_TIM_Base_Start_IT+0x58>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a14      	ldr	r2, [pc, #80]	; (8003190 <HAL_TIM_Base_Start_IT+0x9c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d004      	beq.n	800314c <HAL_TIM_Base_Start_IT+0x58>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a13      	ldr	r2, [pc, #76]	; (8003194 <HAL_TIM_Base_Start_IT+0xa0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d111      	bne.n	8003170 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b06      	cmp	r3, #6
 800315c:	d010      	beq.n	8003180 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0201 	orr.w	r2, r2, #1
 800316c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800316e:	e007      	b.n	8003180 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0201 	orr.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr
 800318c:	40012c00 	.word	0x40012c00
 8003190:	40000400 	.word	0x40000400
 8003194:	40000800 	.word	0x40000800

08003198 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d020      	beq.n	80031fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d01b      	beq.n	80031fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f06f 0202 	mvn.w	r2, #2
 80031cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f998 	bl	8003518 <HAL_TIM_IC_CaptureCallback>
 80031e8:	e005      	b.n	80031f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f98b 	bl	8003506 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f99a 	bl	800352a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b00      	cmp	r3, #0
 8003204:	d020      	beq.n	8003248 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	d01b      	beq.n	8003248 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f06f 0204 	mvn.w	r2, #4
 8003218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2202      	movs	r2, #2
 800321e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f972 	bl	8003518 <HAL_TIM_IC_CaptureCallback>
 8003234:	e005      	b.n	8003242 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f965 	bl	8003506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f974 	bl	800352a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d020      	beq.n	8003294 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	2b00      	cmp	r3, #0
 800325a:	d01b      	beq.n	8003294 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f06f 0208 	mvn.w	r2, #8
 8003264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2204      	movs	r2, #4
 800326a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f94c 	bl	8003518 <HAL_TIM_IC_CaptureCallback>
 8003280:	e005      	b.n	800328e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f93f 	bl	8003506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 f94e 	bl	800352a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f003 0310 	and.w	r3, r3, #16
 800329a:	2b00      	cmp	r3, #0
 800329c:	d020      	beq.n	80032e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f003 0310 	and.w	r3, r3, #16
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d01b      	beq.n	80032e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f06f 0210 	mvn.w	r2, #16
 80032b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2208      	movs	r2, #8
 80032b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f926 	bl	8003518 <HAL_TIM_IC_CaptureCallback>
 80032cc:	e005      	b.n	80032da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f919 	bl	8003506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f928 	bl	800352a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00c      	beq.n	8003304 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d007      	beq.n	8003304 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f06f 0201 	mvn.w	r2, #1
 80032fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7fe f89a 	bl	8001438 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00c      	beq.n	8003328 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003314:	2b00      	cmp	r3, #0
 8003316:	d007      	beq.n	8003328 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 fa7f 	bl	8003826 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00c      	beq.n	800334c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003338:	2b00      	cmp	r3, #0
 800333a:	d007      	beq.n	800334c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f8f8 	bl	800353c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00c      	beq.n	8003370 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b00      	cmp	r3, #0
 800335e:	d007      	beq.n	8003370 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f06f 0220 	mvn.w	r2, #32
 8003368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 fa52 	bl	8003814 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003370:	bf00      	nop
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <HAL_TIM_ConfigClockSource+0x1c>
 8003390:	2302      	movs	r3, #2
 8003392:	e0b4      	b.n	80034fe <HAL_TIM_ConfigClockSource+0x186>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033cc:	d03e      	beq.n	800344c <HAL_TIM_ConfigClockSource+0xd4>
 80033ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033d2:	f200 8087 	bhi.w	80034e4 <HAL_TIM_ConfigClockSource+0x16c>
 80033d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033da:	f000 8086 	beq.w	80034ea <HAL_TIM_ConfigClockSource+0x172>
 80033de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e2:	d87f      	bhi.n	80034e4 <HAL_TIM_ConfigClockSource+0x16c>
 80033e4:	2b70      	cmp	r3, #112	; 0x70
 80033e6:	d01a      	beq.n	800341e <HAL_TIM_ConfigClockSource+0xa6>
 80033e8:	2b70      	cmp	r3, #112	; 0x70
 80033ea:	d87b      	bhi.n	80034e4 <HAL_TIM_ConfigClockSource+0x16c>
 80033ec:	2b60      	cmp	r3, #96	; 0x60
 80033ee:	d050      	beq.n	8003492 <HAL_TIM_ConfigClockSource+0x11a>
 80033f0:	2b60      	cmp	r3, #96	; 0x60
 80033f2:	d877      	bhi.n	80034e4 <HAL_TIM_ConfigClockSource+0x16c>
 80033f4:	2b50      	cmp	r3, #80	; 0x50
 80033f6:	d03c      	beq.n	8003472 <HAL_TIM_ConfigClockSource+0xfa>
 80033f8:	2b50      	cmp	r3, #80	; 0x50
 80033fa:	d873      	bhi.n	80034e4 <HAL_TIM_ConfigClockSource+0x16c>
 80033fc:	2b40      	cmp	r3, #64	; 0x40
 80033fe:	d058      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0x13a>
 8003400:	2b40      	cmp	r3, #64	; 0x40
 8003402:	d86f      	bhi.n	80034e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003404:	2b30      	cmp	r3, #48	; 0x30
 8003406:	d064      	beq.n	80034d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003408:	2b30      	cmp	r3, #48	; 0x30
 800340a:	d86b      	bhi.n	80034e4 <HAL_TIM_ConfigClockSource+0x16c>
 800340c:	2b20      	cmp	r3, #32
 800340e:	d060      	beq.n	80034d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003410:	2b20      	cmp	r3, #32
 8003412:	d867      	bhi.n	80034e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003414:	2b00      	cmp	r3, #0
 8003416:	d05c      	beq.n	80034d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003418:	2b10      	cmp	r3, #16
 800341a:	d05a      	beq.n	80034d2 <HAL_TIM_ConfigClockSource+0x15a>
 800341c:	e062      	b.n	80034e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	6899      	ldr	r1, [r3, #8]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f000 f974 	bl	800371a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003440:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	609a      	str	r2, [r3, #8]
      break;
 800344a:	e04f      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	6899      	ldr	r1, [r3, #8]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f000 f95d 	bl	800371a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800346e:	609a      	str	r2, [r3, #8]
      break;
 8003470:	e03c      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	6859      	ldr	r1, [r3, #4]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	461a      	mov	r2, r3
 8003480:	f000 f8d4 	bl	800362c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2150      	movs	r1, #80	; 0x50
 800348a:	4618      	mov	r0, r3
 800348c:	f000 f92b 	bl	80036e6 <TIM_ITRx_SetConfig>
      break;
 8003490:	e02c      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	6859      	ldr	r1, [r3, #4]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	461a      	mov	r2, r3
 80034a0:	f000 f8f2 	bl	8003688 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2160      	movs	r1, #96	; 0x60
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 f91b 	bl	80036e6 <TIM_ITRx_SetConfig>
      break;
 80034b0:	e01c      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6818      	ldr	r0, [r3, #0]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	6859      	ldr	r1, [r3, #4]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	461a      	mov	r2, r3
 80034c0:	f000 f8b4 	bl	800362c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2140      	movs	r1, #64	; 0x40
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 f90b 	bl	80036e6 <TIM_ITRx_SetConfig>
      break;
 80034d0:	e00c      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4619      	mov	r1, r3
 80034dc:	4610      	mov	r0, r2
 80034de:	f000 f902 	bl	80036e6 <TIM_ITRx_SetConfig>
      break;
 80034e2:	e003      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	73fb      	strb	r3, [r7, #15]
      break;
 80034e8:	e000      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr

08003518 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	bc80      	pop	{r7}
 8003528:	4770      	bx	lr

0800352a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr

0800353c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr
	...

08003550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a2f      	ldr	r2, [pc, #188]	; (8003620 <TIM_Base_SetConfig+0xd0>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d00b      	beq.n	8003580 <TIM_Base_SetConfig+0x30>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800356e:	d007      	beq.n	8003580 <TIM_Base_SetConfig+0x30>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a2c      	ldr	r2, [pc, #176]	; (8003624 <TIM_Base_SetConfig+0xd4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d003      	beq.n	8003580 <TIM_Base_SetConfig+0x30>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a2b      	ldr	r2, [pc, #172]	; (8003628 <TIM_Base_SetConfig+0xd8>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d108      	bne.n	8003592 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003586:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a22      	ldr	r2, [pc, #136]	; (8003620 <TIM_Base_SetConfig+0xd0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d00b      	beq.n	80035b2 <TIM_Base_SetConfig+0x62>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a0:	d007      	beq.n	80035b2 <TIM_Base_SetConfig+0x62>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a1f      	ldr	r2, [pc, #124]	; (8003624 <TIM_Base_SetConfig+0xd4>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d003      	beq.n	80035b2 <TIM_Base_SetConfig+0x62>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a1e      	ldr	r2, [pc, #120]	; (8003628 <TIM_Base_SetConfig+0xd8>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d108      	bne.n	80035c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a0d      	ldr	r2, [pc, #52]	; (8003620 <TIM_Base_SetConfig+0xd0>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d103      	bne.n	80035f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d005      	beq.n	8003616 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	f023 0201 	bic.w	r2, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	611a      	str	r2, [r3, #16]
  }
}
 8003616:	bf00      	nop
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr
 8003620:	40012c00 	.word	0x40012c00
 8003624:	40000400 	.word	0x40000400
 8003628:	40000800 	.word	0x40000800

0800362c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	f023 0201 	bic.w	r2, r3, #1
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	4313      	orrs	r3, r2
 8003660:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f023 030a 	bic.w	r3, r3, #10
 8003668:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	4313      	orrs	r3, r2
 8003670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	621a      	str	r2, [r3, #32]
}
 800367e:	bf00      	nop
 8003680:	371c      	adds	r7, #28
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr

08003688 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	f023 0210 	bic.w	r2, r3, #16
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	031b      	lsls	r3, r3, #12
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	621a      	str	r2, [r3, #32]
}
 80036dc:	bf00      	nop
 80036de:	371c      	adds	r7, #28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr

080036e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b085      	sub	sp, #20
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4313      	orrs	r3, r2
 8003704:	f043 0307 	orr.w	r3, r3, #7
 8003708:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	609a      	str	r2, [r3, #8]
}
 8003710:	bf00      	nop
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr

0800371a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800371a:	b480      	push	{r7}
 800371c:	b087      	sub	sp, #28
 800371e:	af00      	add	r7, sp, #0
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	607a      	str	r2, [r7, #4]
 8003726:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003734:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	021a      	lsls	r2, r3, #8
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	431a      	orrs	r2, r3
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	4313      	orrs	r3, r2
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	4313      	orrs	r3, r2
 8003746:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	609a      	str	r2, [r3, #8]
}
 800374e:	bf00      	nop
 8003750:	371c      	adds	r7, #28
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr

08003758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800376c:	2302      	movs	r3, #2
 800376e:	e046      	b.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003796:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	4313      	orrs	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a16      	ldr	r2, [pc, #88]	; (8003808 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d00e      	beq.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037bc:	d009      	beq.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a12      	ldr	r2, [pc, #72]	; (800380c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d004      	beq.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a10      	ldr	r2, [pc, #64]	; (8003810 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d10c      	bne.n	80037ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr
 8003808:	40012c00 	.word	0x40012c00
 800380c:	40000400 	.word	0x40000400
 8003810:	40000800 	.word	0x40000800

08003814 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr

08003826 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr

08003838 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e042      	b.n	80038d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fd fef2 	bl	8001648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2224      	movs	r2, #36	; 0x24
 8003868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800387a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f82b 	bl	80038d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	691a      	ldr	r2, [r3, #16]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003890:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695a      	ldr	r2, [r3, #20]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	4313      	orrs	r3, r2
 8003906:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003912:	f023 030c 	bic.w	r3, r3, #12
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6812      	ldr	r2, [r2, #0]
 800391a:	68b9      	ldr	r1, [r7, #8]
 800391c:	430b      	orrs	r3, r1
 800391e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699a      	ldr	r2, [r3, #24]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a2c      	ldr	r2, [pc, #176]	; (80039ec <UART_SetConfig+0x114>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d103      	bne.n	8003948 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003940:	f7ff fb56 	bl	8002ff0 <HAL_RCC_GetPCLK2Freq>
 8003944:	60f8      	str	r0, [r7, #12]
 8003946:	e002      	b.n	800394e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003948:	f7ff fb3e 	bl	8002fc8 <HAL_RCC_GetPCLK1Freq>
 800394c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	009a      	lsls	r2, r3, #2
 8003958:	441a      	add	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	fbb2 f3f3 	udiv	r3, r2, r3
 8003964:	4a22      	ldr	r2, [pc, #136]	; (80039f0 <UART_SetConfig+0x118>)
 8003966:	fba2 2303 	umull	r2, r3, r2, r3
 800396a:	095b      	lsrs	r3, r3, #5
 800396c:	0119      	lsls	r1, r3, #4
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	009a      	lsls	r2, r3, #2
 8003978:	441a      	add	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	fbb2 f2f3 	udiv	r2, r2, r3
 8003984:	4b1a      	ldr	r3, [pc, #104]	; (80039f0 <UART_SetConfig+0x118>)
 8003986:	fba3 0302 	umull	r0, r3, r3, r2
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	2064      	movs	r0, #100	; 0x64
 800398e:	fb00 f303 	mul.w	r3, r0, r3
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	3332      	adds	r3, #50	; 0x32
 8003998:	4a15      	ldr	r2, [pc, #84]	; (80039f0 <UART_SetConfig+0x118>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	095b      	lsrs	r3, r3, #5
 80039a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039a4:	4419      	add	r1, r3
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4613      	mov	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	009a      	lsls	r2, r3, #2
 80039b0:	441a      	add	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039bc:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <UART_SetConfig+0x118>)
 80039be:	fba3 0302 	umull	r0, r3, r3, r2
 80039c2:	095b      	lsrs	r3, r3, #5
 80039c4:	2064      	movs	r0, #100	; 0x64
 80039c6:	fb00 f303 	mul.w	r3, r0, r3
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	3332      	adds	r3, #50	; 0x32
 80039d0:	4a07      	ldr	r2, [pc, #28]	; (80039f0 <UART_SetConfig+0x118>)
 80039d2:	fba2 2303 	umull	r2, r3, r2, r3
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	f003 020f 	and.w	r2, r3, #15
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	440a      	add	r2, r1
 80039e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80039e4:	bf00      	nop
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40013800 	.word	0x40013800
 80039f0:	51eb851f 	.word	0x51eb851f

080039f4 <__errno>:
 80039f4:	4b01      	ldr	r3, [pc, #4]	; (80039fc <__errno+0x8>)
 80039f6:	6818      	ldr	r0, [r3, #0]
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	20000064 	.word	0x20000064

08003a00 <__libc_init_array>:
 8003a00:	b570      	push	{r4, r5, r6, lr}
 8003a02:	2600      	movs	r6, #0
 8003a04:	4d0c      	ldr	r5, [pc, #48]	; (8003a38 <__libc_init_array+0x38>)
 8003a06:	4c0d      	ldr	r4, [pc, #52]	; (8003a3c <__libc_init_array+0x3c>)
 8003a08:	1b64      	subs	r4, r4, r5
 8003a0a:	10a4      	asrs	r4, r4, #2
 8003a0c:	42a6      	cmp	r6, r4
 8003a0e:	d109      	bne.n	8003a24 <__libc_init_array+0x24>
 8003a10:	f000 fc6c 	bl	80042ec <_init>
 8003a14:	2600      	movs	r6, #0
 8003a16:	4d0a      	ldr	r5, [pc, #40]	; (8003a40 <__libc_init_array+0x40>)
 8003a18:	4c0a      	ldr	r4, [pc, #40]	; (8003a44 <__libc_init_array+0x44>)
 8003a1a:	1b64      	subs	r4, r4, r5
 8003a1c:	10a4      	asrs	r4, r4, #2
 8003a1e:	42a6      	cmp	r6, r4
 8003a20:	d105      	bne.n	8003a2e <__libc_init_array+0x2e>
 8003a22:	bd70      	pop	{r4, r5, r6, pc}
 8003a24:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a28:	4798      	blx	r3
 8003a2a:	3601      	adds	r6, #1
 8003a2c:	e7ee      	b.n	8003a0c <__libc_init_array+0xc>
 8003a2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a32:	4798      	blx	r3
 8003a34:	3601      	adds	r6, #1
 8003a36:	e7f2      	b.n	8003a1e <__libc_init_array+0x1e>
 8003a38:	08004400 	.word	0x08004400
 8003a3c:	08004400 	.word	0x08004400
 8003a40:	08004400 	.word	0x08004400
 8003a44:	08004404 	.word	0x08004404

08003a48 <malloc>:
 8003a48:	4b02      	ldr	r3, [pc, #8]	; (8003a54 <malloc+0xc>)
 8003a4a:	4601      	mov	r1, r0
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	f000 b85f 	b.w	8003b10 <_malloc_r>
 8003a52:	bf00      	nop
 8003a54:	20000064 	.word	0x20000064

08003a58 <free>:
 8003a58:	4b02      	ldr	r3, [pc, #8]	; (8003a64 <free+0xc>)
 8003a5a:	4601      	mov	r1, r0
 8003a5c:	6818      	ldr	r0, [r3, #0]
 8003a5e:	f000 b80b 	b.w	8003a78 <_free_r>
 8003a62:	bf00      	nop
 8003a64:	20000064 	.word	0x20000064

08003a68 <memset>:
 8003a68:	4603      	mov	r3, r0
 8003a6a:	4402      	add	r2, r0
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d100      	bne.n	8003a72 <memset+0xa>
 8003a70:	4770      	bx	lr
 8003a72:	f803 1b01 	strb.w	r1, [r3], #1
 8003a76:	e7f9      	b.n	8003a6c <memset+0x4>

08003a78 <_free_r>:
 8003a78:	b538      	push	{r3, r4, r5, lr}
 8003a7a:	4605      	mov	r5, r0
 8003a7c:	2900      	cmp	r1, #0
 8003a7e:	d043      	beq.n	8003b08 <_free_r+0x90>
 8003a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a84:	1f0c      	subs	r4, r1, #4
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	bfb8      	it	lt
 8003a8a:	18e4      	addlt	r4, r4, r3
 8003a8c:	f000 f8ca 	bl	8003c24 <__malloc_lock>
 8003a90:	4a1e      	ldr	r2, [pc, #120]	; (8003b0c <_free_r+0x94>)
 8003a92:	6813      	ldr	r3, [r2, #0]
 8003a94:	4610      	mov	r0, r2
 8003a96:	b933      	cbnz	r3, 8003aa6 <_free_r+0x2e>
 8003a98:	6063      	str	r3, [r4, #4]
 8003a9a:	6014      	str	r4, [r2, #0]
 8003a9c:	4628      	mov	r0, r5
 8003a9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003aa2:	f000 b8c5 	b.w	8003c30 <__malloc_unlock>
 8003aa6:	42a3      	cmp	r3, r4
 8003aa8:	d90a      	bls.n	8003ac0 <_free_r+0x48>
 8003aaa:	6821      	ldr	r1, [r4, #0]
 8003aac:	1862      	adds	r2, r4, r1
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	bf01      	itttt	eq
 8003ab2:	681a      	ldreq	r2, [r3, #0]
 8003ab4:	685b      	ldreq	r3, [r3, #4]
 8003ab6:	1852      	addeq	r2, r2, r1
 8003ab8:	6022      	streq	r2, [r4, #0]
 8003aba:	6063      	str	r3, [r4, #4]
 8003abc:	6004      	str	r4, [r0, #0]
 8003abe:	e7ed      	b.n	8003a9c <_free_r+0x24>
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	b10b      	cbz	r3, 8003aca <_free_r+0x52>
 8003ac6:	42a3      	cmp	r3, r4
 8003ac8:	d9fa      	bls.n	8003ac0 <_free_r+0x48>
 8003aca:	6811      	ldr	r1, [r2, #0]
 8003acc:	1850      	adds	r0, r2, r1
 8003ace:	42a0      	cmp	r0, r4
 8003ad0:	d10b      	bne.n	8003aea <_free_r+0x72>
 8003ad2:	6820      	ldr	r0, [r4, #0]
 8003ad4:	4401      	add	r1, r0
 8003ad6:	1850      	adds	r0, r2, r1
 8003ad8:	4283      	cmp	r3, r0
 8003ada:	6011      	str	r1, [r2, #0]
 8003adc:	d1de      	bne.n	8003a9c <_free_r+0x24>
 8003ade:	6818      	ldr	r0, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	4401      	add	r1, r0
 8003ae4:	6011      	str	r1, [r2, #0]
 8003ae6:	6053      	str	r3, [r2, #4]
 8003ae8:	e7d8      	b.n	8003a9c <_free_r+0x24>
 8003aea:	d902      	bls.n	8003af2 <_free_r+0x7a>
 8003aec:	230c      	movs	r3, #12
 8003aee:	602b      	str	r3, [r5, #0]
 8003af0:	e7d4      	b.n	8003a9c <_free_r+0x24>
 8003af2:	6820      	ldr	r0, [r4, #0]
 8003af4:	1821      	adds	r1, r4, r0
 8003af6:	428b      	cmp	r3, r1
 8003af8:	bf01      	itttt	eq
 8003afa:	6819      	ldreq	r1, [r3, #0]
 8003afc:	685b      	ldreq	r3, [r3, #4]
 8003afe:	1809      	addeq	r1, r1, r0
 8003b00:	6021      	streq	r1, [r4, #0]
 8003b02:	6063      	str	r3, [r4, #4]
 8003b04:	6054      	str	r4, [r2, #4]
 8003b06:	e7c9      	b.n	8003a9c <_free_r+0x24>
 8003b08:	bd38      	pop	{r3, r4, r5, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20000100 	.word	0x20000100

08003b10 <_malloc_r>:
 8003b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b12:	1ccd      	adds	r5, r1, #3
 8003b14:	f025 0503 	bic.w	r5, r5, #3
 8003b18:	3508      	adds	r5, #8
 8003b1a:	2d0c      	cmp	r5, #12
 8003b1c:	bf38      	it	cc
 8003b1e:	250c      	movcc	r5, #12
 8003b20:	2d00      	cmp	r5, #0
 8003b22:	4606      	mov	r6, r0
 8003b24:	db01      	blt.n	8003b2a <_malloc_r+0x1a>
 8003b26:	42a9      	cmp	r1, r5
 8003b28:	d903      	bls.n	8003b32 <_malloc_r+0x22>
 8003b2a:	230c      	movs	r3, #12
 8003b2c:	6033      	str	r3, [r6, #0]
 8003b2e:	2000      	movs	r0, #0
 8003b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b32:	f000 f877 	bl	8003c24 <__malloc_lock>
 8003b36:	4921      	ldr	r1, [pc, #132]	; (8003bbc <_malloc_r+0xac>)
 8003b38:	680a      	ldr	r2, [r1, #0]
 8003b3a:	4614      	mov	r4, r2
 8003b3c:	b99c      	cbnz	r4, 8003b66 <_malloc_r+0x56>
 8003b3e:	4f20      	ldr	r7, [pc, #128]	; (8003bc0 <_malloc_r+0xb0>)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	b923      	cbnz	r3, 8003b4e <_malloc_r+0x3e>
 8003b44:	4621      	mov	r1, r4
 8003b46:	4630      	mov	r0, r6
 8003b48:	f000 f83c 	bl	8003bc4 <_sbrk_r>
 8003b4c:	6038      	str	r0, [r7, #0]
 8003b4e:	4629      	mov	r1, r5
 8003b50:	4630      	mov	r0, r6
 8003b52:	f000 f837 	bl	8003bc4 <_sbrk_r>
 8003b56:	1c43      	adds	r3, r0, #1
 8003b58:	d123      	bne.n	8003ba2 <_malloc_r+0x92>
 8003b5a:	230c      	movs	r3, #12
 8003b5c:	4630      	mov	r0, r6
 8003b5e:	6033      	str	r3, [r6, #0]
 8003b60:	f000 f866 	bl	8003c30 <__malloc_unlock>
 8003b64:	e7e3      	b.n	8003b2e <_malloc_r+0x1e>
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	1b5b      	subs	r3, r3, r5
 8003b6a:	d417      	bmi.n	8003b9c <_malloc_r+0x8c>
 8003b6c:	2b0b      	cmp	r3, #11
 8003b6e:	d903      	bls.n	8003b78 <_malloc_r+0x68>
 8003b70:	6023      	str	r3, [r4, #0]
 8003b72:	441c      	add	r4, r3
 8003b74:	6025      	str	r5, [r4, #0]
 8003b76:	e004      	b.n	8003b82 <_malloc_r+0x72>
 8003b78:	6863      	ldr	r3, [r4, #4]
 8003b7a:	42a2      	cmp	r2, r4
 8003b7c:	bf0c      	ite	eq
 8003b7e:	600b      	streq	r3, [r1, #0]
 8003b80:	6053      	strne	r3, [r2, #4]
 8003b82:	4630      	mov	r0, r6
 8003b84:	f000 f854 	bl	8003c30 <__malloc_unlock>
 8003b88:	f104 000b 	add.w	r0, r4, #11
 8003b8c:	1d23      	adds	r3, r4, #4
 8003b8e:	f020 0007 	bic.w	r0, r0, #7
 8003b92:	1ac2      	subs	r2, r0, r3
 8003b94:	d0cc      	beq.n	8003b30 <_malloc_r+0x20>
 8003b96:	1a1b      	subs	r3, r3, r0
 8003b98:	50a3      	str	r3, [r4, r2]
 8003b9a:	e7c9      	b.n	8003b30 <_malloc_r+0x20>
 8003b9c:	4622      	mov	r2, r4
 8003b9e:	6864      	ldr	r4, [r4, #4]
 8003ba0:	e7cc      	b.n	8003b3c <_malloc_r+0x2c>
 8003ba2:	1cc4      	adds	r4, r0, #3
 8003ba4:	f024 0403 	bic.w	r4, r4, #3
 8003ba8:	42a0      	cmp	r0, r4
 8003baa:	d0e3      	beq.n	8003b74 <_malloc_r+0x64>
 8003bac:	1a21      	subs	r1, r4, r0
 8003bae:	4630      	mov	r0, r6
 8003bb0:	f000 f808 	bl	8003bc4 <_sbrk_r>
 8003bb4:	3001      	adds	r0, #1
 8003bb6:	d1dd      	bne.n	8003b74 <_malloc_r+0x64>
 8003bb8:	e7cf      	b.n	8003b5a <_malloc_r+0x4a>
 8003bba:	bf00      	nop
 8003bbc:	20000100 	.word	0x20000100
 8003bc0:	20000104 	.word	0x20000104

08003bc4 <_sbrk_r>:
 8003bc4:	b538      	push	{r3, r4, r5, lr}
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	4d05      	ldr	r5, [pc, #20]	; (8003be0 <_sbrk_r+0x1c>)
 8003bca:	4604      	mov	r4, r0
 8003bcc:	4608      	mov	r0, r1
 8003bce:	602b      	str	r3, [r5, #0]
 8003bd0:	f7fd fdb2 	bl	8001738 <_sbrk>
 8003bd4:	1c43      	adds	r3, r0, #1
 8003bd6:	d102      	bne.n	8003bde <_sbrk_r+0x1a>
 8003bd8:	682b      	ldr	r3, [r5, #0]
 8003bda:	b103      	cbz	r3, 8003bde <_sbrk_r+0x1a>
 8003bdc:	6023      	str	r3, [r4, #0]
 8003bde:	bd38      	pop	{r3, r4, r5, pc}
 8003be0:	20000264 	.word	0x20000264

08003be4 <siprintf>:
 8003be4:	b40e      	push	{r1, r2, r3}
 8003be6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003bea:	b500      	push	{lr}
 8003bec:	b09c      	sub	sp, #112	; 0x70
 8003bee:	ab1d      	add	r3, sp, #116	; 0x74
 8003bf0:	9002      	str	r0, [sp, #8]
 8003bf2:	9006      	str	r0, [sp, #24]
 8003bf4:	9107      	str	r1, [sp, #28]
 8003bf6:	9104      	str	r1, [sp, #16]
 8003bf8:	4808      	ldr	r0, [pc, #32]	; (8003c1c <siprintf+0x38>)
 8003bfa:	4909      	ldr	r1, [pc, #36]	; (8003c20 <siprintf+0x3c>)
 8003bfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c00:	9105      	str	r1, [sp, #20]
 8003c02:	6800      	ldr	r0, [r0, #0]
 8003c04:	a902      	add	r1, sp, #8
 8003c06:	9301      	str	r3, [sp, #4]
 8003c08:	f000 f874 	bl	8003cf4 <_svfiprintf_r>
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	9b02      	ldr	r3, [sp, #8]
 8003c10:	701a      	strb	r2, [r3, #0]
 8003c12:	b01c      	add	sp, #112	; 0x70
 8003c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c18:	b003      	add	sp, #12
 8003c1a:	4770      	bx	lr
 8003c1c:	20000064 	.word	0x20000064
 8003c20:	ffff0208 	.word	0xffff0208

08003c24 <__malloc_lock>:
 8003c24:	4801      	ldr	r0, [pc, #4]	; (8003c2c <__malloc_lock+0x8>)
 8003c26:	f000 bafb 	b.w	8004220 <__retarget_lock_acquire_recursive>
 8003c2a:	bf00      	nop
 8003c2c:	2000026c 	.word	0x2000026c

08003c30 <__malloc_unlock>:
 8003c30:	4801      	ldr	r0, [pc, #4]	; (8003c38 <__malloc_unlock+0x8>)
 8003c32:	f000 baf6 	b.w	8004222 <__retarget_lock_release_recursive>
 8003c36:	bf00      	nop
 8003c38:	2000026c 	.word	0x2000026c

08003c3c <__ssputs_r>:
 8003c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c40:	688e      	ldr	r6, [r1, #8]
 8003c42:	4682      	mov	sl, r0
 8003c44:	429e      	cmp	r6, r3
 8003c46:	460c      	mov	r4, r1
 8003c48:	4690      	mov	r8, r2
 8003c4a:	461f      	mov	r7, r3
 8003c4c:	d838      	bhi.n	8003cc0 <__ssputs_r+0x84>
 8003c4e:	898a      	ldrh	r2, [r1, #12]
 8003c50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c54:	d032      	beq.n	8003cbc <__ssputs_r+0x80>
 8003c56:	6825      	ldr	r5, [r4, #0]
 8003c58:	6909      	ldr	r1, [r1, #16]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	eba5 0901 	sub.w	r9, r5, r1
 8003c60:	6965      	ldr	r5, [r4, #20]
 8003c62:	444b      	add	r3, r9
 8003c64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c6c:	106d      	asrs	r5, r5, #1
 8003c6e:	429d      	cmp	r5, r3
 8003c70:	bf38      	it	cc
 8003c72:	461d      	movcc	r5, r3
 8003c74:	0553      	lsls	r3, r2, #21
 8003c76:	d531      	bpl.n	8003cdc <__ssputs_r+0xa0>
 8003c78:	4629      	mov	r1, r5
 8003c7a:	f7ff ff49 	bl	8003b10 <_malloc_r>
 8003c7e:	4606      	mov	r6, r0
 8003c80:	b950      	cbnz	r0, 8003c98 <__ssputs_r+0x5c>
 8003c82:	230c      	movs	r3, #12
 8003c84:	f04f 30ff 	mov.w	r0, #4294967295
 8003c88:	f8ca 3000 	str.w	r3, [sl]
 8003c8c:	89a3      	ldrh	r3, [r4, #12]
 8003c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c92:	81a3      	strh	r3, [r4, #12]
 8003c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c98:	464a      	mov	r2, r9
 8003c9a:	6921      	ldr	r1, [r4, #16]
 8003c9c:	f000 fad0 	bl	8004240 <memcpy>
 8003ca0:	89a3      	ldrh	r3, [r4, #12]
 8003ca2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003caa:	81a3      	strh	r3, [r4, #12]
 8003cac:	6126      	str	r6, [r4, #16]
 8003cae:	444e      	add	r6, r9
 8003cb0:	6026      	str	r6, [r4, #0]
 8003cb2:	463e      	mov	r6, r7
 8003cb4:	6165      	str	r5, [r4, #20]
 8003cb6:	eba5 0509 	sub.w	r5, r5, r9
 8003cba:	60a5      	str	r5, [r4, #8]
 8003cbc:	42be      	cmp	r6, r7
 8003cbe:	d900      	bls.n	8003cc2 <__ssputs_r+0x86>
 8003cc0:	463e      	mov	r6, r7
 8003cc2:	4632      	mov	r2, r6
 8003cc4:	4641      	mov	r1, r8
 8003cc6:	6820      	ldr	r0, [r4, #0]
 8003cc8:	f000 fac8 	bl	800425c <memmove>
 8003ccc:	68a3      	ldr	r3, [r4, #8]
 8003cce:	6822      	ldr	r2, [r4, #0]
 8003cd0:	1b9b      	subs	r3, r3, r6
 8003cd2:	4432      	add	r2, r6
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	60a3      	str	r3, [r4, #8]
 8003cd8:	6022      	str	r2, [r4, #0]
 8003cda:	e7db      	b.n	8003c94 <__ssputs_r+0x58>
 8003cdc:	462a      	mov	r2, r5
 8003cde:	f000 fad7 	bl	8004290 <_realloc_r>
 8003ce2:	4606      	mov	r6, r0
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	d1e1      	bne.n	8003cac <__ssputs_r+0x70>
 8003ce8:	4650      	mov	r0, sl
 8003cea:	6921      	ldr	r1, [r4, #16]
 8003cec:	f7ff fec4 	bl	8003a78 <_free_r>
 8003cf0:	e7c7      	b.n	8003c82 <__ssputs_r+0x46>
	...

08003cf4 <_svfiprintf_r>:
 8003cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cf8:	4698      	mov	r8, r3
 8003cfa:	898b      	ldrh	r3, [r1, #12]
 8003cfc:	4607      	mov	r7, r0
 8003cfe:	061b      	lsls	r3, r3, #24
 8003d00:	460d      	mov	r5, r1
 8003d02:	4614      	mov	r4, r2
 8003d04:	b09d      	sub	sp, #116	; 0x74
 8003d06:	d50e      	bpl.n	8003d26 <_svfiprintf_r+0x32>
 8003d08:	690b      	ldr	r3, [r1, #16]
 8003d0a:	b963      	cbnz	r3, 8003d26 <_svfiprintf_r+0x32>
 8003d0c:	2140      	movs	r1, #64	; 0x40
 8003d0e:	f7ff feff 	bl	8003b10 <_malloc_r>
 8003d12:	6028      	str	r0, [r5, #0]
 8003d14:	6128      	str	r0, [r5, #16]
 8003d16:	b920      	cbnz	r0, 8003d22 <_svfiprintf_r+0x2e>
 8003d18:	230c      	movs	r3, #12
 8003d1a:	603b      	str	r3, [r7, #0]
 8003d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d20:	e0d1      	b.n	8003ec6 <_svfiprintf_r+0x1d2>
 8003d22:	2340      	movs	r3, #64	; 0x40
 8003d24:	616b      	str	r3, [r5, #20]
 8003d26:	2300      	movs	r3, #0
 8003d28:	9309      	str	r3, [sp, #36]	; 0x24
 8003d2a:	2320      	movs	r3, #32
 8003d2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d30:	2330      	movs	r3, #48	; 0x30
 8003d32:	f04f 0901 	mov.w	r9, #1
 8003d36:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003ee0 <_svfiprintf_r+0x1ec>
 8003d3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d42:	4623      	mov	r3, r4
 8003d44:	469a      	mov	sl, r3
 8003d46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d4a:	b10a      	cbz	r2, 8003d50 <_svfiprintf_r+0x5c>
 8003d4c:	2a25      	cmp	r2, #37	; 0x25
 8003d4e:	d1f9      	bne.n	8003d44 <_svfiprintf_r+0x50>
 8003d50:	ebba 0b04 	subs.w	fp, sl, r4
 8003d54:	d00b      	beq.n	8003d6e <_svfiprintf_r+0x7a>
 8003d56:	465b      	mov	r3, fp
 8003d58:	4622      	mov	r2, r4
 8003d5a:	4629      	mov	r1, r5
 8003d5c:	4638      	mov	r0, r7
 8003d5e:	f7ff ff6d 	bl	8003c3c <__ssputs_r>
 8003d62:	3001      	adds	r0, #1
 8003d64:	f000 80aa 	beq.w	8003ebc <_svfiprintf_r+0x1c8>
 8003d68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d6a:	445a      	add	r2, fp
 8003d6c:	9209      	str	r2, [sp, #36]	; 0x24
 8003d6e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 80a2 	beq.w	8003ebc <_svfiprintf_r+0x1c8>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d82:	f10a 0a01 	add.w	sl, sl, #1
 8003d86:	9304      	str	r3, [sp, #16]
 8003d88:	9307      	str	r3, [sp, #28]
 8003d8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d8e:	931a      	str	r3, [sp, #104]	; 0x68
 8003d90:	4654      	mov	r4, sl
 8003d92:	2205      	movs	r2, #5
 8003d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d98:	4851      	ldr	r0, [pc, #324]	; (8003ee0 <_svfiprintf_r+0x1ec>)
 8003d9a:	f000 fa43 	bl	8004224 <memchr>
 8003d9e:	9a04      	ldr	r2, [sp, #16]
 8003da0:	b9d8      	cbnz	r0, 8003dda <_svfiprintf_r+0xe6>
 8003da2:	06d0      	lsls	r0, r2, #27
 8003da4:	bf44      	itt	mi
 8003da6:	2320      	movmi	r3, #32
 8003da8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dac:	0711      	lsls	r1, r2, #28
 8003dae:	bf44      	itt	mi
 8003db0:	232b      	movmi	r3, #43	; 0x2b
 8003db2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003db6:	f89a 3000 	ldrb.w	r3, [sl]
 8003dba:	2b2a      	cmp	r3, #42	; 0x2a
 8003dbc:	d015      	beq.n	8003dea <_svfiprintf_r+0xf6>
 8003dbe:	4654      	mov	r4, sl
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	f04f 0c0a 	mov.w	ip, #10
 8003dc6:	9a07      	ldr	r2, [sp, #28]
 8003dc8:	4621      	mov	r1, r4
 8003dca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dce:	3b30      	subs	r3, #48	; 0x30
 8003dd0:	2b09      	cmp	r3, #9
 8003dd2:	d94e      	bls.n	8003e72 <_svfiprintf_r+0x17e>
 8003dd4:	b1b0      	cbz	r0, 8003e04 <_svfiprintf_r+0x110>
 8003dd6:	9207      	str	r2, [sp, #28]
 8003dd8:	e014      	b.n	8003e04 <_svfiprintf_r+0x110>
 8003dda:	eba0 0308 	sub.w	r3, r0, r8
 8003dde:	fa09 f303 	lsl.w	r3, r9, r3
 8003de2:	4313      	orrs	r3, r2
 8003de4:	46a2      	mov	sl, r4
 8003de6:	9304      	str	r3, [sp, #16]
 8003de8:	e7d2      	b.n	8003d90 <_svfiprintf_r+0x9c>
 8003dea:	9b03      	ldr	r3, [sp, #12]
 8003dec:	1d19      	adds	r1, r3, #4
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	9103      	str	r1, [sp, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	bfbb      	ittet	lt
 8003df6:	425b      	neglt	r3, r3
 8003df8:	f042 0202 	orrlt.w	r2, r2, #2
 8003dfc:	9307      	strge	r3, [sp, #28]
 8003dfe:	9307      	strlt	r3, [sp, #28]
 8003e00:	bfb8      	it	lt
 8003e02:	9204      	strlt	r2, [sp, #16]
 8003e04:	7823      	ldrb	r3, [r4, #0]
 8003e06:	2b2e      	cmp	r3, #46	; 0x2e
 8003e08:	d10c      	bne.n	8003e24 <_svfiprintf_r+0x130>
 8003e0a:	7863      	ldrb	r3, [r4, #1]
 8003e0c:	2b2a      	cmp	r3, #42	; 0x2a
 8003e0e:	d135      	bne.n	8003e7c <_svfiprintf_r+0x188>
 8003e10:	9b03      	ldr	r3, [sp, #12]
 8003e12:	3402      	adds	r4, #2
 8003e14:	1d1a      	adds	r2, r3, #4
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	9203      	str	r2, [sp, #12]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	bfb8      	it	lt
 8003e1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e22:	9305      	str	r3, [sp, #20]
 8003e24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ef0 <_svfiprintf_r+0x1fc>
 8003e28:	2203      	movs	r2, #3
 8003e2a:	4650      	mov	r0, sl
 8003e2c:	7821      	ldrb	r1, [r4, #0]
 8003e2e:	f000 f9f9 	bl	8004224 <memchr>
 8003e32:	b140      	cbz	r0, 8003e46 <_svfiprintf_r+0x152>
 8003e34:	2340      	movs	r3, #64	; 0x40
 8003e36:	eba0 000a 	sub.w	r0, r0, sl
 8003e3a:	fa03 f000 	lsl.w	r0, r3, r0
 8003e3e:	9b04      	ldr	r3, [sp, #16]
 8003e40:	3401      	adds	r4, #1
 8003e42:	4303      	orrs	r3, r0
 8003e44:	9304      	str	r3, [sp, #16]
 8003e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e4a:	2206      	movs	r2, #6
 8003e4c:	4825      	ldr	r0, [pc, #148]	; (8003ee4 <_svfiprintf_r+0x1f0>)
 8003e4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e52:	f000 f9e7 	bl	8004224 <memchr>
 8003e56:	2800      	cmp	r0, #0
 8003e58:	d038      	beq.n	8003ecc <_svfiprintf_r+0x1d8>
 8003e5a:	4b23      	ldr	r3, [pc, #140]	; (8003ee8 <_svfiprintf_r+0x1f4>)
 8003e5c:	bb1b      	cbnz	r3, 8003ea6 <_svfiprintf_r+0x1b2>
 8003e5e:	9b03      	ldr	r3, [sp, #12]
 8003e60:	3307      	adds	r3, #7
 8003e62:	f023 0307 	bic.w	r3, r3, #7
 8003e66:	3308      	adds	r3, #8
 8003e68:	9303      	str	r3, [sp, #12]
 8003e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e6c:	4433      	add	r3, r6
 8003e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e70:	e767      	b.n	8003d42 <_svfiprintf_r+0x4e>
 8003e72:	460c      	mov	r4, r1
 8003e74:	2001      	movs	r0, #1
 8003e76:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e7a:	e7a5      	b.n	8003dc8 <_svfiprintf_r+0xd4>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f04f 0c0a 	mov.w	ip, #10
 8003e82:	4619      	mov	r1, r3
 8003e84:	3401      	adds	r4, #1
 8003e86:	9305      	str	r3, [sp, #20]
 8003e88:	4620      	mov	r0, r4
 8003e8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e8e:	3a30      	subs	r2, #48	; 0x30
 8003e90:	2a09      	cmp	r2, #9
 8003e92:	d903      	bls.n	8003e9c <_svfiprintf_r+0x1a8>
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0c5      	beq.n	8003e24 <_svfiprintf_r+0x130>
 8003e98:	9105      	str	r1, [sp, #20]
 8003e9a:	e7c3      	b.n	8003e24 <_svfiprintf_r+0x130>
 8003e9c:	4604      	mov	r4, r0
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ea4:	e7f0      	b.n	8003e88 <_svfiprintf_r+0x194>
 8003ea6:	ab03      	add	r3, sp, #12
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	462a      	mov	r2, r5
 8003eac:	4638      	mov	r0, r7
 8003eae:	4b0f      	ldr	r3, [pc, #60]	; (8003eec <_svfiprintf_r+0x1f8>)
 8003eb0:	a904      	add	r1, sp, #16
 8003eb2:	f3af 8000 	nop.w
 8003eb6:	1c42      	adds	r2, r0, #1
 8003eb8:	4606      	mov	r6, r0
 8003eba:	d1d6      	bne.n	8003e6a <_svfiprintf_r+0x176>
 8003ebc:	89ab      	ldrh	r3, [r5, #12]
 8003ebe:	065b      	lsls	r3, r3, #25
 8003ec0:	f53f af2c 	bmi.w	8003d1c <_svfiprintf_r+0x28>
 8003ec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ec6:	b01d      	add	sp, #116	; 0x74
 8003ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ecc:	ab03      	add	r3, sp, #12
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	462a      	mov	r2, r5
 8003ed2:	4638      	mov	r0, r7
 8003ed4:	4b05      	ldr	r3, [pc, #20]	; (8003eec <_svfiprintf_r+0x1f8>)
 8003ed6:	a904      	add	r1, sp, #16
 8003ed8:	f000 f87c 	bl	8003fd4 <_printf_i>
 8003edc:	e7eb      	b.n	8003eb6 <_svfiprintf_r+0x1c2>
 8003ede:	bf00      	nop
 8003ee0:	080043ca 	.word	0x080043ca
 8003ee4:	080043d4 	.word	0x080043d4
 8003ee8:	00000000 	.word	0x00000000
 8003eec:	08003c3d 	.word	0x08003c3d
 8003ef0:	080043d0 	.word	0x080043d0

08003ef4 <_printf_common>:
 8003ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef8:	4616      	mov	r6, r2
 8003efa:	4699      	mov	r9, r3
 8003efc:	688a      	ldr	r2, [r1, #8]
 8003efe:	690b      	ldr	r3, [r1, #16]
 8003f00:	4607      	mov	r7, r0
 8003f02:	4293      	cmp	r3, r2
 8003f04:	bfb8      	it	lt
 8003f06:	4613      	movlt	r3, r2
 8003f08:	6033      	str	r3, [r6, #0]
 8003f0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f0e:	460c      	mov	r4, r1
 8003f10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f14:	b10a      	cbz	r2, 8003f1a <_printf_common+0x26>
 8003f16:	3301      	adds	r3, #1
 8003f18:	6033      	str	r3, [r6, #0]
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	0699      	lsls	r1, r3, #26
 8003f1e:	bf42      	ittt	mi
 8003f20:	6833      	ldrmi	r3, [r6, #0]
 8003f22:	3302      	addmi	r3, #2
 8003f24:	6033      	strmi	r3, [r6, #0]
 8003f26:	6825      	ldr	r5, [r4, #0]
 8003f28:	f015 0506 	ands.w	r5, r5, #6
 8003f2c:	d106      	bne.n	8003f3c <_printf_common+0x48>
 8003f2e:	f104 0a19 	add.w	sl, r4, #25
 8003f32:	68e3      	ldr	r3, [r4, #12]
 8003f34:	6832      	ldr	r2, [r6, #0]
 8003f36:	1a9b      	subs	r3, r3, r2
 8003f38:	42ab      	cmp	r3, r5
 8003f3a:	dc28      	bgt.n	8003f8e <_printf_common+0x9a>
 8003f3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f40:	1e13      	subs	r3, r2, #0
 8003f42:	6822      	ldr	r2, [r4, #0]
 8003f44:	bf18      	it	ne
 8003f46:	2301      	movne	r3, #1
 8003f48:	0692      	lsls	r2, r2, #26
 8003f4a:	d42d      	bmi.n	8003fa8 <_printf_common+0xb4>
 8003f4c:	4649      	mov	r1, r9
 8003f4e:	4638      	mov	r0, r7
 8003f50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f54:	47c0      	blx	r8
 8003f56:	3001      	adds	r0, #1
 8003f58:	d020      	beq.n	8003f9c <_printf_common+0xa8>
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	68e5      	ldr	r5, [r4, #12]
 8003f5e:	f003 0306 	and.w	r3, r3, #6
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	bf18      	it	ne
 8003f66:	2500      	movne	r5, #0
 8003f68:	6832      	ldr	r2, [r6, #0]
 8003f6a:	f04f 0600 	mov.w	r6, #0
 8003f6e:	68a3      	ldr	r3, [r4, #8]
 8003f70:	bf08      	it	eq
 8003f72:	1aad      	subeq	r5, r5, r2
 8003f74:	6922      	ldr	r2, [r4, #16]
 8003f76:	bf08      	it	eq
 8003f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	bfc4      	itt	gt
 8003f80:	1a9b      	subgt	r3, r3, r2
 8003f82:	18ed      	addgt	r5, r5, r3
 8003f84:	341a      	adds	r4, #26
 8003f86:	42b5      	cmp	r5, r6
 8003f88:	d11a      	bne.n	8003fc0 <_printf_common+0xcc>
 8003f8a:	2000      	movs	r0, #0
 8003f8c:	e008      	b.n	8003fa0 <_printf_common+0xac>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	4652      	mov	r2, sl
 8003f92:	4649      	mov	r1, r9
 8003f94:	4638      	mov	r0, r7
 8003f96:	47c0      	blx	r8
 8003f98:	3001      	adds	r0, #1
 8003f9a:	d103      	bne.n	8003fa4 <_printf_common+0xb0>
 8003f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fa4:	3501      	adds	r5, #1
 8003fa6:	e7c4      	b.n	8003f32 <_printf_common+0x3e>
 8003fa8:	2030      	movs	r0, #48	; 0x30
 8003faa:	18e1      	adds	r1, r4, r3
 8003fac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fb6:	4422      	add	r2, r4
 8003fb8:	3302      	adds	r3, #2
 8003fba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fbe:	e7c5      	b.n	8003f4c <_printf_common+0x58>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	4622      	mov	r2, r4
 8003fc4:	4649      	mov	r1, r9
 8003fc6:	4638      	mov	r0, r7
 8003fc8:	47c0      	blx	r8
 8003fca:	3001      	adds	r0, #1
 8003fcc:	d0e6      	beq.n	8003f9c <_printf_common+0xa8>
 8003fce:	3601      	adds	r6, #1
 8003fd0:	e7d9      	b.n	8003f86 <_printf_common+0x92>
	...

08003fd4 <_printf_i>:
 8003fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fd8:	460c      	mov	r4, r1
 8003fda:	7e27      	ldrb	r7, [r4, #24]
 8003fdc:	4691      	mov	r9, r2
 8003fde:	2f78      	cmp	r7, #120	; 0x78
 8003fe0:	4680      	mov	r8, r0
 8003fe2:	469a      	mov	sl, r3
 8003fe4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003fe6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fea:	d807      	bhi.n	8003ffc <_printf_i+0x28>
 8003fec:	2f62      	cmp	r7, #98	; 0x62
 8003fee:	d80a      	bhi.n	8004006 <_printf_i+0x32>
 8003ff0:	2f00      	cmp	r7, #0
 8003ff2:	f000 80d9 	beq.w	80041a8 <_printf_i+0x1d4>
 8003ff6:	2f58      	cmp	r7, #88	; 0x58
 8003ff8:	f000 80a4 	beq.w	8004144 <_printf_i+0x170>
 8003ffc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004000:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004004:	e03a      	b.n	800407c <_printf_i+0xa8>
 8004006:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800400a:	2b15      	cmp	r3, #21
 800400c:	d8f6      	bhi.n	8003ffc <_printf_i+0x28>
 800400e:	a001      	add	r0, pc, #4	; (adr r0, 8004014 <_printf_i+0x40>)
 8004010:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004014:	0800406d 	.word	0x0800406d
 8004018:	08004081 	.word	0x08004081
 800401c:	08003ffd 	.word	0x08003ffd
 8004020:	08003ffd 	.word	0x08003ffd
 8004024:	08003ffd 	.word	0x08003ffd
 8004028:	08003ffd 	.word	0x08003ffd
 800402c:	08004081 	.word	0x08004081
 8004030:	08003ffd 	.word	0x08003ffd
 8004034:	08003ffd 	.word	0x08003ffd
 8004038:	08003ffd 	.word	0x08003ffd
 800403c:	08003ffd 	.word	0x08003ffd
 8004040:	0800418f 	.word	0x0800418f
 8004044:	080040b1 	.word	0x080040b1
 8004048:	08004171 	.word	0x08004171
 800404c:	08003ffd 	.word	0x08003ffd
 8004050:	08003ffd 	.word	0x08003ffd
 8004054:	080041b1 	.word	0x080041b1
 8004058:	08003ffd 	.word	0x08003ffd
 800405c:	080040b1 	.word	0x080040b1
 8004060:	08003ffd 	.word	0x08003ffd
 8004064:	08003ffd 	.word	0x08003ffd
 8004068:	08004179 	.word	0x08004179
 800406c:	680b      	ldr	r3, [r1, #0]
 800406e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004072:	1d1a      	adds	r2, r3, #4
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	600a      	str	r2, [r1, #0]
 8004078:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800407c:	2301      	movs	r3, #1
 800407e:	e0a4      	b.n	80041ca <_printf_i+0x1f6>
 8004080:	6825      	ldr	r5, [r4, #0]
 8004082:	6808      	ldr	r0, [r1, #0]
 8004084:	062e      	lsls	r6, r5, #24
 8004086:	f100 0304 	add.w	r3, r0, #4
 800408a:	d50a      	bpl.n	80040a2 <_printf_i+0xce>
 800408c:	6805      	ldr	r5, [r0, #0]
 800408e:	600b      	str	r3, [r1, #0]
 8004090:	2d00      	cmp	r5, #0
 8004092:	da03      	bge.n	800409c <_printf_i+0xc8>
 8004094:	232d      	movs	r3, #45	; 0x2d
 8004096:	426d      	negs	r5, r5
 8004098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800409c:	230a      	movs	r3, #10
 800409e:	485e      	ldr	r0, [pc, #376]	; (8004218 <_printf_i+0x244>)
 80040a0:	e019      	b.n	80040d6 <_printf_i+0x102>
 80040a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80040a6:	6805      	ldr	r5, [r0, #0]
 80040a8:	600b      	str	r3, [r1, #0]
 80040aa:	bf18      	it	ne
 80040ac:	b22d      	sxthne	r5, r5
 80040ae:	e7ef      	b.n	8004090 <_printf_i+0xbc>
 80040b0:	680b      	ldr	r3, [r1, #0]
 80040b2:	6825      	ldr	r5, [r4, #0]
 80040b4:	1d18      	adds	r0, r3, #4
 80040b6:	6008      	str	r0, [r1, #0]
 80040b8:	0628      	lsls	r0, r5, #24
 80040ba:	d501      	bpl.n	80040c0 <_printf_i+0xec>
 80040bc:	681d      	ldr	r5, [r3, #0]
 80040be:	e002      	b.n	80040c6 <_printf_i+0xf2>
 80040c0:	0669      	lsls	r1, r5, #25
 80040c2:	d5fb      	bpl.n	80040bc <_printf_i+0xe8>
 80040c4:	881d      	ldrh	r5, [r3, #0]
 80040c6:	2f6f      	cmp	r7, #111	; 0x6f
 80040c8:	bf0c      	ite	eq
 80040ca:	2308      	moveq	r3, #8
 80040cc:	230a      	movne	r3, #10
 80040ce:	4852      	ldr	r0, [pc, #328]	; (8004218 <_printf_i+0x244>)
 80040d0:	2100      	movs	r1, #0
 80040d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040d6:	6866      	ldr	r6, [r4, #4]
 80040d8:	2e00      	cmp	r6, #0
 80040da:	bfa8      	it	ge
 80040dc:	6821      	ldrge	r1, [r4, #0]
 80040de:	60a6      	str	r6, [r4, #8]
 80040e0:	bfa4      	itt	ge
 80040e2:	f021 0104 	bicge.w	r1, r1, #4
 80040e6:	6021      	strge	r1, [r4, #0]
 80040e8:	b90d      	cbnz	r5, 80040ee <_printf_i+0x11a>
 80040ea:	2e00      	cmp	r6, #0
 80040ec:	d04d      	beq.n	800418a <_printf_i+0x1b6>
 80040ee:	4616      	mov	r6, r2
 80040f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80040f4:	fb03 5711 	mls	r7, r3, r1, r5
 80040f8:	5dc7      	ldrb	r7, [r0, r7]
 80040fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040fe:	462f      	mov	r7, r5
 8004100:	42bb      	cmp	r3, r7
 8004102:	460d      	mov	r5, r1
 8004104:	d9f4      	bls.n	80040f0 <_printf_i+0x11c>
 8004106:	2b08      	cmp	r3, #8
 8004108:	d10b      	bne.n	8004122 <_printf_i+0x14e>
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	07df      	lsls	r7, r3, #31
 800410e:	d508      	bpl.n	8004122 <_printf_i+0x14e>
 8004110:	6923      	ldr	r3, [r4, #16]
 8004112:	6861      	ldr	r1, [r4, #4]
 8004114:	4299      	cmp	r1, r3
 8004116:	bfde      	ittt	le
 8004118:	2330      	movle	r3, #48	; 0x30
 800411a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800411e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004122:	1b92      	subs	r2, r2, r6
 8004124:	6122      	str	r2, [r4, #16]
 8004126:	464b      	mov	r3, r9
 8004128:	4621      	mov	r1, r4
 800412a:	4640      	mov	r0, r8
 800412c:	f8cd a000 	str.w	sl, [sp]
 8004130:	aa03      	add	r2, sp, #12
 8004132:	f7ff fedf 	bl	8003ef4 <_printf_common>
 8004136:	3001      	adds	r0, #1
 8004138:	d14c      	bne.n	80041d4 <_printf_i+0x200>
 800413a:	f04f 30ff 	mov.w	r0, #4294967295
 800413e:	b004      	add	sp, #16
 8004140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004144:	4834      	ldr	r0, [pc, #208]	; (8004218 <_printf_i+0x244>)
 8004146:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800414a:	680e      	ldr	r6, [r1, #0]
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004152:	061f      	lsls	r7, r3, #24
 8004154:	600e      	str	r6, [r1, #0]
 8004156:	d514      	bpl.n	8004182 <_printf_i+0x1ae>
 8004158:	07d9      	lsls	r1, r3, #31
 800415a:	bf44      	itt	mi
 800415c:	f043 0320 	orrmi.w	r3, r3, #32
 8004160:	6023      	strmi	r3, [r4, #0]
 8004162:	b91d      	cbnz	r5, 800416c <_printf_i+0x198>
 8004164:	6823      	ldr	r3, [r4, #0]
 8004166:	f023 0320 	bic.w	r3, r3, #32
 800416a:	6023      	str	r3, [r4, #0]
 800416c:	2310      	movs	r3, #16
 800416e:	e7af      	b.n	80040d0 <_printf_i+0xfc>
 8004170:	6823      	ldr	r3, [r4, #0]
 8004172:	f043 0320 	orr.w	r3, r3, #32
 8004176:	6023      	str	r3, [r4, #0]
 8004178:	2378      	movs	r3, #120	; 0x78
 800417a:	4828      	ldr	r0, [pc, #160]	; (800421c <_printf_i+0x248>)
 800417c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004180:	e7e3      	b.n	800414a <_printf_i+0x176>
 8004182:	065e      	lsls	r6, r3, #25
 8004184:	bf48      	it	mi
 8004186:	b2ad      	uxthmi	r5, r5
 8004188:	e7e6      	b.n	8004158 <_printf_i+0x184>
 800418a:	4616      	mov	r6, r2
 800418c:	e7bb      	b.n	8004106 <_printf_i+0x132>
 800418e:	680b      	ldr	r3, [r1, #0]
 8004190:	6826      	ldr	r6, [r4, #0]
 8004192:	1d1d      	adds	r5, r3, #4
 8004194:	6960      	ldr	r0, [r4, #20]
 8004196:	600d      	str	r5, [r1, #0]
 8004198:	0635      	lsls	r5, r6, #24
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	d501      	bpl.n	80041a2 <_printf_i+0x1ce>
 800419e:	6018      	str	r0, [r3, #0]
 80041a0:	e002      	b.n	80041a8 <_printf_i+0x1d4>
 80041a2:	0671      	lsls	r1, r6, #25
 80041a4:	d5fb      	bpl.n	800419e <_printf_i+0x1ca>
 80041a6:	8018      	strh	r0, [r3, #0]
 80041a8:	2300      	movs	r3, #0
 80041aa:	4616      	mov	r6, r2
 80041ac:	6123      	str	r3, [r4, #16]
 80041ae:	e7ba      	b.n	8004126 <_printf_i+0x152>
 80041b0:	680b      	ldr	r3, [r1, #0]
 80041b2:	1d1a      	adds	r2, r3, #4
 80041b4:	600a      	str	r2, [r1, #0]
 80041b6:	681e      	ldr	r6, [r3, #0]
 80041b8:	2100      	movs	r1, #0
 80041ba:	4630      	mov	r0, r6
 80041bc:	6862      	ldr	r2, [r4, #4]
 80041be:	f000 f831 	bl	8004224 <memchr>
 80041c2:	b108      	cbz	r0, 80041c8 <_printf_i+0x1f4>
 80041c4:	1b80      	subs	r0, r0, r6
 80041c6:	6060      	str	r0, [r4, #4]
 80041c8:	6863      	ldr	r3, [r4, #4]
 80041ca:	6123      	str	r3, [r4, #16]
 80041cc:	2300      	movs	r3, #0
 80041ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041d2:	e7a8      	b.n	8004126 <_printf_i+0x152>
 80041d4:	4632      	mov	r2, r6
 80041d6:	4649      	mov	r1, r9
 80041d8:	4640      	mov	r0, r8
 80041da:	6923      	ldr	r3, [r4, #16]
 80041dc:	47d0      	blx	sl
 80041de:	3001      	adds	r0, #1
 80041e0:	d0ab      	beq.n	800413a <_printf_i+0x166>
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	079b      	lsls	r3, r3, #30
 80041e6:	d413      	bmi.n	8004210 <_printf_i+0x23c>
 80041e8:	68e0      	ldr	r0, [r4, #12]
 80041ea:	9b03      	ldr	r3, [sp, #12]
 80041ec:	4298      	cmp	r0, r3
 80041ee:	bfb8      	it	lt
 80041f0:	4618      	movlt	r0, r3
 80041f2:	e7a4      	b.n	800413e <_printf_i+0x16a>
 80041f4:	2301      	movs	r3, #1
 80041f6:	4632      	mov	r2, r6
 80041f8:	4649      	mov	r1, r9
 80041fa:	4640      	mov	r0, r8
 80041fc:	47d0      	blx	sl
 80041fe:	3001      	adds	r0, #1
 8004200:	d09b      	beq.n	800413a <_printf_i+0x166>
 8004202:	3501      	adds	r5, #1
 8004204:	68e3      	ldr	r3, [r4, #12]
 8004206:	9903      	ldr	r1, [sp, #12]
 8004208:	1a5b      	subs	r3, r3, r1
 800420a:	42ab      	cmp	r3, r5
 800420c:	dcf2      	bgt.n	80041f4 <_printf_i+0x220>
 800420e:	e7eb      	b.n	80041e8 <_printf_i+0x214>
 8004210:	2500      	movs	r5, #0
 8004212:	f104 0619 	add.w	r6, r4, #25
 8004216:	e7f5      	b.n	8004204 <_printf_i+0x230>
 8004218:	080043db 	.word	0x080043db
 800421c:	080043ec 	.word	0x080043ec

08004220 <__retarget_lock_acquire_recursive>:
 8004220:	4770      	bx	lr

08004222 <__retarget_lock_release_recursive>:
 8004222:	4770      	bx	lr

08004224 <memchr>:
 8004224:	4603      	mov	r3, r0
 8004226:	b510      	push	{r4, lr}
 8004228:	b2c9      	uxtb	r1, r1
 800422a:	4402      	add	r2, r0
 800422c:	4293      	cmp	r3, r2
 800422e:	4618      	mov	r0, r3
 8004230:	d101      	bne.n	8004236 <memchr+0x12>
 8004232:	2000      	movs	r0, #0
 8004234:	e003      	b.n	800423e <memchr+0x1a>
 8004236:	7804      	ldrb	r4, [r0, #0]
 8004238:	3301      	adds	r3, #1
 800423a:	428c      	cmp	r4, r1
 800423c:	d1f6      	bne.n	800422c <memchr+0x8>
 800423e:	bd10      	pop	{r4, pc}

08004240 <memcpy>:
 8004240:	440a      	add	r2, r1
 8004242:	4291      	cmp	r1, r2
 8004244:	f100 33ff 	add.w	r3, r0, #4294967295
 8004248:	d100      	bne.n	800424c <memcpy+0xc>
 800424a:	4770      	bx	lr
 800424c:	b510      	push	{r4, lr}
 800424e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004252:	4291      	cmp	r1, r2
 8004254:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004258:	d1f9      	bne.n	800424e <memcpy+0xe>
 800425a:	bd10      	pop	{r4, pc}

0800425c <memmove>:
 800425c:	4288      	cmp	r0, r1
 800425e:	b510      	push	{r4, lr}
 8004260:	eb01 0402 	add.w	r4, r1, r2
 8004264:	d902      	bls.n	800426c <memmove+0x10>
 8004266:	4284      	cmp	r4, r0
 8004268:	4623      	mov	r3, r4
 800426a:	d807      	bhi.n	800427c <memmove+0x20>
 800426c:	1e43      	subs	r3, r0, #1
 800426e:	42a1      	cmp	r1, r4
 8004270:	d008      	beq.n	8004284 <memmove+0x28>
 8004272:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004276:	f803 2f01 	strb.w	r2, [r3, #1]!
 800427a:	e7f8      	b.n	800426e <memmove+0x12>
 800427c:	4601      	mov	r1, r0
 800427e:	4402      	add	r2, r0
 8004280:	428a      	cmp	r2, r1
 8004282:	d100      	bne.n	8004286 <memmove+0x2a>
 8004284:	bd10      	pop	{r4, pc}
 8004286:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800428a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800428e:	e7f7      	b.n	8004280 <memmove+0x24>

08004290 <_realloc_r>:
 8004290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004292:	4607      	mov	r7, r0
 8004294:	4614      	mov	r4, r2
 8004296:	460e      	mov	r6, r1
 8004298:	b921      	cbnz	r1, 80042a4 <_realloc_r+0x14>
 800429a:	4611      	mov	r1, r2
 800429c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80042a0:	f7ff bc36 	b.w	8003b10 <_malloc_r>
 80042a4:	b922      	cbnz	r2, 80042b0 <_realloc_r+0x20>
 80042a6:	f7ff fbe7 	bl	8003a78 <_free_r>
 80042aa:	4625      	mov	r5, r4
 80042ac:	4628      	mov	r0, r5
 80042ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042b0:	f000 f814 	bl	80042dc <_malloc_usable_size_r>
 80042b4:	42a0      	cmp	r0, r4
 80042b6:	d20f      	bcs.n	80042d8 <_realloc_r+0x48>
 80042b8:	4621      	mov	r1, r4
 80042ba:	4638      	mov	r0, r7
 80042bc:	f7ff fc28 	bl	8003b10 <_malloc_r>
 80042c0:	4605      	mov	r5, r0
 80042c2:	2800      	cmp	r0, #0
 80042c4:	d0f2      	beq.n	80042ac <_realloc_r+0x1c>
 80042c6:	4631      	mov	r1, r6
 80042c8:	4622      	mov	r2, r4
 80042ca:	f7ff ffb9 	bl	8004240 <memcpy>
 80042ce:	4631      	mov	r1, r6
 80042d0:	4638      	mov	r0, r7
 80042d2:	f7ff fbd1 	bl	8003a78 <_free_r>
 80042d6:	e7e9      	b.n	80042ac <_realloc_r+0x1c>
 80042d8:	4635      	mov	r5, r6
 80042da:	e7e7      	b.n	80042ac <_realloc_r+0x1c>

080042dc <_malloc_usable_size_r>:
 80042dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042e0:	1f18      	subs	r0, r3, #4
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	bfbc      	itt	lt
 80042e6:	580b      	ldrlt	r3, [r1, r0]
 80042e8:	18c0      	addlt	r0, r0, r3
 80042ea:	4770      	bx	lr

080042ec <_init>:
 80042ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ee:	bf00      	nop
 80042f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042f2:	bc08      	pop	{r3}
 80042f4:	469e      	mov	lr, r3
 80042f6:	4770      	bx	lr

080042f8 <_fini>:
 80042f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fa:	bf00      	nop
 80042fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fe:	bc08      	pop	{r3}
 8004300:	469e      	mov	lr, r3
 8004302:	4770      	bx	lr
