
MCU_ASS_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004258  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08004364  08004364  00014364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004460  08004460  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  08004460  08004460  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004460  08004460  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004460  08004460  00014460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004464  08004464  00014464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08004468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  200000c8  08004530  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08004530  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e8e  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000265c  00000000  00000000  00031f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  000345e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed0  00000000  00000000  000355d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019162  00000000  00000000  000364a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ce0  00000000  00000000  0004f60a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008da2e  00000000  00000000  000642ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1d18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000452c  00000000  00000000  000f1d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c8 	.word	0x200000c8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800434c 	.word	0x0800434c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000cc 	.word	0x200000cc
 8000148:	0800434c 	.word	0x0800434c

0800014c <IsButtonPress>:
int TimerForKeyPress[3] = {300,300,300};

int button_flag[3];
int button_long_flag[3];

int IsButtonPress(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <IsButtonPress+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <IsButtonPress+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <IsButtonPress+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <IsButtonPress+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	2000010c 	.word	0x2000010c

08000180 <subKeyProcess>:
	}
	return 0;
}


void subKeyProcess(int index) {
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	2000010c 	.word	0x2000010c

080001a0 <getIndex>:

int getIndex(int index) {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	switch(index){
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	2b02      	cmp	r3, #2
 80001ac:	d016      	beq.n	80001dc <getIndex+0x3c>
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	2b02      	cmp	r3, #2
 80001b2:	dc19      	bgt.n	80001e8 <getIndex+0x48>
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d003      	beq.n	80001c2 <getIndex+0x22>
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	2b01      	cmp	r3, #1
 80001be:	d007      	beq.n	80001d0 <getIndex+0x30>
			break;
		case 2:
			return HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
			break;
		default:
			break;
 80001c0:	e012      	b.n	80001e8 <getIndex+0x48>
			return HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80001c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c6:	480b      	ldr	r0, [pc, #44]	; (80001f4 <getIndex+0x54>)
 80001c8:	f001 fe60 	bl	8001e8c <HAL_GPIO_ReadPin>
 80001cc:	4603      	mov	r3, r0
 80001ce:	e00d      	b.n	80001ec <getIndex+0x4c>
			return HAL_GPIO_ReadPin(A0_GPIO_Port, A0_Pin);
 80001d0:	2101      	movs	r1, #1
 80001d2:	4809      	ldr	r0, [pc, #36]	; (80001f8 <getIndex+0x58>)
 80001d4:	f001 fe5a 	bl	8001e8c <HAL_GPIO_ReadPin>
 80001d8:	4603      	mov	r3, r0
 80001da:	e007      	b.n	80001ec <getIndex+0x4c>
			return HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
 80001dc:	2102      	movs	r1, #2
 80001de:	4806      	ldr	r0, [pc, #24]	; (80001f8 <getIndex+0x58>)
 80001e0:	f001 fe54 	bl	8001e8c <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	e001      	b.n	80001ec <getIndex+0x4c>
			break;
 80001e8:	bf00      	nop
	}
	return 0;
 80001ea:	2300      	movs	r3, #0
}
 80001ec:	4618      	mov	r0, r3
 80001ee:	3708      	adds	r7, #8
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	40011000 	.word	0x40011000
 80001f8:	40010800 	.word	0x40010800

080001fc <getKeyInput>:

void getKeyInput() {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 8000202:	2300      	movs	r3, #0
 8000204:	607b      	str	r3, [r7, #4]
 8000206:	e06d      	b.n	80002e4 <getKeyInput+0xe8>
		KeyReg0[i] = KeyReg1[i];
 8000208:	4a3a      	ldr	r2, [pc, #232]	; (80002f4 <getKeyInput+0xf8>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000210:	4939      	ldr	r1, [pc, #228]	; (80002f8 <getKeyInput+0xfc>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000218:	4a38      	ldr	r2, [pc, #224]	; (80002fc <getKeyInput+0x100>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	4934      	ldr	r1, [pc, #208]	; (80002f4 <getKeyInput+0xf8>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		KeyReg2[i] = getIndex(i) ;
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f7ff ffb9 	bl	80001a0 <getIndex>
 800022e:	4602      	mov	r2, r0
 8000230:	4932      	ldr	r1, [pc, #200]	; (80002fc <getKeyInput+0x100>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 8000238:	4a2f      	ldr	r2, [pc, #188]	; (80002f8 <getKeyInput+0xfc>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000240:	492c      	ldr	r1, [pc, #176]	; (80002f4 <getKeyInput+0xf8>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000248:	429a      	cmp	r2, r3
 800024a:	d148      	bne.n	80002de <getKeyInput+0xe2>
 800024c:	4a29      	ldr	r2, [pc, #164]	; (80002f4 <getKeyInput+0xf8>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000254:	4929      	ldr	r1, [pc, #164]	; (80002fc <getKeyInput+0x100>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800025c:	429a      	cmp	r2, r3
 800025e:	d13e      	bne.n	80002de <getKeyInput+0xe2>
			//case short pressed
			if (KeyReg3[i] != KeyReg2[i]) {
 8000260:	4a27      	ldr	r2, [pc, #156]	; (8000300 <getKeyInput+0x104>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000268:	4924      	ldr	r1, [pc, #144]	; (80002fc <getKeyInput+0x100>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000270:	429a      	cmp	r2, r3
 8000272:	d01b      	beq.n	80002ac <getKeyInput+0xb0>
				KeyReg3[i] = KeyReg2[i];
 8000274:	4a21      	ldr	r2, [pc, #132]	; (80002fc <getKeyInput+0x100>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800027c:	4920      	ldr	r1, [pc, #128]	; (8000300 <getKeyInput+0x104>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESS_STATE) {
 8000284:	4a1d      	ldr	r2, [pc, #116]	; (80002fc <getKeyInput+0x100>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d126      	bne.n	80002de <getKeyInput+0xe2>
					//todo
					subKeyProcess(i);
 8000290:	6878      	ldr	r0, [r7, #4]
 8000292:	f7ff ff75 	bl	8000180 <subKeyProcess>
					HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000296:	2120      	movs	r1, #32
 8000298:	481a      	ldr	r0, [pc, #104]	; (8000304 <getKeyInput+0x108>)
 800029a:	f001 fe26 	bl	8001eea <HAL_GPIO_TogglePin>
					TimerForKeyPress[i] = 300;
 800029e:	4a1a      	ldr	r2, [pc, #104]	; (8000308 <getKeyInput+0x10c>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80002a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002aa:	e018      	b.n	80002de <getKeyInput+0xe2>

				}
			} else { // case long pressed
				TimerForKeyPress[i]--;
 80002ac:	4a16      	ldr	r2, [pc, #88]	; (8000308 <getKeyInput+0x10c>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b4:	1e5a      	subs	r2, r3, #1
 80002b6:	4914      	ldr	r1, [pc, #80]	; (8000308 <getKeyInput+0x10c>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimerForKeyPress[i] == 0) {
 80002be:	4a12      	ldr	r2, [pc, #72]	; (8000308 <getKeyInput+0x10c>)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d109      	bne.n	80002de <getKeyInput+0xe2>
					//todo
					button_long_flag[i] = 1;
 80002ca:	4a10      	ldr	r2, [pc, #64]	; (800030c <getKeyInput+0x110>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2101      	movs	r1, #1
 80002d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					KeyReg3[i] = NORMAL_STATE;
 80002d4:	4a0a      	ldr	r2, [pc, #40]	; (8000300 <getKeyInput+0x104>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2101      	movs	r1, #1
 80002da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 3; i++) {
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	3301      	adds	r3, #1
 80002e2:	607b      	str	r3, [r7, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2b02      	cmp	r3, #2
 80002e8:	dd8e      	ble.n	8000208 <getKeyInput+0xc>
				}
			}
		}
	}
}
 80002ea:	bf00      	nop
 80002ec:	bf00      	nop
 80002ee:	3708      	adds	r7, #8
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	2000000c 	.word	0x2000000c
 80002f8:	20000000 	.word	0x20000000
 80002fc:	20000018 	.word	0x20000018
 8000300:	20000024 	.word	0x20000024
 8000304:	40010800 	.word	0x40010800
 8000308:	20000030 	.word	0x20000030
 800030c:	20000118 	.word	0x20000118

08000310 <clearStatus_A>:

int status_RED_B = 0;
int status_GREEN_B = 1;
int status_YELLOW_B = 0;

void clearStatus_A(){
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	status_RED_A = 0;
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <clearStatus_A+0x20>)
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
	status_GREEN_A = 0;
 800031a:	4b06      	ldr	r3, [pc, #24]	; (8000334 <clearStatus_A+0x24>)
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
	status_YELLOW_A = 0;
 8000320:	4b05      	ldr	r3, [pc, #20]	; (8000338 <clearStatus_A+0x28>)
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
}
 8000326:	bf00      	nop
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	2000003c 	.word	0x2000003c
 8000334:	200000e4 	.word	0x200000e4
 8000338:	200000e8 	.word	0x200000e8

0800033c <clearStatus_B>:
void clearStatus_B(){
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
	status_RED_B = 0;
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <clearStatus_B+0x20>)
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
	status_GREEN_B = 0;
 8000346:	4b06      	ldr	r3, [pc, #24]	; (8000360 <clearStatus_B+0x24>)
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
	status_YELLOW_B = 0;
 800034c:	4b05      	ldr	r3, [pc, #20]	; (8000364 <clearStatus_B+0x28>)
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
}
 8000352:	bf00      	nop
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	200000ec 	.word	0x200000ec
 8000360:	20000040 	.word	0x20000040
 8000364:	200000f0 	.word	0x200000f0

08000368 <clearStatus>:

void clearStatus(){
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
	status_RED_A = 0;
 800036c:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <clearStatus+0x30>)
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
	status_GREEN_A = 0;
 8000372:	4b0a      	ldr	r3, [pc, #40]	; (800039c <clearStatus+0x34>)
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
	status_YELLOW_A = 0;
 8000378:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <clearStatus+0x38>)
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
	status_RED_B = 0;
 800037e:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <clearStatus+0x3c>)
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
	status_GREEN_B = 0;
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <clearStatus+0x40>)
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
	status_YELLOW_B = 0;
 800038a:	4b08      	ldr	r3, [pc, #32]	; (80003ac <clearStatus+0x44>)
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr
 8000398:	2000003c 	.word	0x2000003c
 800039c:	200000e4 	.word	0x200000e4
 80003a0:	200000e8 	.word	0x200000e8
 80003a4:	200000ec 	.word	0x200000ec
 80003a8:	20000040 	.word	0x20000040
 80003ac:	200000f0 	.word	0x200000f0

080003b0 <displayTraffic>:

void displayTraffic() {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	//group a
	if (status_RED_A == 1) {
 80003b4:	4b2d      	ldr	r3, [pc, #180]	; (800046c <displayTraffic+0xbc>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d109      	bne.n	80003d0 <displayTraffic+0x20>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	2108      	movs	r1, #8
 80003c0:	482b      	ldr	r0, [pc, #172]	; (8000470 <displayTraffic+0xc0>)
 80003c2:	f001 fd7a 	bl	8001eba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80003c6:	2201      	movs	r2, #1
 80003c8:	2120      	movs	r1, #32
 80003ca:	4829      	ldr	r0, [pc, #164]	; (8000470 <displayTraffic+0xc0>)
 80003cc:	f001 fd75 	bl	8001eba <HAL_GPIO_WritePin>
	}
	if (status_YELLOW_A == 1) {
 80003d0:	4b28      	ldr	r3, [pc, #160]	; (8000474 <displayTraffic+0xc4>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d109      	bne.n	80003ec <displayTraffic+0x3c>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	2108      	movs	r1, #8
 80003dc:	4824      	ldr	r0, [pc, #144]	; (8000470 <displayTraffic+0xc0>)
 80003de:	f001 fd6c 	bl	8001eba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80003e2:	2201      	movs	r2, #1
 80003e4:	2120      	movs	r1, #32
 80003e6:	4822      	ldr	r0, [pc, #136]	; (8000470 <displayTraffic+0xc0>)
 80003e8:	f001 fd67 	bl	8001eba <HAL_GPIO_WritePin>
	}
	if (status_GREEN_A == 1) {
 80003ec:	4b22      	ldr	r3, [pc, #136]	; (8000478 <displayTraffic+0xc8>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d109      	bne.n	8000408 <displayTraffic+0x58>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80003f4:	2201      	movs	r2, #1
 80003f6:	2108      	movs	r1, #8
 80003f8:	481d      	ldr	r0, [pc, #116]	; (8000470 <displayTraffic+0xc0>)
 80003fa:	f001 fd5e 	bl	8001eba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2120      	movs	r1, #32
 8000402:	481b      	ldr	r0, [pc, #108]	; (8000470 <displayTraffic+0xc0>)
 8000404:	f001 fd59 	bl	8001eba <HAL_GPIO_WritePin>
	}
	//group b
	if (status_RED_B == 1) {
 8000408:	4b1c      	ldr	r3, [pc, #112]	; (800047c <displayTraffic+0xcc>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2b01      	cmp	r3, #1
 800040e:	d10b      	bne.n	8000428 <displayTraffic+0x78>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000410:	2201      	movs	r2, #1
 8000412:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000416:	481a      	ldr	r0, [pc, #104]	; (8000480 <displayTraffic+0xd0>)
 8000418:	f001 fd4f 	bl	8001eba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, SET);
 800041c:	2201      	movs	r2, #1
 800041e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000422:	4817      	ldr	r0, [pc, #92]	; (8000480 <displayTraffic+0xd0>)
 8000424:	f001 fd49 	bl	8001eba <HAL_GPIO_WritePin>
	}
	if (status_YELLOW_B == 1) {
 8000428:	4b16      	ldr	r3, [pc, #88]	; (8000484 <displayTraffic+0xd4>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	2b01      	cmp	r3, #1
 800042e:	d10b      	bne.n	8000448 <displayTraffic+0x98>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000436:	4812      	ldr	r0, [pc, #72]	; (8000480 <displayTraffic+0xd0>)
 8000438:	f001 fd3f 	bl	8001eba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, SET);
 800043c:	2201      	movs	r2, #1
 800043e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000442:	480f      	ldr	r0, [pc, #60]	; (8000480 <displayTraffic+0xd0>)
 8000444:	f001 fd39 	bl	8001eba <HAL_GPIO_WritePin>
	}
	if (status_GREEN_B == 1) {
 8000448:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <displayTraffic+0xd8>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2b01      	cmp	r3, #1
 800044e:	d10b      	bne.n	8000468 <displayTraffic+0xb8>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000450:	2201      	movs	r2, #1
 8000452:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000456:	480a      	ldr	r0, [pc, #40]	; (8000480 <displayTraffic+0xd0>)
 8000458:	f001 fd2f 	bl	8001eba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000462:	4807      	ldr	r0, [pc, #28]	; (8000480 <displayTraffic+0xd0>)
 8000464:	f001 fd29 	bl	8001eba <HAL_GPIO_WritePin>
	}
}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	2000003c 	.word	0x2000003c
 8000470:	40010c00 	.word	0x40010c00
 8000474:	200000e8 	.word	0x200000e8
 8000478:	200000e4 	.word	0x200000e4
 800047c:	200000ec 	.word	0x200000ec
 8000480:	40010800 	.word	0x40010800
 8000484:	200000f0 	.word	0x200000f0
 8000488:	20000040 	.word	0x20000040

0800048c <statusModeTraffic>:

void statusModeTraffic(){
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	clearStatus();
 8000490:	f7ff ff6a 	bl	8000368 <clearStatus>
	if(statusMode == MODE2){
 8000494:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <statusModeTraffic+0x48>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b02      	cmp	r3, #2
 800049a:	d105      	bne.n	80004a8 <statusModeTraffic+0x1c>
		status_RED_A=1;
 800049c:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <statusModeTraffic+0x4c>)
 800049e:	2201      	movs	r2, #1
 80004a0:	601a      	str	r2, [r3, #0]
		status_RED_B=1;
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <statusModeTraffic+0x50>)
 80004a4:	2201      	movs	r2, #1
 80004a6:	601a      	str	r2, [r3, #0]
	}
	if(statusMode == MODE3){
 80004a8:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <statusModeTraffic+0x48>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b03      	cmp	r3, #3
 80004ae:	d105      	bne.n	80004bc <statusModeTraffic+0x30>
		status_GREEN_A=1;
 80004b0:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <statusModeTraffic+0x54>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	601a      	str	r2, [r3, #0]
		status_GREEN_B=1;
 80004b6:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <statusModeTraffic+0x58>)
 80004b8:	2201      	movs	r2, #1
 80004ba:	601a      	str	r2, [r3, #0]
	}
	if(statusMode == MODE4){
 80004bc:	4b05      	ldr	r3, [pc, #20]	; (80004d4 <statusModeTraffic+0x48>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2b04      	cmp	r3, #4
 80004c2:	d105      	bne.n	80004d0 <statusModeTraffic+0x44>
		status_YELLOW_A=1;
 80004c4:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <statusModeTraffic+0x5c>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	601a      	str	r2, [r3, #0]
		status_YELLOW_B=1;
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <statusModeTraffic+0x60>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	601a      	str	r2, [r3, #0]
	}
}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	200000fc 	.word	0x200000fc
 80004d8:	2000003c 	.word	0x2000003c
 80004dc:	200000ec 	.word	0x200000ec
 80004e0:	200000e4 	.word	0x200000e4
 80004e4:	20000040 	.word	0x20000040
 80004e8:	200000e8 	.word	0x200000e8
 80004ec:	200000f0 	.word	0x200000f0

080004f0 <statusManTraffic>:

void statusManTraffic(){
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
		switch (status_manual) {
 80004f4:	4b30      	ldr	r3, [pc, #192]	; (80005b8 <statusManTraffic+0xc8>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	3b15      	subs	r3, #21
 80004fa:	2b03      	cmp	r3, #3
 80004fc:	d856      	bhi.n	80005ac <statusManTraffic+0xbc>
 80004fe:	a201      	add	r2, pc, #4	; (adr r2, 8000504 <statusManTraffic+0x14>)
 8000500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000504:	08000515 	.word	0x08000515
 8000508:	0800053b 	.word	0x0800053b
 800050c:	08000561 	.word	0x08000561
 8000510:	08000587 	.word	0x08000587
			case RED_GREEN:
				status_RED_A =1;
 8000514:	4b29      	ldr	r3, [pc, #164]	; (80005bc <statusManTraffic+0xcc>)
 8000516:	2201      	movs	r2, #1
 8000518:	601a      	str	r2, [r3, #0]
				status_GREEN_A=0;
 800051a:	4b29      	ldr	r3, [pc, #164]	; (80005c0 <statusManTraffic+0xd0>)
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
				status_YELLOW_A=0;
 8000520:	4b28      	ldr	r3, [pc, #160]	; (80005c4 <statusManTraffic+0xd4>)
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
				status_RED_B=0;
 8000526:	4b28      	ldr	r3, [pc, #160]	; (80005c8 <statusManTraffic+0xd8>)
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
				status_GREEN_B = 1;
 800052c:	4b27      	ldr	r3, [pc, #156]	; (80005cc <statusManTraffic+0xdc>)
 800052e:	2201      	movs	r2, #1
 8000530:	601a      	str	r2, [r3, #0]
				status_YELLOW_B=0;
 8000532:	4b27      	ldr	r3, [pc, #156]	; (80005d0 <statusManTraffic+0xe0>)
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
				break;
 8000538:	e039      	b.n	80005ae <statusManTraffic+0xbe>
			case RED_YELLOW:
				status_RED_A =1;
 800053a:	4b20      	ldr	r3, [pc, #128]	; (80005bc <statusManTraffic+0xcc>)
 800053c:	2201      	movs	r2, #1
 800053e:	601a      	str	r2, [r3, #0]
				status_GREEN_A=0;
 8000540:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <statusManTraffic+0xd0>)
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
				status_YELLOW_A=0;
 8000546:	4b1f      	ldr	r3, [pc, #124]	; (80005c4 <statusManTraffic+0xd4>)
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
				status_RED_B=0;
 800054c:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <statusManTraffic+0xd8>)
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
				status_GREEN_B = 0;
 8000552:	4b1e      	ldr	r3, [pc, #120]	; (80005cc <statusManTraffic+0xdc>)
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
				status_YELLOW_B=1;
 8000558:	4b1d      	ldr	r3, [pc, #116]	; (80005d0 <statusManTraffic+0xe0>)
 800055a:	2201      	movs	r2, #1
 800055c:	601a      	str	r2, [r3, #0]
				break;
 800055e:	e026      	b.n	80005ae <statusManTraffic+0xbe>
			case GREEN_RED:
				status_RED_A =0;
 8000560:	4b16      	ldr	r3, [pc, #88]	; (80005bc <statusManTraffic+0xcc>)
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
				status_GREEN_A=1;
 8000566:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <statusManTraffic+0xd0>)
 8000568:	2201      	movs	r2, #1
 800056a:	601a      	str	r2, [r3, #0]
				status_YELLOW_A=0;
 800056c:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <statusManTraffic+0xd4>)
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
				status_RED_B=1;
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <statusManTraffic+0xd8>)
 8000574:	2201      	movs	r2, #1
 8000576:	601a      	str	r2, [r3, #0]
				status_GREEN_B =0;
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <statusManTraffic+0xdc>)
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
				status_YELLOW_B=0;
 800057e:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <statusManTraffic+0xe0>)
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
				break;
 8000584:	e013      	b.n	80005ae <statusManTraffic+0xbe>
			case YELLOW_RED:
				status_RED_A =0;
 8000586:	4b0d      	ldr	r3, [pc, #52]	; (80005bc <statusManTraffic+0xcc>)
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
				status_GREEN_A=0;
 800058c:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <statusManTraffic+0xd0>)
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
				status_YELLOW_A=1;
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <statusManTraffic+0xd4>)
 8000594:	2201      	movs	r2, #1
 8000596:	601a      	str	r2, [r3, #0]
				status_RED_B=1;
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <statusManTraffic+0xd8>)
 800059a:	2201      	movs	r2, #1
 800059c:	601a      	str	r2, [r3, #0]
				status_GREEN_B = 0;
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <statusManTraffic+0xdc>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
				status_YELLOW_B=0;
 80005a4:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <statusManTraffic+0xe0>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
				break;
 80005aa:	e000      	b.n	80005ae <statusManTraffic+0xbe>
			default:
				break;
 80005ac:	bf00      	nop
		}
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	200000f4 	.word	0x200000f4
 80005bc:	2000003c 	.word	0x2000003c
 80005c0:	200000e4 	.word	0x200000e4
 80005c4:	200000e8 	.word	0x200000e8
 80005c8:	200000ec 	.word	0x200000ec
 80005cc:	20000040 	.word	0x20000040
 80005d0:	200000f0 	.word	0x200000f0

080005d4 <statusTraffic_A>:

void statusTraffic_A(){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	clearStatus_A();
 80005d8:	f7ff fe9a 	bl	8000310 <clearStatus_A>
	if(status_A == AUTO_RED){
 80005dc:	4b0b      	ldr	r3, [pc, #44]	; (800060c <statusTraffic_A+0x38>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b0b      	cmp	r3, #11
 80005e2:	d102      	bne.n	80005ea <statusTraffic_A+0x16>
		status_RED_A=1;
 80005e4:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <statusTraffic_A+0x3c>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	601a      	str	r2, [r3, #0]
	}
	if(status_A == AUTO_GREEN){
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <statusTraffic_A+0x38>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b0c      	cmp	r3, #12
 80005f0:	d102      	bne.n	80005f8 <statusTraffic_A+0x24>
		status_GREEN_A=1;
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <statusTraffic_A+0x40>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	601a      	str	r2, [r3, #0]
	}
	if(status_A == AUTO_YELLOW){
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <statusTraffic_A+0x38>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b0d      	cmp	r3, #13
 80005fe:	d102      	bne.n	8000606 <statusTraffic_A+0x32>
		status_YELLOW_A=1;
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <statusTraffic_A+0x44>)
 8000602:	2201      	movs	r2, #1
 8000604:	601a      	str	r2, [r3, #0]
	}
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000044 	.word	0x20000044
 8000610:	2000003c 	.word	0x2000003c
 8000614:	200000e4 	.word	0x200000e4
 8000618:	200000e8 	.word	0x200000e8

0800061c <statusTraffic_B>:

void statusTraffic_B(){
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	clearStatus_B();
 8000620:	f7ff fe8c 	bl	800033c <clearStatus_B>
	if(status_B == AUTO_RED){
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <statusTraffic_B+0x38>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b0b      	cmp	r3, #11
 800062a:	d102      	bne.n	8000632 <statusTraffic_B+0x16>
		status_RED_B=1;
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <statusTraffic_B+0x3c>)
 800062e:	2201      	movs	r2, #1
 8000630:	601a      	str	r2, [r3, #0]
	}
	if(status_B == AUTO_GREEN){
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <statusTraffic_B+0x38>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2b0c      	cmp	r3, #12
 8000638:	d102      	bne.n	8000640 <statusTraffic_B+0x24>
		status_GREEN_B=1;
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <statusTraffic_B+0x40>)
 800063c:	2201      	movs	r2, #1
 800063e:	601a      	str	r2, [r3, #0]
	}
	if(status_B == AUTO_YELLOW){
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <statusTraffic_B+0x38>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b0d      	cmp	r3, #13
 8000646:	d102      	bne.n	800064e <statusTraffic_B+0x32>
		status_YELLOW_B=1;
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <statusTraffic_B+0x44>)
 800064a:	2201      	movs	r2, #1
 800064c:	601a      	str	r2, [r3, #0]
	}
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000048 	.word	0x20000048
 8000658:	200000ec 	.word	0x200000ec
 800065c:	20000040 	.word	0x20000040
 8000660:	200000f0 	.word	0x200000f0

08000664 <fsm_automatic_run>:
int status_B = 10;

int count_Down_A;
int count_Down_B;

void fsm_automatic_run() {
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	fsm_automatic_run_A();
 8000668:	f000 f804 	bl	8000674 <fsm_automatic_run_A>
	fsm_automatic_run_B();
 800066c:	f000 f88a 	bl	8000784 <fsm_automatic_run_B>
}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}

08000674 <fsm_automatic_run_A>:

void fsm_automatic_run_A() {
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	switch (status_A) {
 8000678:	4b3c      	ldr	r3, [pc, #240]	; (800076c <fsm_automatic_run_A+0xf8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	3b0a      	subs	r3, #10
 800067e:	2b03      	cmp	r3, #3
 8000680:	d871      	bhi.n	8000766 <fsm_automatic_run_A+0xf2>
 8000682:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <fsm_automatic_run_A+0x14>)
 8000684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000688:	08000699 	.word	0x08000699
 800068c:	080006b3 	.word	0x080006b3
 8000690:	080006ef 	.word	0x080006ef
 8000694:	0800072b 	.word	0x0800072b
	case AUTO:
		status_A = AUTO_RED;
 8000698:	4b34      	ldr	r3, [pc, #208]	; (800076c <fsm_automatic_run_A+0xf8>)
 800069a:	220b      	movs	r2, #11
 800069c:	601a      	str	r2, [r3, #0]
		count_Down_A = RED_timer;
 800069e:	4b34      	ldr	r3, [pc, #208]	; (8000770 <fsm_automatic_run_A+0xfc>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a34      	ldr	r2, [pc, #208]	; (8000774 <fsm_automatic_run_A+0x100>)
 80006a4:	6013      	str	r3, [r2, #0]
		setTimer(0, 1000);
 80006a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006aa:	2000      	movs	r0, #0
 80006ac:	f000 ff06 	bl	80014bc <setTimer>
		break;
 80006b0:	e05a      	b.n	8000768 <fsm_automatic_run_A+0xf4>
	case AUTO_RED:
		statusTraffic_A();
 80006b2:	f7ff ff8f 	bl	80005d4 <statusTraffic_A>
		if (count_Down_A <= 0) {
 80006b6:	4b2f      	ldr	r3, [pc, #188]	; (8000774 <fsm_automatic_run_A+0x100>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	dc06      	bgt.n	80006cc <fsm_automatic_run_A+0x58>
			status_A = AUTO_GREEN;
 80006be:	4b2b      	ldr	r3, [pc, #172]	; (800076c <fsm_automatic_run_A+0xf8>)
 80006c0:	220c      	movs	r2, #12
 80006c2:	601a      	str	r2, [r3, #0]
			count_Down_A = GREEN_timer;
 80006c4:	4b2c      	ldr	r3, [pc, #176]	; (8000778 <fsm_automatic_run_A+0x104>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a2a      	ldr	r2, [pc, #168]	; (8000774 <fsm_automatic_run_A+0x100>)
 80006ca:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[0] == 1){
 80006cc:	4b2b      	ldr	r3, [pc, #172]	; (800077c <fsm_automatic_run_A+0x108>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d109      	bne.n	80006e8 <fsm_automatic_run_A+0x74>
			count_Down_A--;
 80006d4:	4b27      	ldr	r3, [pc, #156]	; (8000774 <fsm_automatic_run_A+0x100>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	3b01      	subs	r3, #1
 80006da:	4a26      	ldr	r2, [pc, #152]	; (8000774 <fsm_automatic_run_A+0x100>)
 80006dc:	6013      	str	r3, [r2, #0]
			setTimer(0, 1000);
 80006de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006e2:	2000      	movs	r0, #0
 80006e4:	f000 feea 	bl	80014bc <setTimer>
		}
		displayTraffic();
 80006e8:	f7ff fe62 	bl	80003b0 <displayTraffic>
		break;
 80006ec:	e03c      	b.n	8000768 <fsm_automatic_run_A+0xf4>
	case AUTO_GREEN:
		statusTraffic_A();
 80006ee:	f7ff ff71 	bl	80005d4 <statusTraffic_A>
		if (count_Down_A <= 0) {
 80006f2:	4b20      	ldr	r3, [pc, #128]	; (8000774 <fsm_automatic_run_A+0x100>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	dc06      	bgt.n	8000708 <fsm_automatic_run_A+0x94>
			status_A = AUTO_YELLOW;
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <fsm_automatic_run_A+0xf8>)
 80006fc:	220d      	movs	r2, #13
 80006fe:	601a      	str	r2, [r3, #0]
			count_Down_A = YELLOW_timer;
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <fsm_automatic_run_A+0x10c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a1b      	ldr	r2, [pc, #108]	; (8000774 <fsm_automatic_run_A+0x100>)
 8000706:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[0] == 1){
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <fsm_automatic_run_A+0x108>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d109      	bne.n	8000724 <fsm_automatic_run_A+0xb0>
			count_Down_A--;
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <fsm_automatic_run_A+0x100>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	3b01      	subs	r3, #1
 8000716:	4a17      	ldr	r2, [pc, #92]	; (8000774 <fsm_automatic_run_A+0x100>)
 8000718:	6013      	str	r3, [r2, #0]
			setTimer(0, 1000);
 800071a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800071e:	2000      	movs	r0, #0
 8000720:	f000 fecc 	bl	80014bc <setTimer>
		}
		displayTraffic();
 8000724:	f7ff fe44 	bl	80003b0 <displayTraffic>

		break;
 8000728:	e01e      	b.n	8000768 <fsm_automatic_run_A+0xf4>
	case AUTO_YELLOW:
		statusTraffic_A();
 800072a:	f7ff ff53 	bl	80005d4 <statusTraffic_A>
		if (count_Down_A <= 0) {
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <fsm_automatic_run_A+0x100>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	dc06      	bgt.n	8000744 <fsm_automatic_run_A+0xd0>
			status_A = AUTO_RED;
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <fsm_automatic_run_A+0xf8>)
 8000738:	220b      	movs	r2, #11
 800073a:	601a      	str	r2, [r3, #0]
			count_Down_A = RED_timer;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <fsm_automatic_run_A+0xfc>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a0c      	ldr	r2, [pc, #48]	; (8000774 <fsm_automatic_run_A+0x100>)
 8000742:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[0]==1){
 8000744:	4b0d      	ldr	r3, [pc, #52]	; (800077c <fsm_automatic_run_A+0x108>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d109      	bne.n	8000760 <fsm_automatic_run_A+0xec>
			count_Down_A--;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <fsm_automatic_run_A+0x100>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	3b01      	subs	r3, #1
 8000752:	4a08      	ldr	r2, [pc, #32]	; (8000774 <fsm_automatic_run_A+0x100>)
 8000754:	6013      	str	r3, [r2, #0]
			setTimer(0, 1000);
 8000756:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800075a:	2000      	movs	r0, #0
 800075c:	f000 feae 	bl	80014bc <setTimer>
		}
		displayTraffic();
 8000760:	f7ff fe26 	bl	80003b0 <displayTraffic>

		break;
 8000764:	e000      	b.n	8000768 <fsm_automatic_run_A+0xf4>
	default:
		break;
 8000766:	bf00      	nop
	}
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000044 	.word	0x20000044
 8000770:	2000004c 	.word	0x2000004c
 8000774:	20000124 	.word	0x20000124
 8000778:	20000050 	.word	0x20000050
 800077c:	20000238 	.word	0x20000238
 8000780:	20000054 	.word	0x20000054

08000784 <fsm_automatic_run_B>:

void fsm_automatic_run_B() {
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	switch (status_B) {
 8000788:	4b3c      	ldr	r3, [pc, #240]	; (800087c <fsm_automatic_run_B+0xf8>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	3b0a      	subs	r3, #10
 800078e:	2b03      	cmp	r3, #3
 8000790:	d871      	bhi.n	8000876 <fsm_automatic_run_B+0xf2>
 8000792:	a201      	add	r2, pc, #4	; (adr r2, 8000798 <fsm_automatic_run_B+0x14>)
 8000794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000798:	080007a9 	.word	0x080007a9
 800079c:	080007c3 	.word	0x080007c3
 80007a0:	080007ff 	.word	0x080007ff
 80007a4:	0800083b 	.word	0x0800083b
	case AUTO:
		status_B = AUTO_GREEN;
 80007a8:	4b34      	ldr	r3, [pc, #208]	; (800087c <fsm_automatic_run_B+0xf8>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	601a      	str	r2, [r3, #0]
		count_Down_B = GREEN_timer;
 80007ae:	4b34      	ldr	r3, [pc, #208]	; (8000880 <fsm_automatic_run_B+0xfc>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a34      	ldr	r2, [pc, #208]	; (8000884 <fsm_automatic_run_B+0x100>)
 80007b4:	6013      	str	r3, [r2, #0]
		setTimer(1, 1000);
 80007b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007ba:	2001      	movs	r0, #1
 80007bc:	f000 fe7e 	bl	80014bc <setTimer>
		break;
 80007c0:	e05a      	b.n	8000878 <fsm_automatic_run_B+0xf4>
	case AUTO_RED:
		statusTraffic_B();
 80007c2:	f7ff ff2b 	bl	800061c <statusTraffic_B>
		if (count_Down_B <= 0) {
 80007c6:	4b2f      	ldr	r3, [pc, #188]	; (8000884 <fsm_automatic_run_B+0x100>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	dc06      	bgt.n	80007dc <fsm_automatic_run_B+0x58>
			status_B = AUTO_GREEN;
 80007ce:	4b2b      	ldr	r3, [pc, #172]	; (800087c <fsm_automatic_run_B+0xf8>)
 80007d0:	220c      	movs	r2, #12
 80007d2:	601a      	str	r2, [r3, #0]
			count_Down_B = GREEN_timer;
 80007d4:	4b2a      	ldr	r3, [pc, #168]	; (8000880 <fsm_automatic_run_B+0xfc>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a2a      	ldr	r2, [pc, #168]	; (8000884 <fsm_automatic_run_B+0x100>)
 80007da:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[1] == 1){
 80007dc:	4b2a      	ldr	r3, [pc, #168]	; (8000888 <fsm_automatic_run_B+0x104>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d109      	bne.n	80007f8 <fsm_automatic_run_B+0x74>
			count_Down_B--;
 80007e4:	4b27      	ldr	r3, [pc, #156]	; (8000884 <fsm_automatic_run_B+0x100>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	3b01      	subs	r3, #1
 80007ea:	4a26      	ldr	r2, [pc, #152]	; (8000884 <fsm_automatic_run_B+0x100>)
 80007ec:	6013      	str	r3, [r2, #0]
			setTimer(1, 1000);
 80007ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007f2:	2001      	movs	r0, #1
 80007f4:	f000 fe62 	bl	80014bc <setTimer>
		}
		displayTraffic();
 80007f8:	f7ff fdda 	bl	80003b0 <displayTraffic>
		break;
 80007fc:	e03c      	b.n	8000878 <fsm_automatic_run_B+0xf4>
	case AUTO_GREEN:
		statusTraffic_B();
 80007fe:	f7ff ff0d 	bl	800061c <statusTraffic_B>
		if (count_Down_B <= 0) {
 8000802:	4b20      	ldr	r3, [pc, #128]	; (8000884 <fsm_automatic_run_B+0x100>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	dc06      	bgt.n	8000818 <fsm_automatic_run_B+0x94>
			status_B = AUTO_YELLOW;
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <fsm_automatic_run_B+0xf8>)
 800080c:	220d      	movs	r2, #13
 800080e:	601a      	str	r2, [r3, #0]
			count_Down_B = YELLOW_timer;
 8000810:	4b1e      	ldr	r3, [pc, #120]	; (800088c <fsm_automatic_run_B+0x108>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a1b      	ldr	r2, [pc, #108]	; (8000884 <fsm_automatic_run_B+0x100>)
 8000816:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[1] == 1){
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <fsm_automatic_run_B+0x104>)
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d109      	bne.n	8000834 <fsm_automatic_run_B+0xb0>
			count_Down_B--;
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <fsm_automatic_run_B+0x100>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	3b01      	subs	r3, #1
 8000826:	4a17      	ldr	r2, [pc, #92]	; (8000884 <fsm_automatic_run_B+0x100>)
 8000828:	6013      	str	r3, [r2, #0]
			setTimer(1, 1000);
 800082a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800082e:	2001      	movs	r0, #1
 8000830:	f000 fe44 	bl	80014bc <setTimer>
		}
		displayTraffic();
 8000834:	f7ff fdbc 	bl	80003b0 <displayTraffic>

		break;
 8000838:	e01e      	b.n	8000878 <fsm_automatic_run_B+0xf4>
	case AUTO_YELLOW:
		statusTraffic_B();
 800083a:	f7ff feef 	bl	800061c <statusTraffic_B>
		if (count_Down_B <= 0) {
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <fsm_automatic_run_B+0x100>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	dc06      	bgt.n	8000854 <fsm_automatic_run_B+0xd0>
			status_B = AUTO_RED;
 8000846:	4b0d      	ldr	r3, [pc, #52]	; (800087c <fsm_automatic_run_B+0xf8>)
 8000848:	220b      	movs	r2, #11
 800084a:	601a      	str	r2, [r3, #0]
			count_Down_B = RED_timer;
 800084c:	4b10      	ldr	r3, [pc, #64]	; (8000890 <fsm_automatic_run_B+0x10c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a0c      	ldr	r2, [pc, #48]	; (8000884 <fsm_automatic_run_B+0x100>)
 8000852:	6013      	str	r3, [r2, #0]
		}
		if(timer_flag[1]==1){
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <fsm_automatic_run_B+0x104>)
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	2b01      	cmp	r3, #1
 800085a:	d109      	bne.n	8000870 <fsm_automatic_run_B+0xec>
			count_Down_B--;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <fsm_automatic_run_B+0x100>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	3b01      	subs	r3, #1
 8000862:	4a08      	ldr	r2, [pc, #32]	; (8000884 <fsm_automatic_run_B+0x100>)
 8000864:	6013      	str	r3, [r2, #0]
			setTimer(1, 1000);
 8000866:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800086a:	2001      	movs	r0, #1
 800086c:	f000 fe26 	bl	80014bc <setTimer>
		}
		displayTraffic();
 8000870:	f7ff fd9e 	bl	80003b0 <displayTraffic>

		break;
 8000874:	e000      	b.n	8000878 <fsm_automatic_run_B+0xf4>
	default:
		break;
 8000876:	bf00      	nop
	}
}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000048 	.word	0x20000048
 8000880:	20000050 	.word	0x20000050
 8000884:	20000128 	.word	0x20000128
 8000888:	20000238 	.word	0x20000238
 800088c:	20000054 	.word	0x20000054
 8000890:	2000004c 	.word	0x2000004c

08000894 <fsm_lcd_run>:
 *      Author: Hy
 */

#include "fsm_lcd.h"

void fsm_lcd_run(){
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	switch(statusMode){
 8000898:	4b6b      	ldr	r3, [pc, #428]	; (8000a48 <fsm_lcd_run+0x1b4>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	3b01      	subs	r3, #1
 800089e:	2b04      	cmp	r3, #4
 80008a0:	f200 80ce 	bhi.w	8000a40 <fsm_lcd_run+0x1ac>
 80008a4:	a201      	add	r2, pc, #4	; (adr r2, 80008ac <fsm_lcd_run+0x18>)
 80008a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008aa:	bf00      	nop
 80008ac:	080008c1 	.word	0x080008c1
 80008b0:	080009ab 	.word	0x080009ab
 80008b4:	080009dd 	.word	0x080009dd
 80008b8:	08000a0f 	.word	0x08000a0f
 80008bc:	08000a41 	.word	0x08000a41
	case MODE1:
		if(status_A == AUTO_RED){
 80008c0:	4b62      	ldr	r3, [pc, #392]	; (8000a4c <fsm_lcd_run+0x1b8>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b0b      	cmp	r3, #11
 80008c6:	d10c      	bne.n	80008e2 <fsm_lcd_run+0x4e>
			lcd_goto_XY(1, 0);
 80008c8:	2100      	movs	r1, #0
 80008ca:	2001      	movs	r0, #1
 80008cc:	f000 fc1a 	bl	8001104 <lcd_goto_XY>
			lcd_send_string("RED A:");
 80008d0:	485f      	ldr	r0, [pc, #380]	; (8000a50 <fsm_lcd_run+0x1bc>)
 80008d2:	f000 fbd7 	bl	8001084 <lcd_send_string>
			if(count_Down_A == 0 ) lcd_clear_display();
 80008d6:	4b5f      	ldr	r3, [pc, #380]	; (8000a54 <fsm_lcd_run+0x1c0>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d101      	bne.n	80008e2 <fsm_lcd_run+0x4e>
 80008de:	f000 fbe6 	bl	80010ae <lcd_clear_display>
		}
		if(status_A == AUTO_GREEN){
 80008e2:	4b5a      	ldr	r3, [pc, #360]	; (8000a4c <fsm_lcd_run+0x1b8>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b0c      	cmp	r3, #12
 80008e8:	d10c      	bne.n	8000904 <fsm_lcd_run+0x70>
			lcd_goto_XY(1, 0);
 80008ea:	2100      	movs	r1, #0
 80008ec:	2001      	movs	r0, #1
 80008ee:	f000 fc09 	bl	8001104 <lcd_goto_XY>
			lcd_send_string("GREEN A:");
 80008f2:	4859      	ldr	r0, [pc, #356]	; (8000a58 <fsm_lcd_run+0x1c4>)
 80008f4:	f000 fbc6 	bl	8001084 <lcd_send_string>
			if(count_Down_A == 0 ) lcd_clear_display();
 80008f8:	4b56      	ldr	r3, [pc, #344]	; (8000a54 <fsm_lcd_run+0x1c0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d101      	bne.n	8000904 <fsm_lcd_run+0x70>
 8000900:	f000 fbd5 	bl	80010ae <lcd_clear_display>
		}
		if(status_A == AUTO_YELLOW){
 8000904:	4b51      	ldr	r3, [pc, #324]	; (8000a4c <fsm_lcd_run+0x1b8>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b0d      	cmp	r3, #13
 800090a:	d10c      	bne.n	8000926 <fsm_lcd_run+0x92>
			lcd_goto_XY(1, 0);
 800090c:	2100      	movs	r1, #0
 800090e:	2001      	movs	r0, #1
 8000910:	f000 fbf8 	bl	8001104 <lcd_goto_XY>
			lcd_send_string("YELLOW A:");
 8000914:	4851      	ldr	r0, [pc, #324]	; (8000a5c <fsm_lcd_run+0x1c8>)
 8000916:	f000 fbb5 	bl	8001084 <lcd_send_string>
			if(count_Down_A == 0 ) lcd_clear_display();
 800091a:	4b4e      	ldr	r3, [pc, #312]	; (8000a54 <fsm_lcd_run+0x1c0>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d101      	bne.n	8000926 <fsm_lcd_run+0x92>
 8000922:	f000 fbc4 	bl	80010ae <lcd_clear_display>
		}
		if(status_B == AUTO_RED){
 8000926:	4b4e      	ldr	r3, [pc, #312]	; (8000a60 <fsm_lcd_run+0x1cc>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b0b      	cmp	r3, #11
 800092c:	d10c      	bne.n	8000948 <fsm_lcd_run+0xb4>
			lcd_goto_XY(2, 0);
 800092e:	2100      	movs	r1, #0
 8000930:	2002      	movs	r0, #2
 8000932:	f000 fbe7 	bl	8001104 <lcd_goto_XY>
			lcd_send_string("RED B:");
 8000936:	484b      	ldr	r0, [pc, #300]	; (8000a64 <fsm_lcd_run+0x1d0>)
 8000938:	f000 fba4 	bl	8001084 <lcd_send_string>
			if(count_Down_B == 0 ) lcd_clear_display();
 800093c:	4b4a      	ldr	r3, [pc, #296]	; (8000a68 <fsm_lcd_run+0x1d4>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d101      	bne.n	8000948 <fsm_lcd_run+0xb4>
 8000944:	f000 fbb3 	bl	80010ae <lcd_clear_display>
		}
		if(status_B == AUTO_GREEN){
 8000948:	4b45      	ldr	r3, [pc, #276]	; (8000a60 <fsm_lcd_run+0x1cc>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b0c      	cmp	r3, #12
 800094e:	d10c      	bne.n	800096a <fsm_lcd_run+0xd6>
			lcd_goto_XY(2, 0);
 8000950:	2100      	movs	r1, #0
 8000952:	2002      	movs	r0, #2
 8000954:	f000 fbd6 	bl	8001104 <lcd_goto_XY>
			lcd_send_string("GREEN B:");
 8000958:	4844      	ldr	r0, [pc, #272]	; (8000a6c <fsm_lcd_run+0x1d8>)
 800095a:	f000 fb93 	bl	8001084 <lcd_send_string>
			if(count_Down_B == 0 ) lcd_clear_display();
 800095e:	4b42      	ldr	r3, [pc, #264]	; (8000a68 <fsm_lcd_run+0x1d4>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d101      	bne.n	800096a <fsm_lcd_run+0xd6>
 8000966:	f000 fba2 	bl	80010ae <lcd_clear_display>
		}
		if(status_B == AUTO_YELLOW){
 800096a:	4b3d      	ldr	r3, [pc, #244]	; (8000a60 <fsm_lcd_run+0x1cc>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2b0d      	cmp	r3, #13
 8000970:	d10c      	bne.n	800098c <fsm_lcd_run+0xf8>
			lcd_goto_XY(2, 0);
 8000972:	2100      	movs	r1, #0
 8000974:	2002      	movs	r0, #2
 8000976:	f000 fbc5 	bl	8001104 <lcd_goto_XY>
			lcd_send_string("YELLOW B:");
 800097a:	483d      	ldr	r0, [pc, #244]	; (8000a70 <fsm_lcd_run+0x1dc>)
 800097c:	f000 fb82 	bl	8001084 <lcd_send_string>
			if(count_Down_B == 0 ) lcd_clear_display();
 8000980:	4b39      	ldr	r3, [pc, #228]	; (8000a68 <fsm_lcd_run+0x1d4>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d101      	bne.n	800098c <fsm_lcd_run+0xf8>
 8000988:	f000 fb91 	bl	80010ae <lcd_clear_display>
		}
		lcd_display_value(1, 10, count_Down_A);
 800098c:	4b31      	ldr	r3, [pc, #196]	; (8000a54 <fsm_lcd_run+0x1c0>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	461a      	mov	r2, r3
 8000992:	210a      	movs	r1, #10
 8000994:	2001      	movs	r0, #1
 8000996:	f000 fb91 	bl	80010bc <lcd_display_value>
		lcd_display_value(2, 10, count_Down_B);
 800099a:	4b33      	ldr	r3, [pc, #204]	; (8000a68 <fsm_lcd_run+0x1d4>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	461a      	mov	r2, r3
 80009a0:	210a      	movs	r1, #10
 80009a2:	2002      	movs	r0, #2
 80009a4:	f000 fb8a 	bl	80010bc <lcd_display_value>

		break;
 80009a8:	e04b      	b.n	8000a42 <fsm_lcd_run+0x1ae>
	case MODE2:
		lcd_goto_XY(1, 0);
 80009aa:	2100      	movs	r1, #0
 80009ac:	2001      	movs	r0, #1
 80009ae:	f000 fba9 	bl	8001104 <lcd_goto_XY>
		lcd_send_string("SET TIMER RED");
 80009b2:	4830      	ldr	r0, [pc, #192]	; (8000a74 <fsm_lcd_run+0x1e0>)
 80009b4:	f000 fb66 	bl	8001084 <lcd_send_string>
		lcd_goto_XY(2, 1);
 80009b8:	2101      	movs	r1, #1
 80009ba:	2002      	movs	r0, #2
 80009bc:	f000 fba2 	bl	8001104 <lcd_goto_XY>
		lcd_send_string("DURATION:");
 80009c0:	482d      	ldr	r0, [pc, #180]	; (8000a78 <fsm_lcd_run+0x1e4>)
 80009c2:	f000 fb5f 	bl	8001084 <lcd_send_string>
		lcd_display_value(2, 10, RED_timer + temp);
 80009c6:	4b2d      	ldr	r3, [pc, #180]	; (8000a7c <fsm_lcd_run+0x1e8>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	4b2d      	ldr	r3, [pc, #180]	; (8000a80 <fsm_lcd_run+0x1ec>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4413      	add	r3, r2
 80009d0:	461a      	mov	r2, r3
 80009d2:	210a      	movs	r1, #10
 80009d4:	2002      	movs	r0, #2
 80009d6:	f000 fb71 	bl	80010bc <lcd_display_value>
		break;
 80009da:	e032      	b.n	8000a42 <fsm_lcd_run+0x1ae>
	case MODE3:
		lcd_goto_XY(1, 0);
 80009dc:	2100      	movs	r1, #0
 80009de:	2001      	movs	r0, #1
 80009e0:	f000 fb90 	bl	8001104 <lcd_goto_XY>
		lcd_send_string("SET TIMER GREEN");
 80009e4:	4827      	ldr	r0, [pc, #156]	; (8000a84 <fsm_lcd_run+0x1f0>)
 80009e6:	f000 fb4d 	bl	8001084 <lcd_send_string>
		lcd_goto_XY(2, 1);
 80009ea:	2101      	movs	r1, #1
 80009ec:	2002      	movs	r0, #2
 80009ee:	f000 fb89 	bl	8001104 <lcd_goto_XY>
		lcd_send_string("DURATION:");
 80009f2:	4821      	ldr	r0, [pc, #132]	; (8000a78 <fsm_lcd_run+0x1e4>)
 80009f4:	f000 fb46 	bl	8001084 <lcd_send_string>
		lcd_display_value(2, 10, GREEN_timer + temp);
 80009f8:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <fsm_lcd_run+0x1f4>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b20      	ldr	r3, [pc, #128]	; (8000a80 <fsm_lcd_run+0x1ec>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4413      	add	r3, r2
 8000a02:	461a      	mov	r2, r3
 8000a04:	210a      	movs	r1, #10
 8000a06:	2002      	movs	r0, #2
 8000a08:	f000 fb58 	bl	80010bc <lcd_display_value>
		break;
 8000a0c:	e019      	b.n	8000a42 <fsm_lcd_run+0x1ae>
	case MODE4:
		lcd_goto_XY(1, 0);
 8000a0e:	2100      	movs	r1, #0
 8000a10:	2001      	movs	r0, #1
 8000a12:	f000 fb77 	bl	8001104 <lcd_goto_XY>
		lcd_send_string("SET TIMER YELLOW");
 8000a16:	481d      	ldr	r0, [pc, #116]	; (8000a8c <fsm_lcd_run+0x1f8>)
 8000a18:	f000 fb34 	bl	8001084 <lcd_send_string>
		lcd_goto_XY(2, 1);
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	2002      	movs	r0, #2
 8000a20:	f000 fb70 	bl	8001104 <lcd_goto_XY>
		lcd_send_string("DURATION:");
 8000a24:	4814      	ldr	r0, [pc, #80]	; (8000a78 <fsm_lcd_run+0x1e4>)
 8000a26:	f000 fb2d 	bl	8001084 <lcd_send_string>
		lcd_display_value(2, 10, YELLOW_timer + temp);
 8000a2a:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <fsm_lcd_run+0x1fc>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <fsm_lcd_run+0x1ec>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	461a      	mov	r2, r3
 8000a36:	210a      	movs	r1, #10
 8000a38:	2002      	movs	r0, #2
 8000a3a:	f000 fb3f 	bl	80010bc <lcd_display_value>
		break;
 8000a3e:	e000      	b.n	8000a42 <fsm_lcd_run+0x1ae>
	case MODE5:
		break;


	default:
		break;
 8000a40:	bf00      	nop
	}
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200000fc 	.word	0x200000fc
 8000a4c:	20000044 	.word	0x20000044
 8000a50:	08004364 	.word	0x08004364
 8000a54:	20000124 	.word	0x20000124
 8000a58:	0800436c 	.word	0x0800436c
 8000a5c:	08004378 	.word	0x08004378
 8000a60:	20000048 	.word	0x20000048
 8000a64:	08004384 	.word	0x08004384
 8000a68:	20000128 	.word	0x20000128
 8000a6c:	0800438c 	.word	0x0800438c
 8000a70:	08004398 	.word	0x08004398
 8000a74:	080043a4 	.word	0x080043a4
 8000a78:	080043b4 	.word	0x080043b4
 8000a7c:	2000004c 	.word	0x2000004c
 8000a80:	200000f8 	.word	0x200000f8
 8000a84:	080043c0 	.word	0x080043c0
 8000a88:	20000050 	.word	0x20000050
 8000a8c:	080043d0 	.word	0x080043d0
 8000a90:	20000054 	.word	0x20000054

08000a94 <status_manual_mode>:

#include "fsm_manual.h"

int status_manual = 0;

void status_manual_mode(){
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
	if(status_A == AUTO_RED && status_B == AUTO_GREEN){
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <status_manual_mode+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b0b      	cmp	r3, #11
 8000a9e:	d106      	bne.n	8000aae <status_manual_mode+0x1a>
 8000aa0:	4b16      	ldr	r3, [pc, #88]	; (8000afc <status_manual_mode+0x68>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b0c      	cmp	r3, #12
 8000aa6:	d102      	bne.n	8000aae <status_manual_mode+0x1a>
		status_manual = RED_GREEN;
 8000aa8:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <status_manual_mode+0x6c>)
 8000aaa:	2215      	movs	r2, #21
 8000aac:	601a      	str	r2, [r3, #0]

	}
	if(status_A == AUTO_RED && status_B == AUTO_YELLOW){
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <status_manual_mode+0x64>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b0b      	cmp	r3, #11
 8000ab4:	d106      	bne.n	8000ac4 <status_manual_mode+0x30>
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <status_manual_mode+0x68>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2b0d      	cmp	r3, #13
 8000abc:	d102      	bne.n	8000ac4 <status_manual_mode+0x30>
		status_manual = RED_YELLOW;
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <status_manual_mode+0x6c>)
 8000ac0:	2216      	movs	r2, #22
 8000ac2:	601a      	str	r2, [r3, #0]

	}
	if(status_A == AUTO_GREEN && status_B == AUTO_RED){
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <status_manual_mode+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b0c      	cmp	r3, #12
 8000aca:	d106      	bne.n	8000ada <status_manual_mode+0x46>
 8000acc:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <status_manual_mode+0x68>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b0b      	cmp	r3, #11
 8000ad2:	d102      	bne.n	8000ada <status_manual_mode+0x46>
		status_manual = GREEN_RED;
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <status_manual_mode+0x6c>)
 8000ad6:	2217      	movs	r2, #23
 8000ad8:	601a      	str	r2, [r3, #0]

	}
	if(status_A == AUTO_YELLOW && status_B == AUTO_RED){
 8000ada:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <status_manual_mode+0x64>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b0d      	cmp	r3, #13
 8000ae0:	d106      	bne.n	8000af0 <status_manual_mode+0x5c>
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <status_manual_mode+0x68>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2b0b      	cmp	r3, #11
 8000ae8:	d102      	bne.n	8000af0 <status_manual_mode+0x5c>
		status_manual = YELLOW_RED;
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <status_manual_mode+0x6c>)
 8000aec:	2218      	movs	r2, #24
 8000aee:	601a      	str	r2, [r3, #0]

	}
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	20000044 	.word	0x20000044
 8000afc:	20000048 	.word	0x20000048
 8000b00:	200000f4 	.word	0x200000f4

08000b04 <fsm_manual_run>:

void fsm_manual_run(){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	switch(status_manual){
 8000b08:	4b94      	ldr	r3, [pc, #592]	; (8000d5c <fsm_manual_run+0x258>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	3b14      	subs	r3, #20
 8000b0e:	2b04      	cmp	r3, #4
 8000b10:	f200 8121 	bhi.w	8000d56 <fsm_manual_run+0x252>
 8000b14:	a201      	add	r2, pc, #4	; (adr r2, 8000b1c <fsm_manual_run+0x18>)
 8000b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b1a:	bf00      	nop
 8000b1c:	08000b31 	.word	0x08000b31
 8000b20:	08000b37 	.word	0x08000b37
 8000b24:	08000bbf 	.word	0x08000bbf
 8000b28:	08000c47 	.word	0x08000c47
 8000b2c:	08000ccf 	.word	0x08000ccf
	case MAN:
		status_manual_mode();
 8000b30:	f7ff ffb0 	bl	8000a94 <status_manual_mode>
		break;
 8000b34:	e110      	b.n	8000d58 <fsm_manual_run+0x254>
	case RED_GREEN:
		statusManTraffic();
 8000b36:	f7ff fcdb 	bl	80004f0 <statusManTraffic>
		lcd_goto_XY(1, 0);
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	f000 fae1 	bl	8001104 <lcd_goto_XY>
		lcd_send_string("RED");
 8000b42:	4887      	ldr	r0, [pc, #540]	; (8000d60 <fsm_manual_run+0x25c>)
 8000b44:	f000 fa9e 	bl	8001084 <lcd_send_string>
		lcd_goto_XY(2, 0);
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2002      	movs	r0, #2
 8000b4c:	f000 fada 	bl	8001104 <lcd_goto_XY>
		lcd_send_string("GREEN");
 8000b50:	4884      	ldr	r0, [pc, #528]	; (8000d64 <fsm_manual_run+0x260>)
 8000b52:	f000 fa97 	bl	8001084 <lcd_send_string>
		if(IsButtonPress(2)== 1){
 8000b56:	2002      	movs	r0, #2
 8000b58:	f7ff faf8 	bl	800014c <IsButtonPress>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d104      	bne.n	8000b6c <fsm_manual_run+0x68>
			status_manual = RED_YELLOW;
 8000b62:	4b7e      	ldr	r3, [pc, #504]	; (8000d5c <fsm_manual_run+0x258>)
 8000b64:	2216      	movs	r2, #22
 8000b66:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000b68:	f000 faa1 	bl	80010ae <lcd_clear_display>
		}
		if(IsButtonPress(1)==1 ){
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f7ff faed 	bl	800014c <IsButtonPress>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d11f      	bne.n	8000bb8 <fsm_manual_run+0xb4>
			status_A = AUTO_RED;
 8000b78:	4b7b      	ldr	r3, [pc, #492]	; (8000d68 <fsm_manual_run+0x264>)
 8000b7a:	220b      	movs	r2, #11
 8000b7c:	601a      	str	r2, [r3, #0]
			status_B = AUTO_GREEN;
 8000b7e:	4b7b      	ldr	r3, [pc, #492]	; (8000d6c <fsm_manual_run+0x268>)
 8000b80:	220c      	movs	r2, #12
 8000b82:	601a      	str	r2, [r3, #0]
			setTimer(0, 1000);
 8000b84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f000 fc97 	bl	80014bc <setTimer>
			setTimer(1, 1000);
 8000b8e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b92:	2001      	movs	r0, #1
 8000b94:	f000 fc92 	bl	80014bc <setTimer>
			count_Down_A = RED_timer;
 8000b98:	4b75      	ldr	r3, [pc, #468]	; (8000d70 <fsm_manual_run+0x26c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a75      	ldr	r2, [pc, #468]	; (8000d74 <fsm_manual_run+0x270>)
 8000b9e:	6013      	str	r3, [r2, #0]
			count_Down_B = GREEN_timer;
 8000ba0:	4b75      	ldr	r3, [pc, #468]	; (8000d78 <fsm_manual_run+0x274>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a75      	ldr	r2, [pc, #468]	; (8000d7c <fsm_manual_run+0x278>)
 8000ba6:	6013      	str	r3, [r2, #0]
			status_manual=0;
 8000ba8:	4b6c      	ldr	r3, [pc, #432]	; (8000d5c <fsm_manual_run+0x258>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
			statusMode=MODE1;
 8000bae:	4b74      	ldr	r3, [pc, #464]	; (8000d80 <fsm_manual_run+0x27c>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000bb4:	f000 fa7b 	bl	80010ae <lcd_clear_display>
		}
		displayTraffic();
 8000bb8:	f7ff fbfa 	bl	80003b0 <displayTraffic>
		break;
 8000bbc:	e0cc      	b.n	8000d58 <fsm_manual_run+0x254>
	case RED_YELLOW:
		statusManTraffic();
 8000bbe:	f7ff fc97 	bl	80004f0 <statusManTraffic>
		lcd_goto_XY(1, 0);
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f000 fa9d 	bl	8001104 <lcd_goto_XY>
		lcd_send_string("RED");
 8000bca:	4865      	ldr	r0, [pc, #404]	; (8000d60 <fsm_manual_run+0x25c>)
 8000bcc:	f000 fa5a 	bl	8001084 <lcd_send_string>
		lcd_goto_XY(2, 0);
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	f000 fa96 	bl	8001104 <lcd_goto_XY>
		lcd_send_string("YELLOW");
 8000bd8:	486a      	ldr	r0, [pc, #424]	; (8000d84 <fsm_manual_run+0x280>)
 8000bda:	f000 fa53 	bl	8001084 <lcd_send_string>
		if(IsButtonPress(2)== 1){
 8000bde:	2002      	movs	r0, #2
 8000be0:	f7ff fab4 	bl	800014c <IsButtonPress>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d104      	bne.n	8000bf4 <fsm_manual_run+0xf0>
			status_manual = GREEN_RED;
 8000bea:	4b5c      	ldr	r3, [pc, #368]	; (8000d5c <fsm_manual_run+0x258>)
 8000bec:	2217      	movs	r2, #23
 8000bee:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000bf0:	f000 fa5d 	bl	80010ae <lcd_clear_display>
		}
		if(IsButtonPress(1)==1 ){
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	f7ff faa9 	bl	800014c <IsButtonPress>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d11f      	bne.n	8000c40 <fsm_manual_run+0x13c>
			status_A = AUTO_RED;
 8000c00:	4b59      	ldr	r3, [pc, #356]	; (8000d68 <fsm_manual_run+0x264>)
 8000c02:	220b      	movs	r2, #11
 8000c04:	601a      	str	r2, [r3, #0]
			status_B = AUTO_YELLOW;
 8000c06:	4b59      	ldr	r3, [pc, #356]	; (8000d6c <fsm_manual_run+0x268>)
 8000c08:	220d      	movs	r2, #13
 8000c0a:	601a      	str	r2, [r3, #0]
			setTimer(0, 1000);
 8000c0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c10:	2000      	movs	r0, #0
 8000c12:	f000 fc53 	bl	80014bc <setTimer>
			setTimer(1, 1000);
 8000c16:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f000 fc4e 	bl	80014bc <setTimer>
			count_Down_A = YELLOW_timer;
 8000c20:	4b59      	ldr	r3, [pc, #356]	; (8000d88 <fsm_manual_run+0x284>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a53      	ldr	r2, [pc, #332]	; (8000d74 <fsm_manual_run+0x270>)
 8000c26:	6013      	str	r3, [r2, #0]
			count_Down_B = YELLOW_timer;
 8000c28:	4b57      	ldr	r3, [pc, #348]	; (8000d88 <fsm_manual_run+0x284>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a53      	ldr	r2, [pc, #332]	; (8000d7c <fsm_manual_run+0x278>)
 8000c2e:	6013      	str	r3, [r2, #0]
			status_manual=0;
 8000c30:	4b4a      	ldr	r3, [pc, #296]	; (8000d5c <fsm_manual_run+0x258>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
			statusMode=MODE1;
 8000c36:	4b52      	ldr	r3, [pc, #328]	; (8000d80 <fsm_manual_run+0x27c>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000c3c:	f000 fa37 	bl	80010ae <lcd_clear_display>
		}
		displayTraffic();
 8000c40:	f7ff fbb6 	bl	80003b0 <displayTraffic>
		break;
 8000c44:	e088      	b.n	8000d58 <fsm_manual_run+0x254>
	case GREEN_RED:
		statusManTraffic();
 8000c46:	f7ff fc53 	bl	80004f0 <statusManTraffic>
		lcd_goto_XY(1, 0);
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	f000 fa59 	bl	8001104 <lcd_goto_XY>
		lcd_send_string("GREEN");
 8000c52:	4844      	ldr	r0, [pc, #272]	; (8000d64 <fsm_manual_run+0x260>)
 8000c54:	f000 fa16 	bl	8001084 <lcd_send_string>
		lcd_goto_XY(2, 0);
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2002      	movs	r0, #2
 8000c5c:	f000 fa52 	bl	8001104 <lcd_goto_XY>
		lcd_send_string("RED");
 8000c60:	483f      	ldr	r0, [pc, #252]	; (8000d60 <fsm_manual_run+0x25c>)
 8000c62:	f000 fa0f 	bl	8001084 <lcd_send_string>
		if(IsButtonPress(2)== 1){
 8000c66:	2002      	movs	r0, #2
 8000c68:	f7ff fa70 	bl	800014c <IsButtonPress>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d104      	bne.n	8000c7c <fsm_manual_run+0x178>
			status_manual = YELLOW_RED;
 8000c72:	4b3a      	ldr	r3, [pc, #232]	; (8000d5c <fsm_manual_run+0x258>)
 8000c74:	2218      	movs	r2, #24
 8000c76:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000c78:	f000 fa19 	bl	80010ae <lcd_clear_display>
		}
		if(IsButtonPress(1)==1 ){
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f7ff fa65 	bl	800014c <IsButtonPress>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d11f      	bne.n	8000cc8 <fsm_manual_run+0x1c4>
			status_A = AUTO_GREEN;
 8000c88:	4b37      	ldr	r3, [pc, #220]	; (8000d68 <fsm_manual_run+0x264>)
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	601a      	str	r2, [r3, #0]
			status_B = AUTO_RED;
 8000c8e:	4b37      	ldr	r3, [pc, #220]	; (8000d6c <fsm_manual_run+0x268>)
 8000c90:	220b      	movs	r2, #11
 8000c92:	601a      	str	r2, [r3, #0]
			setTimer(0, 1000);
 8000c94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c98:	2000      	movs	r0, #0
 8000c9a:	f000 fc0f 	bl	80014bc <setTimer>
			setTimer(1, 1000);
 8000c9e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f000 fc0a 	bl	80014bc <setTimer>
			count_Down_A = GREEN_timer;
 8000ca8:	4b33      	ldr	r3, [pc, #204]	; (8000d78 <fsm_manual_run+0x274>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a31      	ldr	r2, [pc, #196]	; (8000d74 <fsm_manual_run+0x270>)
 8000cae:	6013      	str	r3, [r2, #0]
			count_Down_B = RED_timer;
 8000cb0:	4b2f      	ldr	r3, [pc, #188]	; (8000d70 <fsm_manual_run+0x26c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a31      	ldr	r2, [pc, #196]	; (8000d7c <fsm_manual_run+0x278>)
 8000cb6:	6013      	str	r3, [r2, #0]
			status_manual=0;
 8000cb8:	4b28      	ldr	r3, [pc, #160]	; (8000d5c <fsm_manual_run+0x258>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
			statusMode=MODE1;
 8000cbe:	4b30      	ldr	r3, [pc, #192]	; (8000d80 <fsm_manual_run+0x27c>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000cc4:	f000 f9f3 	bl	80010ae <lcd_clear_display>
		}
		displayTraffic();
 8000cc8:	f7ff fb72 	bl	80003b0 <displayTraffic>
		break;
 8000ccc:	e044      	b.n	8000d58 <fsm_manual_run+0x254>
	case YELLOW_RED:
		statusManTraffic();
 8000cce:	f7ff fc0f 	bl	80004f0 <statusManTraffic>
		lcd_goto_XY(1, 0);
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f000 fa15 	bl	8001104 <lcd_goto_XY>
		lcd_send_string("YELLOW");
 8000cda:	482a      	ldr	r0, [pc, #168]	; (8000d84 <fsm_manual_run+0x280>)
 8000cdc:	f000 f9d2 	bl	8001084 <lcd_send_string>
		lcd_goto_XY(2, 0);
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2002      	movs	r0, #2
 8000ce4:	f000 fa0e 	bl	8001104 <lcd_goto_XY>
		lcd_send_string("RED");
 8000ce8:	481d      	ldr	r0, [pc, #116]	; (8000d60 <fsm_manual_run+0x25c>)
 8000cea:	f000 f9cb 	bl	8001084 <lcd_send_string>
		if(IsButtonPress(2) == 1){
 8000cee:	2002      	movs	r0, #2
 8000cf0:	f7ff fa2c 	bl	800014c <IsButtonPress>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d104      	bne.n	8000d04 <fsm_manual_run+0x200>
			status_manual = RED_GREEN;
 8000cfa:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <fsm_manual_run+0x258>)
 8000cfc:	2215      	movs	r2, #21
 8000cfe:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000d00:	f000 f9d5 	bl	80010ae <lcd_clear_display>
		}
		if(IsButtonPress(1) ==1 ){
 8000d04:	2001      	movs	r0, #1
 8000d06:	f7ff fa21 	bl	800014c <IsButtonPress>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d11f      	bne.n	8000d50 <fsm_manual_run+0x24c>
			status_A = AUTO_YELLOW;
 8000d10:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <fsm_manual_run+0x264>)
 8000d12:	220d      	movs	r2, #13
 8000d14:	601a      	str	r2, [r3, #0]
			status_B = AUTO_RED;
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <fsm_manual_run+0x268>)
 8000d18:	220b      	movs	r2, #11
 8000d1a:	601a      	str	r2, [r3, #0]
			setTimer(0, 1000);
 8000d1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d20:	2000      	movs	r0, #0
 8000d22:	f000 fbcb 	bl	80014bc <setTimer>
			setTimer(1, 1000);
 8000d26:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f000 fbc6 	bl	80014bc <setTimer>
			count_Down_A = YELLOW_timer;
 8000d30:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <fsm_manual_run+0x284>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0f      	ldr	r2, [pc, #60]	; (8000d74 <fsm_manual_run+0x270>)
 8000d36:	6013      	str	r3, [r2, #0]
			count_Down_B = YELLOW_timer;
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <fsm_manual_run+0x284>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0f      	ldr	r2, [pc, #60]	; (8000d7c <fsm_manual_run+0x278>)
 8000d3e:	6013      	str	r3, [r2, #0]
			status_manual=0;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <fsm_manual_run+0x258>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
			statusMode=MODE1;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <fsm_manual_run+0x27c>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000d4c:	f000 f9af 	bl	80010ae <lcd_clear_display>
		}
		displayTraffic();
 8000d50:	f7ff fb2e 	bl	80003b0 <displayTraffic>
		break;
 8000d54:	e000      	b.n	8000d58 <fsm_manual_run+0x254>
	default:
		break;
 8000d56:	bf00      	nop
	}
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	200000f4 	.word	0x200000f4
 8000d60:	080043e4 	.word	0x080043e4
 8000d64:	080043e8 	.word	0x080043e8
 8000d68:	20000044 	.word	0x20000044
 8000d6c:	20000048 	.word	0x20000048
 8000d70:	2000004c 	.word	0x2000004c
 8000d74:	20000124 	.word	0x20000124
 8000d78:	20000050 	.word	0x20000050
 8000d7c:	20000128 	.word	0x20000128
 8000d80:	200000fc 	.word	0x200000fc
 8000d84:	080043f0 	.word	0x080043f0
 8000d88:	20000054 	.word	0x20000054

08000d8c <fsm_mode>:
int GREEN_timer = 3;
int YELLOW_timer = 2;

int temp =0;

void fsm_mode(){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	switch(statusMode){
 8000d90:	4b6d      	ldr	r3, [pc, #436]	; (8000f48 <fsm_mode+0x1bc>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b05      	cmp	r3, #5
 8000d96:	f200 80d1 	bhi.w	8000f3c <fsm_mode+0x1b0>
 8000d9a:	a201      	add	r2, pc, #4	; (adr r2, 8000da0 <fsm_mode+0x14>)
 8000d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da0:	08000db9 	.word	0x08000db9
 8000da4:	08000dcd 	.word	0x08000dcd
 8000da8:	08000e0f 	.word	0x08000e0f
 8000dac:	08000e6b 	.word	0x08000e6b
 8000db0:	08000ec7 	.word	0x08000ec7
 8000db4:	08000f2f 	.word	0x08000f2f
	case INIT:
		statusMode = MODE1;
 8000db8:	4b63      	ldr	r3, [pc, #396]	; (8000f48 <fsm_mode+0x1bc>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	601a      	str	r2, [r3, #0]
		status_A = AUTO;
 8000dbe:	4b63      	ldr	r3, [pc, #396]	; (8000f4c <fsm_mode+0x1c0>)
 8000dc0:	220a      	movs	r2, #10
 8000dc2:	601a      	str	r2, [r3, #0]
		status_B = AUTO;
 8000dc4:	4b62      	ldr	r3, [pc, #392]	; (8000f50 <fsm_mode+0x1c4>)
 8000dc6:	220a      	movs	r2, #10
 8000dc8:	601a      	str	r2, [r3, #0]
		break;
 8000dca:	e0ba      	b.n	8000f42 <fsm_mode+0x1b6>
	case MODE1:
		if(IsButtonPress(0)==1){
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f7ff f9bd 	bl	800014c <IsButtonPress>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d10a      	bne.n	8000dee <fsm_mode+0x62>
			statusMode=MODE2;
 8000dd8:	4b5b      	ldr	r3, [pc, #364]	; (8000f48 <fsm_mode+0x1bc>)
 8000dda:	2202      	movs	r2, #2
 8000ddc:	601a      	str	r2, [r3, #0]
			status_A = 0;
 8000dde:	4b5b      	ldr	r3, [pc, #364]	; (8000f4c <fsm_mode+0x1c0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
			status_B = 0;
 8000de4:	4b5a      	ldr	r3, [pc, #360]	; (8000f50 <fsm_mode+0x1c4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000dea:	f000 f960 	bl	80010ae <lcd_clear_display>
		}
		if(IsButtonPress(2) == 1){
 8000dee:	2002      	movs	r0, #2
 8000df0:	f7ff f9ac 	bl	800014c <IsButtonPress>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	f040 80a2 	bne.w	8000f40 <fsm_mode+0x1b4>
			statusMode = MODE5;
 8000dfc:	4b52      	ldr	r3, [pc, #328]	; (8000f48 <fsm_mode+0x1bc>)
 8000dfe:	2205      	movs	r2, #5
 8000e00:	601a      	str	r2, [r3, #0]
			status_manual = MAN;
 8000e02:	4b54      	ldr	r3, [pc, #336]	; (8000f54 <fsm_mode+0x1c8>)
 8000e04:	2214      	movs	r2, #20
 8000e06:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000e08:	f000 f951 	bl	80010ae <lcd_clear_display>
		}
		break;
 8000e0c:	e098      	b.n	8000f40 <fsm_mode+0x1b4>
	case MODE2:
		statusModeTraffic();
 8000e0e:	f7ff fb3d 	bl	800048c <statusModeTraffic>

		if(IsButtonPress(0)==1){
 8000e12:	2000      	movs	r0, #0
 8000e14:	f7ff f99a 	bl	800014c <IsButtonPress>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d107      	bne.n	8000e2e <fsm_mode+0xa2>
			statusMode=MODE3;
 8000e1e:	4b4a      	ldr	r3, [pc, #296]	; (8000f48 <fsm_mode+0x1bc>)
 8000e20:	2203      	movs	r2, #3
 8000e22:	601a      	str	r2, [r3, #0]
			temp=0;
 8000e24:	4b4c      	ldr	r3, [pc, #304]	; (8000f58 <fsm_mode+0x1cc>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000e2a:	f000 f940 	bl	80010ae <lcd_clear_display>

		}
		if(IsButtonPress(1)==1){
 8000e2e:	2001      	movs	r0, #1
 8000e30:	f7ff f98c 	bl	800014c <IsButtonPress>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d104      	bne.n	8000e44 <fsm_mode+0xb8>
			temp+=1;
 8000e3a:	4b47      	ldr	r3, [pc, #284]	; (8000f58 <fsm_mode+0x1cc>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	4a45      	ldr	r2, [pc, #276]	; (8000f58 <fsm_mode+0x1cc>)
 8000e42:	6013      	str	r3, [r2, #0]
		}
		if(IsButtonPress(2)==1){
 8000e44:	2002      	movs	r0, #2
 8000e46:	f7ff f981 	bl	800014c <IsButtonPress>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d109      	bne.n	8000e64 <fsm_mode+0xd8>
			RED_timer+=temp;
 8000e50:	4b42      	ldr	r3, [pc, #264]	; (8000f5c <fsm_mode+0x1d0>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4b40      	ldr	r3, [pc, #256]	; (8000f58 <fsm_mode+0x1cc>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4413      	add	r3, r2
 8000e5a:	4a40      	ldr	r2, [pc, #256]	; (8000f5c <fsm_mode+0x1d0>)
 8000e5c:	6013      	str	r3, [r2, #0]
			temp=0;
 8000e5e:	4b3e      	ldr	r3, [pc, #248]	; (8000f58 <fsm_mode+0x1cc>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
		}
		displayTraffic();
 8000e64:	f7ff faa4 	bl	80003b0 <displayTraffic>
		break;
 8000e68:	e06b      	b.n	8000f42 <fsm_mode+0x1b6>
	case MODE3:
		statusModeTraffic();
 8000e6a:	f7ff fb0f 	bl	800048c <statusModeTraffic>
		if(IsButtonPress(0)==1){
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f7ff f96c 	bl	800014c <IsButtonPress>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d107      	bne.n	8000e8a <fsm_mode+0xfe>
			statusMode=MODE4;
 8000e7a:	4b33      	ldr	r3, [pc, #204]	; (8000f48 <fsm_mode+0x1bc>)
 8000e7c:	2204      	movs	r2, #4
 8000e7e:	601a      	str	r2, [r3, #0]
			temp=0;
 8000e80:	4b35      	ldr	r3, [pc, #212]	; (8000f58 <fsm_mode+0x1cc>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000e86:	f000 f912 	bl	80010ae <lcd_clear_display>

		}
		if(IsButtonPress(1)==1){
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f7ff f95e 	bl	800014c <IsButtonPress>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d104      	bne.n	8000ea0 <fsm_mode+0x114>
			temp+=1;
 8000e96:	4b30      	ldr	r3, [pc, #192]	; (8000f58 <fsm_mode+0x1cc>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	4a2e      	ldr	r2, [pc, #184]	; (8000f58 <fsm_mode+0x1cc>)
 8000e9e:	6013      	str	r3, [r2, #0]
		}
		if(IsButtonPress(2)==1){
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	f7ff f953 	bl	800014c <IsButtonPress>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d109      	bne.n	8000ec0 <fsm_mode+0x134>
			GREEN_timer+=temp;
 8000eac:	4b2c      	ldr	r3, [pc, #176]	; (8000f60 <fsm_mode+0x1d4>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b29      	ldr	r3, [pc, #164]	; (8000f58 <fsm_mode+0x1cc>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	4a2a      	ldr	r2, [pc, #168]	; (8000f60 <fsm_mode+0x1d4>)
 8000eb8:	6013      	str	r3, [r2, #0]
			temp=0;
 8000eba:	4b27      	ldr	r3, [pc, #156]	; (8000f58 <fsm_mode+0x1cc>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
		}
		displayTraffic();
 8000ec0:	f7ff fa76 	bl	80003b0 <displayTraffic>
		break;
 8000ec4:	e03d      	b.n	8000f42 <fsm_mode+0x1b6>
	case MODE4:
		statusModeTraffic();
 8000ec6:	f7ff fae1 	bl	800048c <statusModeTraffic>
		if(IsButtonPress(0)==1){
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f7ff f93e 	bl	800014c <IsButtonPress>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d10d      	bne.n	8000ef2 <fsm_mode+0x166>
			temp=0;
 8000ed6:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <fsm_mode+0x1cc>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
			statusMode=MODE1;
 8000edc:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <fsm_mode+0x1bc>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	601a      	str	r2, [r3, #0]
			status_A = AUTO;
 8000ee2:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <fsm_mode+0x1c0>)
 8000ee4:	220a      	movs	r2, #10
 8000ee6:	601a      	str	r2, [r3, #0]
			status_B = AUTO;
 8000ee8:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <fsm_mode+0x1c4>)
 8000eea:	220a      	movs	r2, #10
 8000eec:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000eee:	f000 f8de 	bl	80010ae <lcd_clear_display>
		}
		if(IsButtonPress(1)==1){
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f7ff f92a 	bl	800014c <IsButtonPress>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d104      	bne.n	8000f08 <fsm_mode+0x17c>
			temp+=1;
 8000efe:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <fsm_mode+0x1cc>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	3301      	adds	r3, #1
 8000f04:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <fsm_mode+0x1cc>)
 8000f06:	6013      	str	r3, [r2, #0]
		}
		if(IsButtonPress(2)==1){
 8000f08:	2002      	movs	r0, #2
 8000f0a:	f7ff f91f 	bl	800014c <IsButtonPress>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d109      	bne.n	8000f28 <fsm_mode+0x19c>
			YELLOW_timer+=temp;
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <fsm_mode+0x1d8>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <fsm_mode+0x1cc>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	4a11      	ldr	r2, [pc, #68]	; (8000f64 <fsm_mode+0x1d8>)
 8000f20:	6013      	str	r3, [r2, #0]
			temp=0;
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <fsm_mode+0x1cc>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
		}
		displayTraffic();
 8000f28:	f7ff fa42 	bl	80003b0 <displayTraffic>
		break;
 8000f2c:	e009      	b.n	8000f42 <fsm_mode+0x1b6>
	case MODE5:
		status_A=0;
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <fsm_mode+0x1c0>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
		status_B=0;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <fsm_mode+0x1c4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]

		break;
 8000f3a:	e002      	b.n	8000f42 <fsm_mode+0x1b6>
	default:
		break;
 8000f3c:	bf00      	nop
 8000f3e:	e000      	b.n	8000f42 <fsm_mode+0x1b6>
		break;
 8000f40:	bf00      	nop
	}
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200000fc 	.word	0x200000fc
 8000f4c:	20000044 	.word	0x20000044
 8000f50:	20000048 	.word	0x20000048
 8000f54:	200000f4 	.word	0x200000f4
 8000f58:	200000f8 	.word	0x200000f8
 8000f5c:	2000004c 	.word	0x2000004c
 8000f60:	20000050 	.word	0x20000050
 8000f64:	20000054 	.word	0x20000054

08000f68 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af02      	add	r7, sp, #8
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	f023 030f 	bic.w	r3, r3, #15
 8000f78:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	011b      	lsls	r3, r3, #4
 8000f7e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	f043 030c 	orr.w	r3, r3, #12
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	f043 0308 	orr.w	r3, r3, #8
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f94:	7bbb      	ldrb	r3, [r7, #14]
 8000f96:	f043 030c 	orr.w	r3, r3, #12
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f9e:	7bbb      	ldrb	r3, [r7, #14]
 8000fa0:	f043 0308 	orr.w	r3, r3, #8
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000fa8:	f107 0208 	add.w	r2, r7, #8
 8000fac:	2364      	movs	r3, #100	; 0x64
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2304      	movs	r3, #4
 8000fb2:	2142      	movs	r1, #66	; 0x42
 8000fb4:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <lcd_send_cmd+0x5c>)
 8000fb6:	f001 f917 	bl	80021e8 <HAL_I2C_Master_Transmit>
}
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000012c 	.word	0x2000012c

08000fc8 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f023 030f 	bic.w	r3, r3, #15
 8000fd8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	011b      	lsls	r3, r3, #4
 8000fde:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	f043 030d 	orr.w	r3, r3, #13
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	f043 0309 	orr.w	r3, r3, #9
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000ff4:	7bbb      	ldrb	r3, [r7, #14]
 8000ff6:	f043 030d 	orr.w	r3, r3, #13
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000ffe:	7bbb      	ldrb	r3, [r7, #14]
 8001000:	f043 0309 	orr.w	r3, r3, #9
 8001004:	b2db      	uxtb	r3, r3
 8001006:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001008:	f107 0208 	add.w	r2, r7, #8
 800100c:	2364      	movs	r3, #100	; 0x64
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2304      	movs	r3, #4
 8001012:	2142      	movs	r1, #66	; 0x42
 8001014:	4803      	ldr	r0, [pc, #12]	; (8001024 <lcd_send_data+0x5c>)
 8001016:	f001 f8e7 	bl	80021e8 <HAL_I2C_Master_Transmit>
}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	2000012c 	.word	0x2000012c

08001028 <lcd_init>:

void lcd_init (void) {
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 800102c:	2033      	movs	r0, #51	; 0x33
 800102e:	f7ff ff9b 	bl	8000f68 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8001032:	2032      	movs	r0, #50	; 0x32
 8001034:	f7ff ff98 	bl	8000f68 <lcd_send_cmd>
	HAL_Delay(50);
 8001038:	2032      	movs	r0, #50	; 0x32
 800103a:	f000 fc71 	bl	8001920 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 800103e:	2028      	movs	r0, #40	; 0x28
 8001040:	f7ff ff92 	bl	8000f68 <lcd_send_cmd>
	HAL_Delay(50);
 8001044:	2032      	movs	r0, #50	; 0x32
 8001046:	f000 fc6b 	bl	8001920 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 800104a:	2001      	movs	r0, #1
 800104c:	f7ff ff8c 	bl	8000f68 <lcd_send_cmd>
	HAL_Delay(50);
 8001050:	2032      	movs	r0, #50	; 0x32
 8001052:	f000 fc65 	bl	8001920 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8001056:	2006      	movs	r0, #6
 8001058:	f7ff ff86 	bl	8000f68 <lcd_send_cmd>
	HAL_Delay(50);
 800105c:	2032      	movs	r0, #50	; 0x32
 800105e:	f000 fc5f 	bl	8001920 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8001062:	200c      	movs	r0, #12
 8001064:	f7ff ff80 	bl	8000f68 <lcd_send_cmd>
	HAL_Delay(50);
 8001068:	2032      	movs	r0, #50	; 0x32
 800106a:	f000 fc59 	bl	8001920 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 800106e:	2002      	movs	r0, #2
 8001070:	f7ff ff7a 	bl	8000f68 <lcd_send_cmd>
	HAL_Delay(50);
 8001074:	2032      	movs	r0, #50	; 0x32
 8001076:	f000 fc53 	bl	8001920 <HAL_Delay>
	lcd_send_cmd (0x80);
 800107a:	2080      	movs	r0, #128	; 0x80
 800107c:	f7ff ff74 	bl	8000f68 <lcd_send_cmd>
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}

08001084 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800108c:	e006      	b.n	800109c <lcd_send_string+0x18>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	607a      	str	r2, [r7, #4]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff96 	bl	8000fc8 <lcd_send_data>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1f4      	bne.n	800108e <lcd_send_string+0xa>
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <lcd_clear_display>:

void lcd_clear_display (void)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 80010b2:	2001      	movs	r0, #1
 80010b4:	f7ff ff58 	bl	8000f68 <lcd_send_cmd>
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}

080010bc <lcd_display_value>:

void lcd_display_value(int row, int col, int value) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
    char *buffer = (char *)malloc(5 * sizeof(char)); // Cấp phát động 5 bytes (đủ cho 4 chữ số và '\0')
 80010c8:	2005      	movs	r0, #5
 80010ca:	f002 fced 	bl	8003aa8 <malloc>
 80010ce:	4603      	mov	r3, r0
 80010d0:	617b      	str	r3, [r7, #20]
    if (buffer == NULL) return; // Kiểm tra cấp phát thành công
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d00f      	beq.n	80010f8 <lcd_display_value+0x3c>

    sprintf(buffer, "%-11d", value); // Chuyển giá trị thành chuỗi
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	4909      	ldr	r1, [pc, #36]	; (8001100 <lcd_display_value+0x44>)
 80010dc:	6978      	ldr	r0, [r7, #20]
 80010de:	f002 fdb1 	bl	8003c44 <siprintf>
    lcd_goto_XY(row, col);
 80010e2:	68b9      	ldr	r1, [r7, #8]
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f000 f80d 	bl	8001104 <lcd_goto_XY>
    lcd_send_string(buffer);
 80010ea:	6978      	ldr	r0, [r7, #20]
 80010ec:	f7ff ffca 	bl	8001084 <lcd_send_string>

    free(buffer); // Giải phóng bộ nhớ sau khi dùng
 80010f0:	6978      	ldr	r0, [r7, #20]
 80010f2:	f002 fce1 	bl	8003ab8 <free>
 80010f6:	e000      	b.n	80010fa <lcd_display_value+0x3e>
    if (buffer == NULL) return; // Kiểm tra cấp phát thành công
 80010f8:	bf00      	nop
}
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	080043f8 	.word	0x080043f8

08001104 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d108      	bne.n	8001126 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	b2da      	uxtb	r2, r3
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	4413      	add	r3, r2
 800111e:	b2db      	uxtb	r3, r3
 8001120:	337f      	adds	r3, #127	; 0x7f
 8001122:	73fb      	strb	r3, [r7, #15]
 8001124:	e008      	b.n	8001138 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	b2db      	uxtb	r3, r3
 800112a:	3340      	adds	r3, #64	; 0x40
 800112c:	b2db      	uxtb	r3, r3
 800112e:	b25b      	sxtb	r3, r3
 8001130:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001134:	b25b      	sxtb	r3, r3
 8001136:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff14 	bl	8000f68 <lcd_send_cmd>
}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800114c:	f000 fb86 	bl	800185c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001150:	f000 f818 	bl	8001184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001154:	f000 f8fa 	bl	800134c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001158:	f000 f8ce 	bl	80012f8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800115c:	f000 f852 	bl	8001204 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001160:	f000 f87e 	bl	8001260 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001164:	4806      	ldr	r0, [pc, #24]	; (8001180 <main+0x38>)
 8001166:	f001 fff5 	bl	8003154 <HAL_TIM_Base_Start_IT>
  lcd_init();
 800116a:	f7ff ff5d 	bl	8001028 <lcd_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_automatic_run();
 800116e:	f7ff fa79 	bl	8000664 <fsm_automatic_run>
	  fsm_mode();
 8001172:	f7ff fe0b 	bl	8000d8c <fsm_mode>
	  fsm_manual_run();
 8001176:	f7ff fcc5 	bl	8000b04 <fsm_manual_run>
	  fsm_lcd_run();
 800117a:	f7ff fb8b 	bl	8000894 <fsm_lcd_run>
	  fsm_automatic_run();
 800117e:	e7f6      	b.n	800116e <main+0x26>
 8001180:	20000180 	.word	0x20000180

08001184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b090      	sub	sp, #64	; 0x40
 8001188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118a:	f107 0318 	add.w	r3, r7, #24
 800118e:	2228      	movs	r2, #40	; 0x28
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f002 fc98 	bl	8003ac8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011a6:	2302      	movs	r3, #2
 80011a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011aa:	2301      	movs	r3, #1
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ae:	2310      	movs	r3, #16
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b2:	2302      	movs	r3, #2
 80011b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80011b6:	2300      	movs	r3, #0
 80011b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80011ba:	2300      	movs	r3, #0
 80011bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011be:	f107 0318 	add.w	r3, r7, #24
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 fb68 	bl	8002898 <HAL_RCC_OscConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80011ce:	f000 f96f 	bl	80014b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d2:	230f      	movs	r3, #15
 80011d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d6:	2302      	movs	r3, #2
 80011d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	2100      	movs	r1, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f001 fdd3 	bl	8002d98 <HAL_RCC_ClockConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80011f8:	f000 f95a 	bl	80014b0 <Error_Handler>
  }
}
 80011fc:	bf00      	nop
 80011fe:	3740      	adds	r7, #64	; 0x40
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <MX_I2C1_Init+0x50>)
 800120a:	4a13      	ldr	r2, [pc, #76]	; (8001258 <MX_I2C1_Init+0x54>)
 800120c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <MX_I2C1_Init+0x50>)
 8001210:	4a12      	ldr	r2, [pc, #72]	; (800125c <MX_I2C1_Init+0x58>)
 8001212:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <MX_I2C1_Init+0x50>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <MX_I2C1_Init+0x50>)
 800121c:	2200      	movs	r2, #0
 800121e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <MX_I2C1_Init+0x50>)
 8001222:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001226:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001228:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <MX_I2C1_Init+0x50>)
 800122a:	2200      	movs	r2, #0
 800122c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_I2C1_Init+0x50>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001240:	4804      	ldr	r0, [pc, #16]	; (8001254 <MX_I2C1_Init+0x50>)
 8001242:	f000 fe8d 	bl	8001f60 <HAL_I2C_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800124c:	f000 f930 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	2000012c 	.word	0x2000012c
 8001258:	40005400 	.word	0x40005400
 800125c:	000186a0 	.word	0x000186a0

08001260 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001274:	463b      	mov	r3, r7
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800127c:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <MX_TIM2_Init+0x94>)
 800127e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001282:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <MX_TIM2_Init+0x94>)
 8001286:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800128a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <MX_TIM2_Init+0x94>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <MX_TIM2_Init+0x94>)
 8001294:	2209      	movs	r2, #9
 8001296:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <MX_TIM2_Init+0x94>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <MX_TIM2_Init+0x94>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012a4:	4813      	ldr	r0, [pc, #76]	; (80012f4 <MX_TIM2_Init+0x94>)
 80012a6:	f001 ff05 	bl	80030b4 <HAL_TIM_Base_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012b0:	f000 f8fe 	bl	80014b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ba:	f107 0308 	add.w	r3, r7, #8
 80012be:	4619      	mov	r1, r3
 80012c0:	480c      	ldr	r0, [pc, #48]	; (80012f4 <MX_TIM2_Init+0x94>)
 80012c2:	f002 f889 	bl	80033d8 <HAL_TIM_ConfigClockSource>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012cc:	f000 f8f0 	bl	80014b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d0:	2300      	movs	r3, #0
 80012d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012d8:	463b      	mov	r3, r7
 80012da:	4619      	mov	r1, r3
 80012dc:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_TIM2_Init+0x94>)
 80012de:	f002 fa6b 	bl	80037b8 <HAL_TIMEx_MasterConfigSynchronization>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012e8:	f000 f8e2 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000180 	.word	0x20000180

080012f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_USART2_UART_Init+0x4c>)
 80012fe:	4a12      	ldr	r2, [pc, #72]	; (8001348 <MX_USART2_UART_Init+0x50>)
 8001300:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <MX_USART2_UART_Init+0x4c>)
 8001304:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001308:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <MX_USART2_UART_Init+0x4c>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <MX_USART2_UART_Init+0x4c>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <MX_USART2_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <MX_USART2_UART_Init+0x4c>)
 800131e:	220c      	movs	r2, #12
 8001320:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <MX_USART2_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <MX_USART2_UART_Init+0x4c>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800132e:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_USART2_UART_Init+0x4c>)
 8001330:	f002 fab2 	bl	8003898 <HAL_UART_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800133a:	f000 f8b9 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200001c8 	.word	0x200001c8
 8001348:	40004400 	.word	0x40004400

0800134c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001360:	4b48      	ldr	r3, [pc, #288]	; (8001484 <MX_GPIO_Init+0x138>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	4a47      	ldr	r2, [pc, #284]	; (8001484 <MX_GPIO_Init+0x138>)
 8001366:	f043 0310 	orr.w	r3, r3, #16
 800136a:	6193      	str	r3, [r2, #24]
 800136c:	4b45      	ldr	r3, [pc, #276]	; (8001484 <MX_GPIO_Init+0x138>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	f003 0310 	and.w	r3, r3, #16
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001378:	4b42      	ldr	r3, [pc, #264]	; (8001484 <MX_GPIO_Init+0x138>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4a41      	ldr	r2, [pc, #260]	; (8001484 <MX_GPIO_Init+0x138>)
 800137e:	f043 0320 	orr.w	r3, r3, #32
 8001382:	6193      	str	r3, [r2, #24]
 8001384:	4b3f      	ldr	r3, [pc, #252]	; (8001484 <MX_GPIO_Init+0x138>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0320 	and.w	r3, r3, #32
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001390:	4b3c      	ldr	r3, [pc, #240]	; (8001484 <MX_GPIO_Init+0x138>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a3b      	ldr	r2, [pc, #236]	; (8001484 <MX_GPIO_Init+0x138>)
 8001396:	f043 0304 	orr.w	r3, r3, #4
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b39      	ldr	r3, [pc, #228]	; (8001484 <MX_GPIO_Init+0x138>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a8:	4b36      	ldr	r3, [pc, #216]	; (8001484 <MX_GPIO_Init+0x138>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a35      	ldr	r2, [pc, #212]	; (8001484 <MX_GPIO_Init+0x138>)
 80013ae:	f043 0308 	orr.w	r3, r3, #8
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b33      	ldr	r3, [pc, #204]	; (8001484 <MX_GPIO_Init+0x138>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D7_Pin|D8_Pin, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 7148 	mov.w	r1, #800	; 0x320
 80013c6:	4830      	ldr	r0, [pc, #192]	; (8001488 <MX_GPIO_Init+0x13c>)
 80013c8:	f000 fd77 	bl	8001eba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin
 80013cc:	2200      	movs	r2, #0
 80013ce:	f44f 618f 	mov.w	r1, #1144	; 0x478
 80013d2:	482e      	ldr	r0, [pc, #184]	; (800148c <MX_GPIO_Init+0x140>)
 80013d4:	f000 fd71 	bl	8001eba <HAL_GPIO_WritePin>
                          |D10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, GPIO_PIN_RESET);
 80013d8:	2200      	movs	r2, #0
 80013da:	2180      	movs	r1, #128	; 0x80
 80013dc:	482c      	ldr	r0, [pc, #176]	; (8001490 <MX_GPIO_Init+0x144>)
 80013de:	f000 fd6c 	bl	8001eba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013e8:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <MX_GPIO_Init+0x148>)
 80013ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	4619      	mov	r1, r3
 80013f6:	4826      	ldr	r0, [pc, #152]	; (8001490 <MX_GPIO_Init+0x144>)
 80013f8:	f000 fbc4 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_Pin A1_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin;
 80013fc:	2303      	movs	r3, #3
 80013fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001404:	2301      	movs	r3, #1
 8001406:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	4619      	mov	r1, r3
 800140e:	481e      	ldr	r0, [pc, #120]	; (8001488 <MX_GPIO_Init+0x13c>)
 8001410:	f000 fbb8 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D7_Pin D8_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D7_Pin|D8_Pin;
 8001414:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001418:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2302      	movs	r3, #2
 8001424:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f107 0310 	add.w	r3, r7, #16
 800142a:	4619      	mov	r1, r3
 800142c:	4816      	ldr	r0, [pc, #88]	; (8001488 <MX_GPIO_Init+0x13c>)
 800142e:	f000 fba9 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin
                           D10_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin
 8001432:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8001436:	613b      	str	r3, [r7, #16]
                          |D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001438:	2301      	movs	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2302      	movs	r3, #2
 8001442:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001444:	f107 0310 	add.w	r3, r7, #16
 8001448:	4619      	mov	r1, r3
 800144a:	4810      	ldr	r0, [pc, #64]	; (800148c <MX_GPIO_Init+0x140>)
 800144c:	f000 fb9a 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_Pin */
  GPIO_InitStruct.Pin = D9_Pin;
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2302      	movs	r3, #2
 800145e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D9_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	4619      	mov	r1, r3
 8001466:	480a      	ldr	r0, [pc, #40]	; (8001490 <MX_GPIO_Init+0x144>)
 8001468:	f000 fb8c 	bl	8001b84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800146c:	2200      	movs	r2, #0
 800146e:	2100      	movs	r1, #0
 8001470:	2028      	movs	r0, #40	; 0x28
 8001472:	f000 fb50 	bl	8001b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001476:	2028      	movs	r0, #40	; 0x28
 8001478:	f000 fb69 	bl	8001b4e <HAL_NVIC_EnableIRQ>

}
 800147c:	bf00      	nop
 800147e:	3720      	adds	r7, #32
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40021000 	.word	0x40021000
 8001488:	40010800 	.word	0x40010800
 800148c:	40010c00 	.word	0x40010c00
 8001490:	40011000 	.word	0x40011000
 8001494:	10110000 	.word	0x10110000

08001498 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	timerun();
 80014a0:	f000 f82c 	bl	80014fc <timerun>
	getKeyInput();
 80014a4:	f7fe feaa 	bl	80001fc <getKeyInput>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b4:	b672      	cpsid	i
}
 80014b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <Error_Handler+0x8>
	...

080014bc <setTimer>:


int timer_flag[10];
int timer_counter[10];

void setTimer(int index, int counter) {
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
    timer_flag[index] = 0;
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <setTimer+0x34>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2100      	movs	r1, #0
 80014cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    timer_counter[index] = counter / TICK;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <setTimer+0x38>)
 80014d4:	fb82 1203 	smull	r1, r2, r2, r3
 80014d8:	1092      	asrs	r2, r2, #2
 80014da:	17db      	asrs	r3, r3, #31
 80014dc:	1ad2      	subs	r2, r2, r3
 80014de:	4906      	ldr	r1, [pc, #24]	; (80014f8 <setTimer+0x3c>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	20000238 	.word	0x20000238
 80014f4:	66666667 	.word	0x66666667
 80014f8:	20000210 	.word	0x20000210

080014fc <timerun>:

void timerun() {
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
    for (int i = 0; i < 10; i++) {  // Corrected loop condition
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	e01c      	b.n	8001542 <timerun+0x46>
        if (timer_counter[i] >= 0) {
 8001508:	4a12      	ldr	r2, [pc, #72]	; (8001554 <timerun+0x58>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001510:	2b00      	cmp	r3, #0
 8001512:	db13      	blt.n	800153c <timerun+0x40>
            timer_counter[i]--;
 8001514:	4a0f      	ldr	r2, [pc, #60]	; (8001554 <timerun+0x58>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151c:	1e5a      	subs	r2, r3, #1
 800151e:	490d      	ldr	r1, [pc, #52]	; (8001554 <timerun+0x58>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if (timer_counter[i] <= 0) {
 8001526:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <timerun+0x58>)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152e:	2b00      	cmp	r3, #0
 8001530:	dc04      	bgt.n	800153c <timerun+0x40>
                timer_flag[i] = 1;
 8001532:	4a09      	ldr	r2, [pc, #36]	; (8001558 <timerun+0x5c>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2101      	movs	r1, #1
 8001538:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < 10; i++) {  // Corrected loop condition
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3301      	adds	r3, #1
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b09      	cmp	r3, #9
 8001546:	dddf      	ble.n	8001508 <timerun+0xc>
            }
        }
    }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	20000210 	.word	0x20000210
 8001558:	20000238 	.word	0x20000238

0800155c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <HAL_MspInit+0x5c>)
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	4a14      	ldr	r2, [pc, #80]	; (80015b8 <HAL_MspInit+0x5c>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6193      	str	r3, [r2, #24]
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_MspInit+0x5c>)
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800157a:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <HAL_MspInit+0x5c>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	4a0e      	ldr	r2, [pc, #56]	; (80015b8 <HAL_MspInit+0x5c>)
 8001580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001584:	61d3      	str	r3, [r2, #28]
 8001586:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <HAL_MspInit+0x5c>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <HAL_MspInit+0x60>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	4a04      	ldr	r2, [pc, #16]	; (80015bc <HAL_MspInit+0x60>)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ae:	bf00      	nop
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40010000 	.word	0x40010000

080015c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a1d      	ldr	r2, [pc, #116]	; (8001650 <HAL_I2C_MspInit+0x90>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d132      	bne.n	8001646 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e0:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <HAL_I2C_MspInit+0x94>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	4a1b      	ldr	r2, [pc, #108]	; (8001654 <HAL_I2C_MspInit+0x94>)
 80015e6:	f043 0308 	orr.w	r3, r3, #8
 80015ea:	6193      	str	r3, [r2, #24]
 80015ec:	4b19      	ldr	r3, [pc, #100]	; (8001654 <HAL_I2C_MspInit+0x94>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f003 0308 	and.w	r3, r3, #8
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015fe:	2312      	movs	r3, #18
 8001600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	4812      	ldr	r0, [pc, #72]	; (8001658 <HAL_I2C_MspInit+0x98>)
 800160e:	f000 fab9 	bl	8001b84 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_I2C_MspInit+0x9c>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	f043 0302 	orr.w	r3, r3, #2
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
 8001628:	4a0c      	ldr	r2, [pc, #48]	; (800165c <HAL_I2C_MspInit+0x9c>)
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <HAL_I2C_MspInit+0x94>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	4a08      	ldr	r2, [pc, #32]	; (8001654 <HAL_I2C_MspInit+0x94>)
 8001634:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001638:	61d3      	str	r3, [r2, #28]
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_I2C_MspInit+0x94>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001646:	bf00      	nop
 8001648:	3728      	adds	r7, #40	; 0x28
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40005400 	.word	0x40005400
 8001654:	40021000 	.word	0x40021000
 8001658:	40010c00 	.word	0x40010c00
 800165c:	40010000 	.word	0x40010000

08001660 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001670:	d113      	bne.n	800169a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <HAL_TIM_Base_MspInit+0x44>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <HAL_TIM_Base_MspInit+0x44>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	61d3      	str	r3, [r2, #28]
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <HAL_TIM_Base_MspInit+0x44>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2100      	movs	r1, #0
 800168e:	201c      	movs	r0, #28
 8001690:	f000 fa41 	bl	8001b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001694:	201c      	movs	r0, #28
 8001696:	f000 fa5a 	bl	8001b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000

080016a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a15      	ldr	r2, [pc, #84]	; (8001718 <HAL_UART_MspInit+0x70>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d123      	bne.n	8001710 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <HAL_UART_MspInit+0x74>)
 80016ca:	69db      	ldr	r3, [r3, #28]
 80016cc:	4a13      	ldr	r2, [pc, #76]	; (800171c <HAL_UART_MspInit+0x74>)
 80016ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d2:	61d3      	str	r3, [r2, #28]
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <HAL_UART_MspInit+0x74>)
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e0:	4b0e      	ldr	r3, [pc, #56]	; (800171c <HAL_UART_MspInit+0x74>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	4a0d      	ldr	r2, [pc, #52]	; (800171c <HAL_UART_MspInit+0x74>)
 80016e6:	f043 0304 	orr.w	r3, r3, #4
 80016ea:	6193      	str	r3, [r2, #24]
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_UART_MspInit+0x74>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016f8:	230c      	movs	r3, #12
 80016fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2302      	movs	r3, #2
 8001702:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001704:	f107 0310 	add.w	r3, r7, #16
 8001708:	4619      	mov	r1, r3
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <HAL_UART_MspInit+0x78>)
 800170c:	f000 fa3a 	bl	8001b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001710:	bf00      	nop
 8001712:	3720      	adds	r7, #32
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40004400 	.word	0x40004400
 800171c:	40021000 	.word	0x40021000
 8001720:	40010800 	.word	0x40010800

08001724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <NMI_Handler+0x4>

0800172a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <HardFault_Handler+0x4>

08001730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <MemManage_Handler+0x4>

08001736 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173a:	e7fe      	b.n	800173a <BusFault_Handler+0x4>

0800173c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <UsageFault_Handler+0x4>

08001742 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr

0800174e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr

0800175a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr

08001766 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800176a:	f000 f8bd 	bl	80018e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <TIM2_IRQHandler+0x10>)
 800177a:	f001 fd3d 	bl	80031f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000180 	.word	0x20000180

08001788 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800178c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001790:	f000 fbc4 	bl	8001f1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}

08001798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a0:	4a14      	ldr	r2, [pc, #80]	; (80017f4 <_sbrk+0x5c>)
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <_sbrk+0x60>)
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017ac:	4b13      	ldr	r3, [pc, #76]	; (80017fc <_sbrk+0x64>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d102      	bne.n	80017ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b4:	4b11      	ldr	r3, [pc, #68]	; (80017fc <_sbrk+0x64>)
 80017b6:	4a12      	ldr	r2, [pc, #72]	; (8001800 <_sbrk+0x68>)
 80017b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ba:	4b10      	ldr	r3, [pc, #64]	; (80017fc <_sbrk+0x64>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d207      	bcs.n	80017d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017c8:	f002 f944 	bl	8003a54 <__errno>
 80017cc:	4603      	mov	r3, r0
 80017ce:	220c      	movs	r2, #12
 80017d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295
 80017d6:	e009      	b.n	80017ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017de:	4b07      	ldr	r3, [pc, #28]	; (80017fc <_sbrk+0x64>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	4a05      	ldr	r2, [pc, #20]	; (80017fc <_sbrk+0x64>)
 80017e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ea:	68fb      	ldr	r3, [r7, #12]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20005000 	.word	0x20005000
 80017f8:	00000400 	.word	0x00000400
 80017fc:	20000100 	.word	0x20000100
 8001800:	20000278 	.word	0x20000278

08001804 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001810:	f7ff fff8 	bl	8001804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001814:	480b      	ldr	r0, [pc, #44]	; (8001844 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001816:	490c      	ldr	r1, [pc, #48]	; (8001848 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001818:	4a0c      	ldr	r2, [pc, #48]	; (800184c <LoopFillZerobss+0x16>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800181c:	e002      	b.n	8001824 <LoopCopyDataInit>

0800181e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001822:	3304      	adds	r3, #4

08001824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001828:	d3f9      	bcc.n	800181e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182a:	4a09      	ldr	r2, [pc, #36]	; (8001850 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800182c:	4c09      	ldr	r4, [pc, #36]	; (8001854 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001830:	e001      	b.n	8001836 <LoopFillZerobss>

08001832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001834:	3204      	adds	r2, #4

08001836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001838:	d3fb      	bcc.n	8001832 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800183a:	f002 f911 	bl	8003a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800183e:	f7ff fc83 	bl	8001148 <main>
  bx lr
 8001842:	4770      	bx	lr
  ldr r0, =_sdata
 8001844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001848:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 800184c:	08004468 	.word	0x08004468
  ldr r2, =_sbss
 8001850:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8001854:	20000274 	.word	0x20000274

08001858 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001858:	e7fe      	b.n	8001858 <ADC1_2_IRQHandler>
	...

0800185c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <HAL_Init+0x28>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a07      	ldr	r2, [pc, #28]	; (8001884 <HAL_Init+0x28>)
 8001866:	f043 0310 	orr.w	r3, r3, #16
 800186a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186c:	2003      	movs	r0, #3
 800186e:	f000 f947 	bl	8001b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001872:	2000      	movs	r0, #0
 8001874:	f000 f808 	bl	8001888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001878:	f7ff fe70 	bl	800155c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40022000 	.word	0x40022000

08001888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_InitTick+0x54>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_InitTick+0x58>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4619      	mov	r1, r3
 800189a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189e:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 f95f 	bl	8001b6a <HAL_SYSTICK_Config>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00e      	b.n	80018d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b0f      	cmp	r3, #15
 80018ba:	d80a      	bhi.n	80018d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018bc:	2200      	movs	r2, #0
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f000 f927 	bl	8001b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c8:	4a06      	ldr	r2, [pc, #24]	; (80018e4 <HAL_InitTick+0x5c>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e000      	b.n	80018d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000058 	.word	0x20000058
 80018e0:	20000060 	.word	0x20000060
 80018e4:	2000005c 	.word	0x2000005c

080018e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_IncTick+0x1c>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_IncTick+0x20>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	4a03      	ldr	r2, [pc, #12]	; (8001908 <HAL_IncTick+0x20>)
 80018fa:	6013      	str	r3, [r2, #0]
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	20000060 	.word	0x20000060
 8001908:	20000260 	.word	0x20000260

0800190c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return uwTick;
 8001910:	4b02      	ldr	r3, [pc, #8]	; (800191c <HAL_GetTick+0x10>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	20000260 	.word	0x20000260

08001920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff fff0 	bl	800190c <HAL_GetTick>
 800192c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001938:	d005      	beq.n	8001946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_Delay+0x44>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001946:	bf00      	nop
 8001948:	f7ff ffe0 	bl	800190c <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	429a      	cmp	r2, r3
 8001956:	d8f7      	bhi.n	8001948 <HAL_Delay+0x28>
  {
  }
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000060 	.word	0x20000060

08001968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001984:	4013      	ands	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199a:	4a04      	ldr	r2, [pc, #16]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	60d3      	str	r3, [r2, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <__NVIC_GetPriorityGrouping+0x18>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	f003 0307 	and.w	r3, r3, #7
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	db0b      	blt.n	80019f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	f003 021f 	and.w	r2, r3, #31
 80019e4:	4906      	ldr	r1, [pc, #24]	; (8001a00 <__NVIC_EnableIRQ+0x34>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	095b      	lsrs	r3, r3, #5
 80019ec:	2001      	movs	r0, #1
 80019ee:	fa00 f202 	lsl.w	r2, r0, r2
 80019f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr
 8001a00:	e000e100 	.word	0xe000e100

08001a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	db0a      	blt.n	8001a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	490c      	ldr	r1, [pc, #48]	; (8001a50 <__NVIC_SetPriority+0x4c>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	0112      	lsls	r2, r2, #4
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	440b      	add	r3, r1
 8001a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a2c:	e00a      	b.n	8001a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4908      	ldr	r1, [pc, #32]	; (8001a54 <__NVIC_SetPriority+0x50>)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	3b04      	subs	r3, #4
 8001a3c:	0112      	lsls	r2, r2, #4
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	440b      	add	r3, r1
 8001a42:	761a      	strb	r2, [r3, #24]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000e100 	.word	0xe000e100
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	; 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f1c3 0307 	rsb	r3, r3, #7
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	bf28      	it	cs
 8001a76:	2304      	movcs	r3, #4
 8001a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	2b06      	cmp	r3, #6
 8001a80:	d902      	bls.n	8001a88 <NVIC_EncodePriority+0x30>
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3b03      	subs	r3, #3
 8001a86:	e000      	b.n	8001a8a <NVIC_EncodePriority+0x32>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43da      	mvns	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	43d9      	mvns	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	4313      	orrs	r3, r2
         );
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3724      	adds	r7, #36	; 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001acc:	d301      	bcc.n	8001ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e00f      	b.n	8001af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <SysTick_Config+0x40>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ada:	210f      	movs	r1, #15
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae0:	f7ff ff90 	bl	8001a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <SysTick_Config+0x40>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aea:	4b04      	ldr	r3, [pc, #16]	; (8001afc <SysTick_Config+0x40>)
 8001aec:	2207      	movs	r2, #7
 8001aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	e000e010 	.word	0xe000e010

08001b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ff2d 	bl	8001968 <__NVIC_SetPriorityGrouping>
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b086      	sub	sp, #24
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b28:	f7ff ff42 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	6978      	ldr	r0, [r7, #20]
 8001b34:	f7ff ff90 	bl	8001a58 <NVIC_EncodePriority>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3e:	4611      	mov	r1, r2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff5f 	bl	8001a04 <__NVIC_SetPriority>
}
 8001b46:	bf00      	nop
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff35 	bl	80019cc <__NVIC_EnableIRQ>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff ffa2 	bl	8001abc <SysTick_Config>
 8001b78:	4603      	mov	r3, r0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b08b      	sub	sp, #44	; 0x2c
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b92:	2300      	movs	r3, #0
 8001b94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b96:	e169      	b.n	8001e6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b98:	2201      	movs	r2, #1
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	69fa      	ldr	r2, [r7, #28]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	f040 8158 	bne.w	8001e66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4a9a      	ldr	r2, [pc, #616]	; (8001e24 <HAL_GPIO_Init+0x2a0>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d05e      	beq.n	8001c7e <HAL_GPIO_Init+0xfa>
 8001bc0:	4a98      	ldr	r2, [pc, #608]	; (8001e24 <HAL_GPIO_Init+0x2a0>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d875      	bhi.n	8001cb2 <HAL_GPIO_Init+0x12e>
 8001bc6:	4a98      	ldr	r2, [pc, #608]	; (8001e28 <HAL_GPIO_Init+0x2a4>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d058      	beq.n	8001c7e <HAL_GPIO_Init+0xfa>
 8001bcc:	4a96      	ldr	r2, [pc, #600]	; (8001e28 <HAL_GPIO_Init+0x2a4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d86f      	bhi.n	8001cb2 <HAL_GPIO_Init+0x12e>
 8001bd2:	4a96      	ldr	r2, [pc, #600]	; (8001e2c <HAL_GPIO_Init+0x2a8>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d052      	beq.n	8001c7e <HAL_GPIO_Init+0xfa>
 8001bd8:	4a94      	ldr	r2, [pc, #592]	; (8001e2c <HAL_GPIO_Init+0x2a8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d869      	bhi.n	8001cb2 <HAL_GPIO_Init+0x12e>
 8001bde:	4a94      	ldr	r2, [pc, #592]	; (8001e30 <HAL_GPIO_Init+0x2ac>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d04c      	beq.n	8001c7e <HAL_GPIO_Init+0xfa>
 8001be4:	4a92      	ldr	r2, [pc, #584]	; (8001e30 <HAL_GPIO_Init+0x2ac>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d863      	bhi.n	8001cb2 <HAL_GPIO_Init+0x12e>
 8001bea:	4a92      	ldr	r2, [pc, #584]	; (8001e34 <HAL_GPIO_Init+0x2b0>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d046      	beq.n	8001c7e <HAL_GPIO_Init+0xfa>
 8001bf0:	4a90      	ldr	r2, [pc, #576]	; (8001e34 <HAL_GPIO_Init+0x2b0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d85d      	bhi.n	8001cb2 <HAL_GPIO_Init+0x12e>
 8001bf6:	2b12      	cmp	r3, #18
 8001bf8:	d82a      	bhi.n	8001c50 <HAL_GPIO_Init+0xcc>
 8001bfa:	2b12      	cmp	r3, #18
 8001bfc:	d859      	bhi.n	8001cb2 <HAL_GPIO_Init+0x12e>
 8001bfe:	a201      	add	r2, pc, #4	; (adr r2, 8001c04 <HAL_GPIO_Init+0x80>)
 8001c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c04:	08001c7f 	.word	0x08001c7f
 8001c08:	08001c59 	.word	0x08001c59
 8001c0c:	08001c6b 	.word	0x08001c6b
 8001c10:	08001cad 	.word	0x08001cad
 8001c14:	08001cb3 	.word	0x08001cb3
 8001c18:	08001cb3 	.word	0x08001cb3
 8001c1c:	08001cb3 	.word	0x08001cb3
 8001c20:	08001cb3 	.word	0x08001cb3
 8001c24:	08001cb3 	.word	0x08001cb3
 8001c28:	08001cb3 	.word	0x08001cb3
 8001c2c:	08001cb3 	.word	0x08001cb3
 8001c30:	08001cb3 	.word	0x08001cb3
 8001c34:	08001cb3 	.word	0x08001cb3
 8001c38:	08001cb3 	.word	0x08001cb3
 8001c3c:	08001cb3 	.word	0x08001cb3
 8001c40:	08001cb3 	.word	0x08001cb3
 8001c44:	08001cb3 	.word	0x08001cb3
 8001c48:	08001c61 	.word	0x08001c61
 8001c4c:	08001c75 	.word	0x08001c75
 8001c50:	4a79      	ldr	r2, [pc, #484]	; (8001e38 <HAL_GPIO_Init+0x2b4>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d013      	beq.n	8001c7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c56:	e02c      	b.n	8001cb2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	623b      	str	r3, [r7, #32]
          break;
 8001c5e:	e029      	b.n	8001cb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	3304      	adds	r3, #4
 8001c66:	623b      	str	r3, [r7, #32]
          break;
 8001c68:	e024      	b.n	8001cb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	3308      	adds	r3, #8
 8001c70:	623b      	str	r3, [r7, #32]
          break;
 8001c72:	e01f      	b.n	8001cb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	330c      	adds	r3, #12
 8001c7a:	623b      	str	r3, [r7, #32]
          break;
 8001c7c:	e01a      	b.n	8001cb4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d102      	bne.n	8001c8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c86:	2304      	movs	r3, #4
 8001c88:	623b      	str	r3, [r7, #32]
          break;
 8001c8a:	e013      	b.n	8001cb4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d105      	bne.n	8001ca0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c94:	2308      	movs	r3, #8
 8001c96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69fa      	ldr	r2, [r7, #28]
 8001c9c:	611a      	str	r2, [r3, #16]
          break;
 8001c9e:	e009      	b.n	8001cb4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ca0:	2308      	movs	r3, #8
 8001ca2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69fa      	ldr	r2, [r7, #28]
 8001ca8:	615a      	str	r2, [r3, #20]
          break;
 8001caa:	e003      	b.n	8001cb4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cac:	2300      	movs	r3, #0
 8001cae:	623b      	str	r3, [r7, #32]
          break;
 8001cb0:	e000      	b.n	8001cb4 <HAL_GPIO_Init+0x130>
          break;
 8001cb2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	2bff      	cmp	r3, #255	; 0xff
 8001cb8:	d801      	bhi.n	8001cbe <HAL_GPIO_Init+0x13a>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	e001      	b.n	8001cc2 <HAL_GPIO_Init+0x13e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	2bff      	cmp	r3, #255	; 0xff
 8001cc8:	d802      	bhi.n	8001cd0 <HAL_GPIO_Init+0x14c>
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	e002      	b.n	8001cd6 <HAL_GPIO_Init+0x152>
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	3b08      	subs	r3, #8
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	210f      	movs	r1, #15
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	6a39      	ldr	r1, [r7, #32]
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 80b1 	beq.w	8001e66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d04:	4b4d      	ldr	r3, [pc, #308]	; (8001e3c <HAL_GPIO_Init+0x2b8>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	4a4c      	ldr	r2, [pc, #304]	; (8001e3c <HAL_GPIO_Init+0x2b8>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6193      	str	r3, [r2, #24]
 8001d10:	4b4a      	ldr	r3, [pc, #296]	; (8001e3c <HAL_GPIO_Init+0x2b8>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d1c:	4a48      	ldr	r2, [pc, #288]	; (8001e40 <HAL_GPIO_Init+0x2bc>)
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	3302      	adds	r3, #2
 8001d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	220f      	movs	r2, #15
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a40      	ldr	r2, [pc, #256]	; (8001e44 <HAL_GPIO_Init+0x2c0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d013      	beq.n	8001d70 <HAL_GPIO_Init+0x1ec>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a3f      	ldr	r2, [pc, #252]	; (8001e48 <HAL_GPIO_Init+0x2c4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d00d      	beq.n	8001d6c <HAL_GPIO_Init+0x1e8>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a3e      	ldr	r2, [pc, #248]	; (8001e4c <HAL_GPIO_Init+0x2c8>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d007      	beq.n	8001d68 <HAL_GPIO_Init+0x1e4>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a3d      	ldr	r2, [pc, #244]	; (8001e50 <HAL_GPIO_Init+0x2cc>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d101      	bne.n	8001d64 <HAL_GPIO_Init+0x1e0>
 8001d60:	2303      	movs	r3, #3
 8001d62:	e006      	b.n	8001d72 <HAL_GPIO_Init+0x1ee>
 8001d64:	2304      	movs	r3, #4
 8001d66:	e004      	b.n	8001d72 <HAL_GPIO_Init+0x1ee>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	e002      	b.n	8001d72 <HAL_GPIO_Init+0x1ee>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <HAL_GPIO_Init+0x1ee>
 8001d70:	2300      	movs	r3, #0
 8001d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d74:	f002 0203 	and.w	r2, r2, #3
 8001d78:	0092      	lsls	r2, r2, #2
 8001d7a:	4093      	lsls	r3, r2
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d82:	492f      	ldr	r1, [pc, #188]	; (8001e40 <HAL_GPIO_Init+0x2bc>)
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	089b      	lsrs	r3, r3, #2
 8001d88:	3302      	adds	r3, #2
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d006      	beq.n	8001daa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d9c:	4b2d      	ldr	r3, [pc, #180]	; (8001e54 <HAL_GPIO_Init+0x2d0>)
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	492c      	ldr	r1, [pc, #176]	; (8001e54 <HAL_GPIO_Init+0x2d0>)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	608b      	str	r3, [r1, #8]
 8001da8:	e006      	b.n	8001db8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001daa:	4b2a      	ldr	r3, [pc, #168]	; (8001e54 <HAL_GPIO_Init+0x2d0>)
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	4928      	ldr	r1, [pc, #160]	; (8001e54 <HAL_GPIO_Init+0x2d0>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d006      	beq.n	8001dd2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dc4:	4b23      	ldr	r3, [pc, #140]	; (8001e54 <HAL_GPIO_Init+0x2d0>)
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	4922      	ldr	r1, [pc, #136]	; (8001e54 <HAL_GPIO_Init+0x2d0>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	60cb      	str	r3, [r1, #12]
 8001dd0:	e006      	b.n	8001de0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dd2:	4b20      	ldr	r3, [pc, #128]	; (8001e54 <HAL_GPIO_Init+0x2d0>)
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	491e      	ldr	r1, [pc, #120]	; (8001e54 <HAL_GPIO_Init+0x2d0>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d006      	beq.n	8001dfa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <HAL_GPIO_Init+0x2d0>)
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	4918      	ldr	r1, [pc, #96]	; (8001e54 <HAL_GPIO_Init+0x2d0>)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]
 8001df8:	e006      	b.n	8001e08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <HAL_GPIO_Init+0x2d0>)
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	4914      	ldr	r1, [pc, #80]	; (8001e54 <HAL_GPIO_Init+0x2d0>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d021      	beq.n	8001e58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e14:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <HAL_GPIO_Init+0x2d0>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	490e      	ldr	r1, [pc, #56]	; (8001e54 <HAL_GPIO_Init+0x2d0>)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	600b      	str	r3, [r1, #0]
 8001e20:	e021      	b.n	8001e66 <HAL_GPIO_Init+0x2e2>
 8001e22:	bf00      	nop
 8001e24:	10320000 	.word	0x10320000
 8001e28:	10310000 	.word	0x10310000
 8001e2c:	10220000 	.word	0x10220000
 8001e30:	10210000 	.word	0x10210000
 8001e34:	10120000 	.word	0x10120000
 8001e38:	10110000 	.word	0x10110000
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40010000 	.word	0x40010000
 8001e44:	40010800 	.word	0x40010800
 8001e48:	40010c00 	.word	0x40010c00
 8001e4c:	40011000 	.word	0x40011000
 8001e50:	40011400 	.word	0x40011400
 8001e54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <HAL_GPIO_Init+0x304>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	4909      	ldr	r1, [pc, #36]	; (8001e88 <HAL_GPIO_Init+0x304>)
 8001e62:	4013      	ands	r3, r2
 8001e64:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	3301      	adds	r3, #1
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	fa22 f303 	lsr.w	r3, r2, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f47f ae8e 	bne.w	8001b98 <HAL_GPIO_Init+0x14>
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	bf00      	nop
 8001e80:	372c      	adds	r7, #44	; 0x2c
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr
 8001e88:	40010400 	.word	0x40010400

08001e8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	887b      	ldrh	r3, [r7, #2]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d002      	beq.n	8001eaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	73fb      	strb	r3, [r7, #15]
 8001ea8:	e001      	b.n	8001eae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr

08001eba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	807b      	strh	r3, [r7, #2]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eca:	787b      	ldrb	r3, [r7, #1]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ed0:	887a      	ldrh	r2, [r7, #2]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ed6:	e003      	b.n	8001ee0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ed8:	887b      	ldrh	r3, [r7, #2]
 8001eda:	041a      	lsls	r2, r3, #16
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	611a      	str	r2, [r3, #16]
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr

08001eea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b085      	sub	sp, #20
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001efc:	887a      	ldrh	r2, [r7, #2]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	4013      	ands	r3, r2
 8001f02:	041a      	lsls	r2, r3, #16
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	43d9      	mvns	r1, r3
 8001f08:	887b      	ldrh	r3, [r7, #2]
 8001f0a:	400b      	ands	r3, r1
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	611a      	str	r2, [r3, #16]
}
 8001f12:	bf00      	nop
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f26:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f28:	695a      	ldr	r2, [r3, #20]
 8001f2a:	88fb      	ldrh	r3, [r7, #6]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d006      	beq.n	8001f40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f32:	4a05      	ldr	r2, [pc, #20]	; (8001f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f34:	88fb      	ldrh	r3, [r7, #6]
 8001f36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 f806 	bl	8001f4c <HAL_GPIO_EXTI_Callback>
  }
}
 8001f40:	bf00      	nop
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40010400 	.word	0x40010400

08001f4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e12b      	b.n	80021ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d106      	bne.n	8001f8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff fb1a 	bl	80015c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2224      	movs	r2, #36	; 0x24
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0201 	bic.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fc4:	f001 f830 	bl	8003028 <HAL_RCC_GetPCLK1Freq>
 8001fc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	4a81      	ldr	r2, [pc, #516]	; (80021d4 <HAL_I2C_Init+0x274>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d807      	bhi.n	8001fe4 <HAL_I2C_Init+0x84>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4a80      	ldr	r2, [pc, #512]	; (80021d8 <HAL_I2C_Init+0x278>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	bf94      	ite	ls
 8001fdc:	2301      	movls	r3, #1
 8001fde:	2300      	movhi	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	e006      	b.n	8001ff2 <HAL_I2C_Init+0x92>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4a7d      	ldr	r2, [pc, #500]	; (80021dc <HAL_I2C_Init+0x27c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	bf94      	ite	ls
 8001fec:	2301      	movls	r3, #1
 8001fee:	2300      	movhi	r3, #0
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e0e7      	b.n	80021ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4a78      	ldr	r2, [pc, #480]	; (80021e0 <HAL_I2C_Init+0x280>)
 8001ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8002002:	0c9b      	lsrs	r3, r3, #18
 8002004:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68ba      	ldr	r2, [r7, #8]
 8002016:	430a      	orrs	r2, r1
 8002018:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	4a6a      	ldr	r2, [pc, #424]	; (80021d4 <HAL_I2C_Init+0x274>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d802      	bhi.n	8002034 <HAL_I2C_Init+0xd4>
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	3301      	adds	r3, #1
 8002032:	e009      	b.n	8002048 <HAL_I2C_Init+0xe8>
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800203a:	fb02 f303 	mul.w	r3, r2, r3
 800203e:	4a69      	ldr	r2, [pc, #420]	; (80021e4 <HAL_I2C_Init+0x284>)
 8002040:	fba2 2303 	umull	r2, r3, r2, r3
 8002044:	099b      	lsrs	r3, r3, #6
 8002046:	3301      	adds	r3, #1
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	430b      	orrs	r3, r1
 800204e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800205a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	495c      	ldr	r1, [pc, #368]	; (80021d4 <HAL_I2C_Init+0x274>)
 8002064:	428b      	cmp	r3, r1
 8002066:	d819      	bhi.n	800209c <HAL_I2C_Init+0x13c>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1e59      	subs	r1, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	fbb1 f3f3 	udiv	r3, r1, r3
 8002076:	1c59      	adds	r1, r3, #1
 8002078:	f640 73fc 	movw	r3, #4092	; 0xffc
 800207c:	400b      	ands	r3, r1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00a      	beq.n	8002098 <HAL_I2C_Init+0x138>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	1e59      	subs	r1, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002090:	3301      	adds	r3, #1
 8002092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002096:	e051      	b.n	800213c <HAL_I2C_Init+0x1dc>
 8002098:	2304      	movs	r3, #4
 800209a:	e04f      	b.n	800213c <HAL_I2C_Init+0x1dc>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d111      	bne.n	80020c8 <HAL_I2C_Init+0x168>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	1e58      	subs	r0, r3, #1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6859      	ldr	r1, [r3, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	440b      	add	r3, r1
 80020b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b6:	3301      	adds	r3, #1
 80020b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020bc:	2b00      	cmp	r3, #0
 80020be:	bf0c      	ite	eq
 80020c0:	2301      	moveq	r3, #1
 80020c2:	2300      	movne	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	e012      	b.n	80020ee <HAL_I2C_Init+0x18e>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	1e58      	subs	r0, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6859      	ldr	r1, [r3, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	0099      	lsls	r1, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	fbb0 f3f3 	udiv	r3, r0, r3
 80020de:	3301      	adds	r3, #1
 80020e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf0c      	ite	eq
 80020e8:	2301      	moveq	r3, #1
 80020ea:	2300      	movne	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_I2C_Init+0x196>
 80020f2:	2301      	movs	r3, #1
 80020f4:	e022      	b.n	800213c <HAL_I2C_Init+0x1dc>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10e      	bne.n	800211c <HAL_I2C_Init+0x1bc>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	1e58      	subs	r0, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6859      	ldr	r1, [r3, #4]
 8002106:	460b      	mov	r3, r1
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	440b      	add	r3, r1
 800210c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002110:	3301      	adds	r3, #1
 8002112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800211a:	e00f      	b.n	800213c <HAL_I2C_Init+0x1dc>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	1e58      	subs	r0, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6859      	ldr	r1, [r3, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	0099      	lsls	r1, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002132:	3301      	adds	r3, #1
 8002134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002138:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	6809      	ldr	r1, [r1, #0]
 8002140:	4313      	orrs	r3, r2
 8002142:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69da      	ldr	r2, [r3, #28]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800216a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6911      	ldr	r1, [r2, #16]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68d2      	ldr	r2, [r2, #12]
 8002176:	4311      	orrs	r1, r2
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6812      	ldr	r2, [r2, #0]
 800217c:	430b      	orrs	r3, r1
 800217e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695a      	ldr	r2, [r3, #20]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0201 	orr.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2220      	movs	r2, #32
 80021b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	000186a0 	.word	0x000186a0
 80021d8:	001e847f 	.word	0x001e847f
 80021dc:	003d08ff 	.word	0x003d08ff
 80021e0:	431bde83 	.word	0x431bde83
 80021e4:	10624dd3 	.word	0x10624dd3

080021e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	461a      	mov	r2, r3
 80021f4:	460b      	mov	r3, r1
 80021f6:	817b      	strh	r3, [r7, #10]
 80021f8:	4613      	mov	r3, r2
 80021fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021fc:	f7ff fb86 	bl	800190c <HAL_GetTick>
 8002200:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b20      	cmp	r3, #32
 800220c:	f040 80e0 	bne.w	80023d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	2319      	movs	r3, #25
 8002216:	2201      	movs	r2, #1
 8002218:	4970      	ldr	r1, [pc, #448]	; (80023dc <HAL_I2C_Master_Transmit+0x1f4>)
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 f964 	bl	80024e8 <I2C_WaitOnFlagUntilTimeout>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002226:	2302      	movs	r3, #2
 8002228:	e0d3      	b.n	80023d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_I2C_Master_Transmit+0x50>
 8002234:	2302      	movs	r3, #2
 8002236:	e0cc      	b.n	80023d2 <HAL_I2C_Master_Transmit+0x1ea>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b01      	cmp	r3, #1
 800224c:	d007      	beq.n	800225e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 0201 	orr.w	r2, r2, #1
 800225c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800226c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2221      	movs	r2, #33	; 0x21
 8002272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2210      	movs	r2, #16
 800227a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	893a      	ldrh	r2, [r7, #8]
 800228e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002294:	b29a      	uxth	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	4a50      	ldr	r2, [pc, #320]	; (80023e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800229e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022a0:	8979      	ldrh	r1, [r7, #10]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	6a3a      	ldr	r2, [r7, #32]
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f89c 	bl	80023e4 <I2C_MasterRequestWrite>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e08d      	b.n	80023d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022b6:	2300      	movs	r3, #0
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022cc:	e066      	b.n	800239c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	6a39      	ldr	r1, [r7, #32]
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 fa22 	bl	800271c <I2C_WaitOnTXEFlagUntilTimeout>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00d      	beq.n	80022fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d107      	bne.n	80022f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e06b      	b.n	80023d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	781a      	ldrb	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002314:	b29b      	uxth	r3, r3
 8002316:	3b01      	subs	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002322:	3b01      	subs	r3, #1
 8002324:	b29a      	uxth	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b04      	cmp	r3, #4
 8002336:	d11b      	bne.n	8002370 <HAL_I2C_Master_Transmit+0x188>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233c:	2b00      	cmp	r3, #0
 800233e:	d017      	beq.n	8002370 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	781a      	ldrb	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235a:	b29b      	uxth	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002368:	3b01      	subs	r3, #1
 800236a:	b29a      	uxth	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	6a39      	ldr	r1, [r7, #32]
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 fa19 	bl	80027ac <I2C_WaitOnBTFFlagUntilTimeout>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00d      	beq.n	800239c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	2b04      	cmp	r3, #4
 8002386:	d107      	bne.n	8002398 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002396:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e01a      	b.n	80023d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d194      	bne.n	80022ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	e000      	b.n	80023d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023d0:	2302      	movs	r3, #2
  }
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	00100002 	.word	0x00100002
 80023e0:	ffff0000 	.word	0xffff0000

080023e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af02      	add	r7, sp, #8
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	607a      	str	r2, [r7, #4]
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	460b      	mov	r3, r1
 80023f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d006      	beq.n	800240e <I2C_MasterRequestWrite+0x2a>
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d003      	beq.n	800240e <I2C_MasterRequestWrite+0x2a>
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800240c:	d108      	bne.n	8002420 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	e00b      	b.n	8002438 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002424:	2b12      	cmp	r3, #18
 8002426:	d107      	bne.n	8002438 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002436:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 f84f 	bl	80024e8 <I2C_WaitOnFlagUntilTimeout>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00d      	beq.n	800246c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800245e:	d103      	bne.n	8002468 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002466:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e035      	b.n	80024d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002474:	d108      	bne.n	8002488 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002476:	897b      	ldrh	r3, [r7, #10]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	461a      	mov	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002484:	611a      	str	r2, [r3, #16]
 8002486:	e01b      	b.n	80024c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002488:	897b      	ldrh	r3, [r7, #10]
 800248a:	11db      	asrs	r3, r3, #7
 800248c:	b2db      	uxtb	r3, r3
 800248e:	f003 0306 	and.w	r3, r3, #6
 8002492:	b2db      	uxtb	r3, r3
 8002494:	f063 030f 	orn	r3, r3, #15
 8002498:	b2da      	uxtb	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	490e      	ldr	r1, [pc, #56]	; (80024e0 <I2C_MasterRequestWrite+0xfc>)
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 f898 	bl	80025dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e010      	b.n	80024d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024b6:	897b      	ldrh	r3, [r7, #10]
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	4907      	ldr	r1, [pc, #28]	; (80024e4 <I2C_MasterRequestWrite+0x100>)
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 f888 	bl	80025dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	00010008 	.word	0x00010008
 80024e4:	00010002 	.word	0x00010002

080024e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	603b      	str	r3, [r7, #0]
 80024f4:	4613      	mov	r3, r2
 80024f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024f8:	e048      	b.n	800258c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002500:	d044      	beq.n	800258c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002502:	f7ff fa03 	bl	800190c <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d302      	bcc.n	8002518 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d139      	bne.n	800258c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	0c1b      	lsrs	r3, r3, #16
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b01      	cmp	r3, #1
 8002520:	d10d      	bne.n	800253e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	43da      	mvns	r2, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	4013      	ands	r3, r2
 800252e:	b29b      	uxth	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf0c      	ite	eq
 8002534:	2301      	moveq	r3, #1
 8002536:	2300      	movne	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	461a      	mov	r2, r3
 800253c:	e00c      	b.n	8002558 <I2C_WaitOnFlagUntilTimeout+0x70>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	43da      	mvns	r2, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	4013      	ands	r3, r2
 800254a:	b29b      	uxth	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	bf0c      	ite	eq
 8002550:	2301      	moveq	r3, #1
 8002552:	2300      	movne	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	461a      	mov	r2, r3
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	429a      	cmp	r2, r3
 800255c:	d116      	bne.n	800258c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2220      	movs	r2, #32
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	f043 0220 	orr.w	r2, r3, #32
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e023      	b.n	80025d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	0c1b      	lsrs	r3, r3, #16
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b01      	cmp	r3, #1
 8002594:	d10d      	bne.n	80025b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	43da      	mvns	r2, r3
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	4013      	ands	r3, r2
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	bf0c      	ite	eq
 80025a8:	2301      	moveq	r3, #1
 80025aa:	2300      	movne	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	461a      	mov	r2, r3
 80025b0:	e00c      	b.n	80025cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	43da      	mvns	r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	4013      	ands	r3, r2
 80025be:	b29b      	uxth	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	bf0c      	ite	eq
 80025c4:	2301      	moveq	r3, #1
 80025c6:	2300      	movne	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	461a      	mov	r2, r3
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d093      	beq.n	80024fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025ea:	e071      	b.n	80026d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025fa:	d123      	bne.n	8002644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800260a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002614:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2220      	movs	r2, #32
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	f043 0204 	orr.w	r2, r3, #4
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e067      	b.n	8002714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264a:	d041      	beq.n	80026d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264c:	f7ff f95e 	bl	800190c <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	429a      	cmp	r2, r3
 800265a:	d302      	bcc.n	8002662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d136      	bne.n	80026d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	0c1b      	lsrs	r3, r3, #16
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b01      	cmp	r3, #1
 800266a:	d10c      	bne.n	8002686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	43da      	mvns	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	4013      	ands	r3, r2
 8002678:	b29b      	uxth	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	bf14      	ite	ne
 800267e:	2301      	movne	r3, #1
 8002680:	2300      	moveq	r3, #0
 8002682:	b2db      	uxtb	r3, r3
 8002684:	e00b      	b.n	800269e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	43da      	mvns	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	4013      	ands	r3, r2
 8002692:	b29b      	uxth	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	bf14      	ite	ne
 8002698:	2301      	movne	r3, #1
 800269a:	2300      	moveq	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d016      	beq.n	80026d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2220      	movs	r2, #32
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	f043 0220 	orr.w	r2, r3, #32
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e021      	b.n	8002714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	0c1b      	lsrs	r3, r3, #16
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d10c      	bne.n	80026f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	43da      	mvns	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	4013      	ands	r3, r2
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	bf14      	ite	ne
 80026ec:	2301      	movne	r3, #1
 80026ee:	2300      	moveq	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	e00b      	b.n	800270c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	43da      	mvns	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	4013      	ands	r3, r2
 8002700:	b29b      	uxth	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	bf14      	ite	ne
 8002706:	2301      	movne	r3, #1
 8002708:	2300      	moveq	r3, #0
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	f47f af6d 	bne.w	80025ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002728:	e034      	b.n	8002794 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 f886 	bl	800283c <I2C_IsAcknowledgeFailed>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e034      	b.n	80027a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002740:	d028      	beq.n	8002794 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002742:	f7ff f8e3 	bl	800190c <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	429a      	cmp	r2, r3
 8002750:	d302      	bcc.n	8002758 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d11d      	bne.n	8002794 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002762:	2b80      	cmp	r3, #128	; 0x80
 8002764:	d016      	beq.n	8002794 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	f043 0220 	orr.w	r2, r3, #32
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e007      	b.n	80027a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279e:	2b80      	cmp	r3, #128	; 0x80
 80027a0:	d1c3      	bne.n	800272a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027b8:	e034      	b.n	8002824 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f83e 	bl	800283c <I2C_IsAcknowledgeFailed>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e034      	b.n	8002834 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d0:	d028      	beq.n	8002824 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027d2:	f7ff f89b 	bl	800190c <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d302      	bcc.n	80027e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d11d      	bne.n	8002824 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d016      	beq.n	8002824 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	f043 0220 	orr.w	r2, r3, #32
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e007      	b.n	8002834 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	2b04      	cmp	r3, #4
 8002830:	d1c3      	bne.n	80027ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002852:	d11b      	bne.n	800288c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800285c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2220      	movs	r2, #32
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	f043 0204 	orr.w	r2, r3, #4
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e26c      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 8087 	beq.w	80029c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028b8:	4b92      	ldr	r3, [pc, #584]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 030c 	and.w	r3, r3, #12
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d00c      	beq.n	80028de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028c4:	4b8f      	ldr	r3, [pc, #572]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 030c 	and.w	r3, r3, #12
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d112      	bne.n	80028f6 <HAL_RCC_OscConfig+0x5e>
 80028d0:	4b8c      	ldr	r3, [pc, #560]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028dc:	d10b      	bne.n	80028f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028de:	4b89      	ldr	r3, [pc, #548]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d06c      	beq.n	80029c4 <HAL_RCC_OscConfig+0x12c>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d168      	bne.n	80029c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e246      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fe:	d106      	bne.n	800290e <HAL_RCC_OscConfig+0x76>
 8002900:	4b80      	ldr	r3, [pc, #512]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a7f      	ldr	r2, [pc, #508]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	e02e      	b.n	800296c <HAL_RCC_OscConfig+0xd4>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10c      	bne.n	8002930 <HAL_RCC_OscConfig+0x98>
 8002916:	4b7b      	ldr	r3, [pc, #492]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a7a      	ldr	r2, [pc, #488]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 800291c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	4b78      	ldr	r3, [pc, #480]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a77      	ldr	r2, [pc, #476]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002928:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e01d      	b.n	800296c <HAL_RCC_OscConfig+0xd4>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002938:	d10c      	bne.n	8002954 <HAL_RCC_OscConfig+0xbc>
 800293a:	4b72      	ldr	r3, [pc, #456]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a71      	ldr	r2, [pc, #452]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	4b6f      	ldr	r3, [pc, #444]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a6e      	ldr	r2, [pc, #440]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 800294c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	e00b      	b.n	800296c <HAL_RCC_OscConfig+0xd4>
 8002954:	4b6b      	ldr	r3, [pc, #428]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a6a      	ldr	r2, [pc, #424]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 800295a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	4b68      	ldr	r3, [pc, #416]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a67      	ldr	r2, [pc, #412]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800296a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d013      	beq.n	800299c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002974:	f7fe ffca 	bl	800190c <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800297c:	f7fe ffc6 	bl	800190c <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b64      	cmp	r3, #100	; 0x64
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e1fa      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298e:	4b5d      	ldr	r3, [pc, #372]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0xe4>
 800299a:	e014      	b.n	80029c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299c:	f7fe ffb6 	bl	800190c <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a4:	f7fe ffb2 	bl	800190c <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	; 0x64
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e1e6      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b6:	4b53      	ldr	r3, [pc, #332]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x10c>
 80029c2:	e000      	b.n	80029c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d063      	beq.n	8002a9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029d2:	4b4c      	ldr	r3, [pc, #304]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 030c 	and.w	r3, r3, #12
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00b      	beq.n	80029f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029de:	4b49      	ldr	r3, [pc, #292]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d11c      	bne.n	8002a24 <HAL_RCC_OscConfig+0x18c>
 80029ea:	4b46      	ldr	r3, [pc, #280]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d116      	bne.n	8002a24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f6:	4b43      	ldr	r3, [pc, #268]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d005      	beq.n	8002a0e <HAL_RCC_OscConfig+0x176>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d001      	beq.n	8002a0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e1ba      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0e:	4b3d      	ldr	r3, [pc, #244]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4939      	ldr	r1, [pc, #228]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a22:	e03a      	b.n	8002a9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d020      	beq.n	8002a6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a2c:	4b36      	ldr	r3, [pc, #216]	; (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002a2e:	2201      	movs	r2, #1
 8002a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a32:	f7fe ff6b 	bl	800190c <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a3a:	f7fe ff67 	bl	800190c <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e19b      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4c:	4b2d      	ldr	r3, [pc, #180]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f0      	beq.n	8002a3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a58:	4b2a      	ldr	r3, [pc, #168]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4927      	ldr	r1, [pc, #156]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	600b      	str	r3, [r1, #0]
 8002a6c:	e015      	b.n	8002a9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a6e:	4b26      	ldr	r3, [pc, #152]	; (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a74:	f7fe ff4a 	bl	800190c <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a7c:	f7fe ff46 	bl	800190c <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e17a      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a8e:	4b1d      	ldr	r3, [pc, #116]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d03a      	beq.n	8002b1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d019      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aae:	4b17      	ldr	r3, [pc, #92]	; (8002b0c <HAL_RCC_OscConfig+0x274>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab4:	f7fe ff2a 	bl	800190c <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002abc:	f7fe ff26 	bl	800190c <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e15a      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ace:	4b0d      	ldr	r3, [pc, #52]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ada:	2001      	movs	r0, #1
 8002adc:	f000 facc 	bl	8003078 <RCC_Delay>
 8002ae0:	e01c      	b.n	8002b1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ae2:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <HAL_RCC_OscConfig+0x274>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae8:	f7fe ff10 	bl	800190c <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aee:	e00f      	b.n	8002b10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af0:	f7fe ff0c 	bl	800190c <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d908      	bls.n	8002b10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e140      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
 8002b02:	bf00      	nop
 8002b04:	40021000 	.word	0x40021000
 8002b08:	42420000 	.word	0x42420000
 8002b0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b10:	4b9e      	ldr	r3, [pc, #632]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1e9      	bne.n	8002af0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 80a6 	beq.w	8002c76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b2e:	4b97      	ldr	r3, [pc, #604]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10d      	bne.n	8002b56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3a:	4b94      	ldr	r3, [pc, #592]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	4a93      	ldr	r2, [pc, #588]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b44:	61d3      	str	r3, [r2, #28]
 8002b46:	4b91      	ldr	r3, [pc, #580]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b52:	2301      	movs	r3, #1
 8002b54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b56:	4b8e      	ldr	r3, [pc, #568]	; (8002d90 <HAL_RCC_OscConfig+0x4f8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d118      	bne.n	8002b94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b62:	4b8b      	ldr	r3, [pc, #556]	; (8002d90 <HAL_RCC_OscConfig+0x4f8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a8a      	ldr	r2, [pc, #552]	; (8002d90 <HAL_RCC_OscConfig+0x4f8>)
 8002b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b6e:	f7fe fecd 	bl	800190c <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b76:	f7fe fec9 	bl	800190c <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b64      	cmp	r3, #100	; 0x64
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e0fd      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b88:	4b81      	ldr	r3, [pc, #516]	; (8002d90 <HAL_RCC_OscConfig+0x4f8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d106      	bne.n	8002baa <HAL_RCC_OscConfig+0x312>
 8002b9c:	4b7b      	ldr	r3, [pc, #492]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	4a7a      	ldr	r2, [pc, #488]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6213      	str	r3, [r2, #32]
 8002ba8:	e02d      	b.n	8002c06 <HAL_RCC_OscConfig+0x36e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10c      	bne.n	8002bcc <HAL_RCC_OscConfig+0x334>
 8002bb2:	4b76      	ldr	r3, [pc, #472]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	4a75      	ldr	r2, [pc, #468]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002bb8:	f023 0301 	bic.w	r3, r3, #1
 8002bbc:	6213      	str	r3, [r2, #32]
 8002bbe:	4b73      	ldr	r3, [pc, #460]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	4a72      	ldr	r2, [pc, #456]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002bc4:	f023 0304 	bic.w	r3, r3, #4
 8002bc8:	6213      	str	r3, [r2, #32]
 8002bca:	e01c      	b.n	8002c06 <HAL_RCC_OscConfig+0x36e>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	2b05      	cmp	r3, #5
 8002bd2:	d10c      	bne.n	8002bee <HAL_RCC_OscConfig+0x356>
 8002bd4:	4b6d      	ldr	r3, [pc, #436]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	4a6c      	ldr	r2, [pc, #432]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002bda:	f043 0304 	orr.w	r3, r3, #4
 8002bde:	6213      	str	r3, [r2, #32]
 8002be0:	4b6a      	ldr	r3, [pc, #424]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	4a69      	ldr	r2, [pc, #420]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	6213      	str	r3, [r2, #32]
 8002bec:	e00b      	b.n	8002c06 <HAL_RCC_OscConfig+0x36e>
 8002bee:	4b67      	ldr	r3, [pc, #412]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	4a66      	ldr	r2, [pc, #408]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002bf4:	f023 0301 	bic.w	r3, r3, #1
 8002bf8:	6213      	str	r3, [r2, #32]
 8002bfa:	4b64      	ldr	r3, [pc, #400]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	4a63      	ldr	r2, [pc, #396]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002c00:	f023 0304 	bic.w	r3, r3, #4
 8002c04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d015      	beq.n	8002c3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0e:	f7fe fe7d 	bl	800190c <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c14:	e00a      	b.n	8002c2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c16:	f7fe fe79 	bl	800190c <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e0ab      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2c:	4b57      	ldr	r3, [pc, #348]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0ee      	beq.n	8002c16 <HAL_RCC_OscConfig+0x37e>
 8002c38:	e014      	b.n	8002c64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3a:	f7fe fe67 	bl	800190c <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c40:	e00a      	b.n	8002c58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c42:	f7fe fe63 	bl	800190c <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e095      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c58:	4b4c      	ldr	r3, [pc, #304]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1ee      	bne.n	8002c42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c64:	7dfb      	ldrb	r3, [r7, #23]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d105      	bne.n	8002c76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c6a:	4b48      	ldr	r3, [pc, #288]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	4a47      	ldr	r2, [pc, #284]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002c70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 8081 	beq.w	8002d82 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c80:	4b42      	ldr	r3, [pc, #264]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 030c 	and.w	r3, r3, #12
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d061      	beq.n	8002d50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d146      	bne.n	8002d22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c94:	4b3f      	ldr	r3, [pc, #252]	; (8002d94 <HAL_RCC_OscConfig+0x4fc>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9a:	f7fe fe37 	bl	800190c <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca2:	f7fe fe33 	bl	800190c <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e067      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb4:	4b35      	ldr	r3, [pc, #212]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1f0      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc8:	d108      	bne.n	8002cdc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cca:	4b30      	ldr	r3, [pc, #192]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	492d      	ldr	r1, [pc, #180]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cdc:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a19      	ldr	r1, [r3, #32]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	430b      	orrs	r3, r1
 8002cee:	4927      	ldr	r1, [pc, #156]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf4:	4b27      	ldr	r3, [pc, #156]	; (8002d94 <HAL_RCC_OscConfig+0x4fc>)
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfa:	f7fe fe07 	bl	800190c <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d02:	f7fe fe03 	bl	800190c <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e037      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d14:	4b1d      	ldr	r3, [pc, #116]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCC_OscConfig+0x46a>
 8002d20:	e02f      	b.n	8002d82 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d22:	4b1c      	ldr	r3, [pc, #112]	; (8002d94 <HAL_RCC_OscConfig+0x4fc>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d28:	f7fe fdf0 	bl	800190c <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d30:	f7fe fdec 	bl	800190c <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e020      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d42:	4b12      	ldr	r3, [pc, #72]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0x498>
 8002d4e:	e018      	b.n	8002d82 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e013      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_RCC_OscConfig+0x4f4>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d106      	bne.n	8002d7e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d001      	beq.n	8002d82 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	40007000 	.word	0x40007000
 8002d94:	42420060 	.word	0x42420060

08002d98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0d0      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dac:	4b6a      	ldr	r3, [pc, #424]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d910      	bls.n	8002ddc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dba:	4b67      	ldr	r3, [pc, #412]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f023 0207 	bic.w	r2, r3, #7
 8002dc2:	4965      	ldr	r1, [pc, #404]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dca:	4b63      	ldr	r3, [pc, #396]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0b8      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d020      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002df4:	4b59      	ldr	r3, [pc, #356]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	4a58      	ldr	r2, [pc, #352]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002dfa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002dfe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e0c:	4b53      	ldr	r3, [pc, #332]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	4a52      	ldr	r2, [pc, #328]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e18:	4b50      	ldr	r3, [pc, #320]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	494d      	ldr	r1, [pc, #308]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d040      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d107      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3e:	4b47      	ldr	r3, [pc, #284]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d115      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e07f      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d107      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e56:	4b41      	ldr	r3, [pc, #260]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d109      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e073      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e66:	4b3d      	ldr	r3, [pc, #244]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e06b      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e76:	4b39      	ldr	r3, [pc, #228]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f023 0203 	bic.w	r2, r3, #3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	4936      	ldr	r1, [pc, #216]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e88:	f7fe fd40 	bl	800190c <HAL_GetTick>
 8002e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e90:	f7fe fd3c 	bl	800190c <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e053      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea6:	4b2d      	ldr	r3, [pc, #180]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 020c 	and.w	r2, r3, #12
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d1eb      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb8:	4b27      	ldr	r3, [pc, #156]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d210      	bcs.n	8002ee8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec6:	4b24      	ldr	r3, [pc, #144]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 0207 	bic.w	r2, r3, #7
 8002ece:	4922      	ldr	r1, [pc, #136]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed6:	4b20      	ldr	r3, [pc, #128]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e032      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d008      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ef4:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	4916      	ldr	r1, [pc, #88]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d009      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f12:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	490e      	ldr	r1, [pc, #56]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f26:	f000 f821 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	490a      	ldr	r1, [pc, #40]	; (8002f60 <HAL_RCC_ClockConfig+0x1c8>)
 8002f38:	5ccb      	ldrb	r3, [r1, r3]
 8002f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3e:	4a09      	ldr	r2, [pc, #36]	; (8002f64 <HAL_RCC_ClockConfig+0x1cc>)
 8002f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f42:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <HAL_RCC_ClockConfig+0x1d0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe fc9e 	bl	8001888 <HAL_InitTick>

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40022000 	.word	0x40022000
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	08004400 	.word	0x08004400
 8002f64:	20000058 	.word	0x20000058
 8002f68:	2000005c 	.word	0x2000005c

08002f6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f86:	4b1e      	ldr	r3, [pc, #120]	; (8003000 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d002      	beq.n	8002f9c <HAL_RCC_GetSysClockFreq+0x30>
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d003      	beq.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x36>
 8002f9a:	e027      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f9c:	4b19      	ldr	r3, [pc, #100]	; (8003004 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f9e:	613b      	str	r3, [r7, #16]
      break;
 8002fa0:	e027      	b.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	0c9b      	lsrs	r3, r3, #18
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	4a17      	ldr	r2, [pc, #92]	; (8003008 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fac:	5cd3      	ldrb	r3, [r2, r3]
 8002fae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d010      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fba:	4b11      	ldr	r3, [pc, #68]	; (8003000 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	0c5b      	lsrs	r3, r3, #17
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	4a11      	ldr	r2, [pc, #68]	; (800300c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002fc6:	5cd3      	ldrb	r3, [r2, r3]
 8002fc8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a0d      	ldr	r2, [pc, #52]	; (8003004 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fce:	fb02 f203 	mul.w	r2, r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	e004      	b.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a0c      	ldr	r2, [pc, #48]	; (8003010 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fe0:	fb02 f303 	mul.w	r3, r2, r3
 8002fe4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	613b      	str	r3, [r7, #16]
      break;
 8002fea:	e002      	b.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fec:	4b05      	ldr	r3, [pc, #20]	; (8003004 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fee:	613b      	str	r3, [r7, #16]
      break;
 8002ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ff2:	693b      	ldr	r3, [r7, #16]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	371c      	adds	r7, #28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40021000 	.word	0x40021000
 8003004:	007a1200 	.word	0x007a1200
 8003008:	08004418 	.word	0x08004418
 800300c:	08004428 	.word	0x08004428
 8003010:	003d0900 	.word	0x003d0900

08003014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003018:	4b02      	ldr	r3, [pc, #8]	; (8003024 <HAL_RCC_GetHCLKFreq+0x10>)
 800301a:	681b      	ldr	r3, [r3, #0]
}
 800301c:	4618      	mov	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr
 8003024:	20000058 	.word	0x20000058

08003028 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800302c:	f7ff fff2 	bl	8003014 <HAL_RCC_GetHCLKFreq>
 8003030:	4602      	mov	r2, r0
 8003032:	4b05      	ldr	r3, [pc, #20]	; (8003048 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	0a1b      	lsrs	r3, r3, #8
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	4903      	ldr	r1, [pc, #12]	; (800304c <HAL_RCC_GetPCLK1Freq+0x24>)
 800303e:	5ccb      	ldrb	r3, [r1, r3]
 8003040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003044:	4618      	mov	r0, r3
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40021000 	.word	0x40021000
 800304c:	08004410 	.word	0x08004410

08003050 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003054:	f7ff ffde 	bl	8003014 <HAL_RCC_GetHCLKFreq>
 8003058:	4602      	mov	r2, r0
 800305a:	4b05      	ldr	r3, [pc, #20]	; (8003070 <HAL_RCC_GetPCLK2Freq+0x20>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	0adb      	lsrs	r3, r3, #11
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	4903      	ldr	r1, [pc, #12]	; (8003074 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003066:	5ccb      	ldrb	r3, [r1, r3]
 8003068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800306c:	4618      	mov	r0, r3
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40021000 	.word	0x40021000
 8003074:	08004410 	.word	0x08004410

08003078 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003080:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <RCC_Delay+0x34>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a0a      	ldr	r2, [pc, #40]	; (80030b0 <RCC_Delay+0x38>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	0a5b      	lsrs	r3, r3, #9
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	fb02 f303 	mul.w	r3, r2, r3
 8003092:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003094:	bf00      	nop
  }
  while (Delay --);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	1e5a      	subs	r2, r3, #1
 800309a:	60fa      	str	r2, [r7, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f9      	bne.n	8003094 <RCC_Delay+0x1c>
}
 80030a0:	bf00      	nop
 80030a2:	bf00      	nop
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr
 80030ac:	20000058 	.word	0x20000058
 80030b0:	10624dd3 	.word	0x10624dd3

080030b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e041      	b.n	800314a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fe fac0 	bl	8001660 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3304      	adds	r3, #4
 80030f0:	4619      	mov	r1, r3
 80030f2:	4610      	mov	r0, r2
 80030f4:	f000 fa5c 	bl	80035b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
	...

08003154 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b01      	cmp	r3, #1
 8003166:	d001      	beq.n	800316c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e03a      	b.n	80031e2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0201 	orr.w	r2, r2, #1
 8003182:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a18      	ldr	r2, [pc, #96]	; (80031ec <HAL_TIM_Base_Start_IT+0x98>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00e      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x58>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003196:	d009      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x58>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a14      	ldr	r2, [pc, #80]	; (80031f0 <HAL_TIM_Base_Start_IT+0x9c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d004      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x58>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a13      	ldr	r2, [pc, #76]	; (80031f4 <HAL_TIM_Base_Start_IT+0xa0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d111      	bne.n	80031d0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b06      	cmp	r3, #6
 80031bc:	d010      	beq.n	80031e0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f042 0201 	orr.w	r2, r2, #1
 80031cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ce:	e007      	b.n	80031e0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0201 	orr.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr
 80031ec:	40012c00 	.word	0x40012c00
 80031f0:	40000400 	.word	0x40000400
 80031f4:	40000800 	.word	0x40000800

080031f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d020      	beq.n	800325c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d01b      	beq.n	800325c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f06f 0202 	mvn.w	r2, #2
 800322c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f998 	bl	8003578 <HAL_TIM_IC_CaptureCallback>
 8003248:	e005      	b.n	8003256 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f98b 	bl	8003566 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f99a 	bl	800358a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f003 0304 	and.w	r3, r3, #4
 8003262:	2b00      	cmp	r3, #0
 8003264:	d020      	beq.n	80032a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d01b      	beq.n	80032a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f06f 0204 	mvn.w	r2, #4
 8003278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2202      	movs	r2, #2
 800327e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f972 	bl	8003578 <HAL_TIM_IC_CaptureCallback>
 8003294:	e005      	b.n	80032a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f965 	bl	8003566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f974 	bl	800358a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d020      	beq.n	80032f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d01b      	beq.n	80032f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0208 	mvn.w	r2, #8
 80032c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2204      	movs	r2, #4
 80032ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f94c 	bl	8003578 <HAL_TIM_IC_CaptureCallback>
 80032e0:	e005      	b.n	80032ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f93f 	bl	8003566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f94e 	bl	800358a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f003 0310 	and.w	r3, r3, #16
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d020      	beq.n	8003340 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f003 0310 	and.w	r3, r3, #16
 8003304:	2b00      	cmp	r3, #0
 8003306:	d01b      	beq.n	8003340 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f06f 0210 	mvn.w	r2, #16
 8003310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2208      	movs	r2, #8
 8003316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f926 	bl	8003578 <HAL_TIM_IC_CaptureCallback>
 800332c:	e005      	b.n	800333a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f919 	bl	8003566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f928 	bl	800358a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00c      	beq.n	8003364 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d007      	beq.n	8003364 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0201 	mvn.w	r2, #1
 800335c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7fe f89a 	bl	8001498 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00c      	beq.n	8003388 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003374:	2b00      	cmp	r3, #0
 8003376:	d007      	beq.n	8003388 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fa7f 	bl	8003886 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00c      	beq.n	80033ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003398:	2b00      	cmp	r3, #0
 800339a:	d007      	beq.n	80033ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f8f8 	bl	800359c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f003 0320 	and.w	r3, r3, #32
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00c      	beq.n	80033d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f003 0320 	and.w	r3, r3, #32
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d007      	beq.n	80033d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0220 	mvn.w	r2, #32
 80033c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fa52 	bl	8003874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033d0:	bf00      	nop
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_TIM_ConfigClockSource+0x1c>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e0b4      	b.n	800355e <HAL_TIM_ConfigClockSource+0x186>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003412:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800341a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800342c:	d03e      	beq.n	80034ac <HAL_TIM_ConfigClockSource+0xd4>
 800342e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003432:	f200 8087 	bhi.w	8003544 <HAL_TIM_ConfigClockSource+0x16c>
 8003436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800343a:	f000 8086 	beq.w	800354a <HAL_TIM_ConfigClockSource+0x172>
 800343e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003442:	d87f      	bhi.n	8003544 <HAL_TIM_ConfigClockSource+0x16c>
 8003444:	2b70      	cmp	r3, #112	; 0x70
 8003446:	d01a      	beq.n	800347e <HAL_TIM_ConfigClockSource+0xa6>
 8003448:	2b70      	cmp	r3, #112	; 0x70
 800344a:	d87b      	bhi.n	8003544 <HAL_TIM_ConfigClockSource+0x16c>
 800344c:	2b60      	cmp	r3, #96	; 0x60
 800344e:	d050      	beq.n	80034f2 <HAL_TIM_ConfigClockSource+0x11a>
 8003450:	2b60      	cmp	r3, #96	; 0x60
 8003452:	d877      	bhi.n	8003544 <HAL_TIM_ConfigClockSource+0x16c>
 8003454:	2b50      	cmp	r3, #80	; 0x50
 8003456:	d03c      	beq.n	80034d2 <HAL_TIM_ConfigClockSource+0xfa>
 8003458:	2b50      	cmp	r3, #80	; 0x50
 800345a:	d873      	bhi.n	8003544 <HAL_TIM_ConfigClockSource+0x16c>
 800345c:	2b40      	cmp	r3, #64	; 0x40
 800345e:	d058      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0x13a>
 8003460:	2b40      	cmp	r3, #64	; 0x40
 8003462:	d86f      	bhi.n	8003544 <HAL_TIM_ConfigClockSource+0x16c>
 8003464:	2b30      	cmp	r3, #48	; 0x30
 8003466:	d064      	beq.n	8003532 <HAL_TIM_ConfigClockSource+0x15a>
 8003468:	2b30      	cmp	r3, #48	; 0x30
 800346a:	d86b      	bhi.n	8003544 <HAL_TIM_ConfigClockSource+0x16c>
 800346c:	2b20      	cmp	r3, #32
 800346e:	d060      	beq.n	8003532 <HAL_TIM_ConfigClockSource+0x15a>
 8003470:	2b20      	cmp	r3, #32
 8003472:	d867      	bhi.n	8003544 <HAL_TIM_ConfigClockSource+0x16c>
 8003474:	2b00      	cmp	r3, #0
 8003476:	d05c      	beq.n	8003532 <HAL_TIM_ConfigClockSource+0x15a>
 8003478:	2b10      	cmp	r3, #16
 800347a:	d05a      	beq.n	8003532 <HAL_TIM_ConfigClockSource+0x15a>
 800347c:	e062      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	6899      	ldr	r1, [r3, #8]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f000 f974 	bl	800377a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	609a      	str	r2, [r3, #8]
      break;
 80034aa:	e04f      	b.n	800354c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6818      	ldr	r0, [r3, #0]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	6899      	ldr	r1, [r3, #8]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f000 f95d 	bl	800377a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034ce:	609a      	str	r2, [r3, #8]
      break;
 80034d0:	e03c      	b.n	800354c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6818      	ldr	r0, [r3, #0]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	6859      	ldr	r1, [r3, #4]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	461a      	mov	r2, r3
 80034e0:	f000 f8d4 	bl	800368c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2150      	movs	r1, #80	; 0x50
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 f92b 	bl	8003746 <TIM_ITRx_SetConfig>
      break;
 80034f0:	e02c      	b.n	800354c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6818      	ldr	r0, [r3, #0]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	6859      	ldr	r1, [r3, #4]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	461a      	mov	r2, r3
 8003500:	f000 f8f2 	bl	80036e8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2160      	movs	r1, #96	; 0x60
 800350a:	4618      	mov	r0, r3
 800350c:	f000 f91b 	bl	8003746 <TIM_ITRx_SetConfig>
      break;
 8003510:	e01c      	b.n	800354c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	6859      	ldr	r1, [r3, #4]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	461a      	mov	r2, r3
 8003520:	f000 f8b4 	bl	800368c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2140      	movs	r1, #64	; 0x40
 800352a:	4618      	mov	r0, r3
 800352c:	f000 f90b 	bl	8003746 <TIM_ITRx_SetConfig>
      break;
 8003530:	e00c      	b.n	800354c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4619      	mov	r1, r3
 800353c:	4610      	mov	r0, r2
 800353e:	f000 f902 	bl	8003746 <TIM_ITRx_SetConfig>
      break;
 8003542:	e003      	b.n	800354c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	73fb      	strb	r3, [r7, #15]
      break;
 8003548:	e000      	b.n	800354c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800354a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800355c:	7bfb      	ldrb	r3, [r7, #15]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr

08003578 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	bc80      	pop	{r7}
 8003588:	4770      	bx	lr

0800358a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr

0800359c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bc80      	pop	{r7}
 80035ac:	4770      	bx	lr
	...

080035b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a2f      	ldr	r2, [pc, #188]	; (8003680 <TIM_Base_SetConfig+0xd0>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d00b      	beq.n	80035e0 <TIM_Base_SetConfig+0x30>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ce:	d007      	beq.n	80035e0 <TIM_Base_SetConfig+0x30>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a2c      	ldr	r2, [pc, #176]	; (8003684 <TIM_Base_SetConfig+0xd4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d003      	beq.n	80035e0 <TIM_Base_SetConfig+0x30>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a2b      	ldr	r2, [pc, #172]	; (8003688 <TIM_Base_SetConfig+0xd8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d108      	bne.n	80035f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a22      	ldr	r2, [pc, #136]	; (8003680 <TIM_Base_SetConfig+0xd0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00b      	beq.n	8003612 <TIM_Base_SetConfig+0x62>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003600:	d007      	beq.n	8003612 <TIM_Base_SetConfig+0x62>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a1f      	ldr	r2, [pc, #124]	; (8003684 <TIM_Base_SetConfig+0xd4>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d003      	beq.n	8003612 <TIM_Base_SetConfig+0x62>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a1e      	ldr	r2, [pc, #120]	; (8003688 <TIM_Base_SetConfig+0xd8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d108      	bne.n	8003624 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a0d      	ldr	r2, [pc, #52]	; (8003680 <TIM_Base_SetConfig+0xd0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d103      	bne.n	8003658 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	691a      	ldr	r2, [r3, #16]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d005      	beq.n	8003676 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f023 0201 	bic.w	r2, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	611a      	str	r2, [r3, #16]
  }
}
 8003676:	bf00      	nop
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr
 8003680:	40012c00 	.word	0x40012c00
 8003684:	40000400 	.word	0x40000400
 8003688:	40000800 	.word	0x40000800

0800368c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	f023 0201 	bic.w	r2, r3, #1
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4313      	orrs	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f023 030a 	bic.w	r3, r3, #10
 80036c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	621a      	str	r2, [r3, #32]
}
 80036de:	bf00      	nop
 80036e0:	371c      	adds	r7, #28
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr

080036e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	f023 0210 	bic.w	r2, r3, #16
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	031b      	lsls	r3, r3, #12
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003724:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	4313      	orrs	r3, r2
 800372e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	621a      	str	r2, [r3, #32]
}
 800373c:	bf00      	nop
 800373e:	371c      	adds	r7, #28
 8003740:	46bd      	mov	sp, r7
 8003742:	bc80      	pop	{r7}
 8003744:	4770      	bx	lr

08003746 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003746:	b480      	push	{r7}
 8003748:	b085      	sub	sp, #20
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800375c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4313      	orrs	r3, r2
 8003764:	f043 0307 	orr.w	r3, r3, #7
 8003768:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	609a      	str	r2, [r3, #8]
}
 8003770:	bf00      	nop
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	4770      	bx	lr

0800377a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800377a:	b480      	push	{r7}
 800377c:	b087      	sub	sp, #28
 800377e:	af00      	add	r7, sp, #0
 8003780:	60f8      	str	r0, [r7, #12]
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	607a      	str	r2, [r7, #4]
 8003786:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003794:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	021a      	lsls	r2, r3, #8
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	431a      	orrs	r2, r3
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	609a      	str	r2, [r3, #8]
}
 80037ae:	bf00      	nop
 80037b0:	371c      	adds	r7, #28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bc80      	pop	{r7}
 80037b6:	4770      	bx	lr

080037b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e046      	b.n	800385e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a16      	ldr	r2, [pc, #88]	; (8003868 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d00e      	beq.n	8003832 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800381c:	d009      	beq.n	8003832 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a12      	ldr	r2, [pc, #72]	; (800386c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d004      	beq.n	8003832 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a10      	ldr	r2, [pc, #64]	; (8003870 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d10c      	bne.n	800384c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003838:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	4313      	orrs	r3, r2
 8003842:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr
 8003868:	40012c00 	.word	0x40012c00
 800386c:	40000400 	.word	0x40000400
 8003870:	40000800 	.word	0x40000800

08003874 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	bc80      	pop	{r7}
 8003884:	4770      	bx	lr

08003886 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr

08003898 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e042      	b.n	8003930 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fd fef2 	bl	80016a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2224      	movs	r2, #36	; 0x24
 80038c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 f82b 	bl	8003938 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695a      	ldr	r2, [r3, #20]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003900:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003910:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2220      	movs	r2, #32
 800391c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689a      	ldr	r2, [r3, #8]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	4313      	orrs	r3, r2
 8003966:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003972:	f023 030c 	bic.w	r3, r3, #12
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6812      	ldr	r2, [r2, #0]
 800397a:	68b9      	ldr	r1, [r7, #8]
 800397c:	430b      	orrs	r3, r1
 800397e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	699a      	ldr	r2, [r3, #24]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a2c      	ldr	r2, [pc, #176]	; (8003a4c <UART_SetConfig+0x114>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d103      	bne.n	80039a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039a0:	f7ff fb56 	bl	8003050 <HAL_RCC_GetPCLK2Freq>
 80039a4:	60f8      	str	r0, [r7, #12]
 80039a6:	e002      	b.n	80039ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80039a8:	f7ff fb3e 	bl	8003028 <HAL_RCC_GetPCLK1Freq>
 80039ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	4613      	mov	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	009a      	lsls	r2, r3, #2
 80039b8:	441a      	add	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c4:	4a22      	ldr	r2, [pc, #136]	; (8003a50 <UART_SetConfig+0x118>)
 80039c6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	0119      	lsls	r1, r3, #4
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	009a      	lsls	r2, r3, #2
 80039d8:	441a      	add	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80039e4:	4b1a      	ldr	r3, [pc, #104]	; (8003a50 <UART_SetConfig+0x118>)
 80039e6:	fba3 0302 	umull	r0, r3, r3, r2
 80039ea:	095b      	lsrs	r3, r3, #5
 80039ec:	2064      	movs	r0, #100	; 0x64
 80039ee:	fb00 f303 	mul.w	r3, r0, r3
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	3332      	adds	r3, #50	; 0x32
 80039f8:	4a15      	ldr	r2, [pc, #84]	; (8003a50 <UART_SetConfig+0x118>)
 80039fa:	fba2 2303 	umull	r2, r3, r2, r3
 80039fe:	095b      	lsrs	r3, r3, #5
 8003a00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a04:	4419      	add	r1, r3
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	009a      	lsls	r2, r3, #2
 8003a10:	441a      	add	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a1c:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <UART_SetConfig+0x118>)
 8003a1e:	fba3 0302 	umull	r0, r3, r3, r2
 8003a22:	095b      	lsrs	r3, r3, #5
 8003a24:	2064      	movs	r0, #100	; 0x64
 8003a26:	fb00 f303 	mul.w	r3, r0, r3
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	3332      	adds	r3, #50	; 0x32
 8003a30:	4a07      	ldr	r2, [pc, #28]	; (8003a50 <UART_SetConfig+0x118>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	095b      	lsrs	r3, r3, #5
 8003a38:	f003 020f 	and.w	r2, r3, #15
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	440a      	add	r2, r1
 8003a42:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a44:	bf00      	nop
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40013800 	.word	0x40013800
 8003a50:	51eb851f 	.word	0x51eb851f

08003a54 <__errno>:
 8003a54:	4b01      	ldr	r3, [pc, #4]	; (8003a5c <__errno+0x8>)
 8003a56:	6818      	ldr	r0, [r3, #0]
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	20000064 	.word	0x20000064

08003a60 <__libc_init_array>:
 8003a60:	b570      	push	{r4, r5, r6, lr}
 8003a62:	2600      	movs	r6, #0
 8003a64:	4d0c      	ldr	r5, [pc, #48]	; (8003a98 <__libc_init_array+0x38>)
 8003a66:	4c0d      	ldr	r4, [pc, #52]	; (8003a9c <__libc_init_array+0x3c>)
 8003a68:	1b64      	subs	r4, r4, r5
 8003a6a:	10a4      	asrs	r4, r4, #2
 8003a6c:	42a6      	cmp	r6, r4
 8003a6e:	d109      	bne.n	8003a84 <__libc_init_array+0x24>
 8003a70:	f000 fc6c 	bl	800434c <_init>
 8003a74:	2600      	movs	r6, #0
 8003a76:	4d0a      	ldr	r5, [pc, #40]	; (8003aa0 <__libc_init_array+0x40>)
 8003a78:	4c0a      	ldr	r4, [pc, #40]	; (8003aa4 <__libc_init_array+0x44>)
 8003a7a:	1b64      	subs	r4, r4, r5
 8003a7c:	10a4      	asrs	r4, r4, #2
 8003a7e:	42a6      	cmp	r6, r4
 8003a80:	d105      	bne.n	8003a8e <__libc_init_array+0x2e>
 8003a82:	bd70      	pop	{r4, r5, r6, pc}
 8003a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a88:	4798      	blx	r3
 8003a8a:	3601      	adds	r6, #1
 8003a8c:	e7ee      	b.n	8003a6c <__libc_init_array+0xc>
 8003a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a92:	4798      	blx	r3
 8003a94:	3601      	adds	r6, #1
 8003a96:	e7f2      	b.n	8003a7e <__libc_init_array+0x1e>
 8003a98:	08004460 	.word	0x08004460
 8003a9c:	08004460 	.word	0x08004460
 8003aa0:	08004460 	.word	0x08004460
 8003aa4:	08004464 	.word	0x08004464

08003aa8 <malloc>:
 8003aa8:	4b02      	ldr	r3, [pc, #8]	; (8003ab4 <malloc+0xc>)
 8003aaa:	4601      	mov	r1, r0
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	f000 b85f 	b.w	8003b70 <_malloc_r>
 8003ab2:	bf00      	nop
 8003ab4:	20000064 	.word	0x20000064

08003ab8 <free>:
 8003ab8:	4b02      	ldr	r3, [pc, #8]	; (8003ac4 <free+0xc>)
 8003aba:	4601      	mov	r1, r0
 8003abc:	6818      	ldr	r0, [r3, #0]
 8003abe:	f000 b80b 	b.w	8003ad8 <_free_r>
 8003ac2:	bf00      	nop
 8003ac4:	20000064 	.word	0x20000064

08003ac8 <memset>:
 8003ac8:	4603      	mov	r3, r0
 8003aca:	4402      	add	r2, r0
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d100      	bne.n	8003ad2 <memset+0xa>
 8003ad0:	4770      	bx	lr
 8003ad2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ad6:	e7f9      	b.n	8003acc <memset+0x4>

08003ad8 <_free_r>:
 8003ad8:	b538      	push	{r3, r4, r5, lr}
 8003ada:	4605      	mov	r5, r0
 8003adc:	2900      	cmp	r1, #0
 8003ade:	d043      	beq.n	8003b68 <_free_r+0x90>
 8003ae0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ae4:	1f0c      	subs	r4, r1, #4
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	bfb8      	it	lt
 8003aea:	18e4      	addlt	r4, r4, r3
 8003aec:	f000 f8ca 	bl	8003c84 <__malloc_lock>
 8003af0:	4a1e      	ldr	r2, [pc, #120]	; (8003b6c <_free_r+0x94>)
 8003af2:	6813      	ldr	r3, [r2, #0]
 8003af4:	4610      	mov	r0, r2
 8003af6:	b933      	cbnz	r3, 8003b06 <_free_r+0x2e>
 8003af8:	6063      	str	r3, [r4, #4]
 8003afa:	6014      	str	r4, [r2, #0]
 8003afc:	4628      	mov	r0, r5
 8003afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b02:	f000 b8c5 	b.w	8003c90 <__malloc_unlock>
 8003b06:	42a3      	cmp	r3, r4
 8003b08:	d90a      	bls.n	8003b20 <_free_r+0x48>
 8003b0a:	6821      	ldr	r1, [r4, #0]
 8003b0c:	1862      	adds	r2, r4, r1
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	bf01      	itttt	eq
 8003b12:	681a      	ldreq	r2, [r3, #0]
 8003b14:	685b      	ldreq	r3, [r3, #4]
 8003b16:	1852      	addeq	r2, r2, r1
 8003b18:	6022      	streq	r2, [r4, #0]
 8003b1a:	6063      	str	r3, [r4, #4]
 8003b1c:	6004      	str	r4, [r0, #0]
 8003b1e:	e7ed      	b.n	8003afc <_free_r+0x24>
 8003b20:	461a      	mov	r2, r3
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	b10b      	cbz	r3, 8003b2a <_free_r+0x52>
 8003b26:	42a3      	cmp	r3, r4
 8003b28:	d9fa      	bls.n	8003b20 <_free_r+0x48>
 8003b2a:	6811      	ldr	r1, [r2, #0]
 8003b2c:	1850      	adds	r0, r2, r1
 8003b2e:	42a0      	cmp	r0, r4
 8003b30:	d10b      	bne.n	8003b4a <_free_r+0x72>
 8003b32:	6820      	ldr	r0, [r4, #0]
 8003b34:	4401      	add	r1, r0
 8003b36:	1850      	adds	r0, r2, r1
 8003b38:	4283      	cmp	r3, r0
 8003b3a:	6011      	str	r1, [r2, #0]
 8003b3c:	d1de      	bne.n	8003afc <_free_r+0x24>
 8003b3e:	6818      	ldr	r0, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	4401      	add	r1, r0
 8003b44:	6011      	str	r1, [r2, #0]
 8003b46:	6053      	str	r3, [r2, #4]
 8003b48:	e7d8      	b.n	8003afc <_free_r+0x24>
 8003b4a:	d902      	bls.n	8003b52 <_free_r+0x7a>
 8003b4c:	230c      	movs	r3, #12
 8003b4e:	602b      	str	r3, [r5, #0]
 8003b50:	e7d4      	b.n	8003afc <_free_r+0x24>
 8003b52:	6820      	ldr	r0, [r4, #0]
 8003b54:	1821      	adds	r1, r4, r0
 8003b56:	428b      	cmp	r3, r1
 8003b58:	bf01      	itttt	eq
 8003b5a:	6819      	ldreq	r1, [r3, #0]
 8003b5c:	685b      	ldreq	r3, [r3, #4]
 8003b5e:	1809      	addeq	r1, r1, r0
 8003b60:	6021      	streq	r1, [r4, #0]
 8003b62:	6063      	str	r3, [r4, #4]
 8003b64:	6054      	str	r4, [r2, #4]
 8003b66:	e7c9      	b.n	8003afc <_free_r+0x24>
 8003b68:	bd38      	pop	{r3, r4, r5, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000104 	.word	0x20000104

08003b70 <_malloc_r>:
 8003b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b72:	1ccd      	adds	r5, r1, #3
 8003b74:	f025 0503 	bic.w	r5, r5, #3
 8003b78:	3508      	adds	r5, #8
 8003b7a:	2d0c      	cmp	r5, #12
 8003b7c:	bf38      	it	cc
 8003b7e:	250c      	movcc	r5, #12
 8003b80:	2d00      	cmp	r5, #0
 8003b82:	4606      	mov	r6, r0
 8003b84:	db01      	blt.n	8003b8a <_malloc_r+0x1a>
 8003b86:	42a9      	cmp	r1, r5
 8003b88:	d903      	bls.n	8003b92 <_malloc_r+0x22>
 8003b8a:	230c      	movs	r3, #12
 8003b8c:	6033      	str	r3, [r6, #0]
 8003b8e:	2000      	movs	r0, #0
 8003b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b92:	f000 f877 	bl	8003c84 <__malloc_lock>
 8003b96:	4921      	ldr	r1, [pc, #132]	; (8003c1c <_malloc_r+0xac>)
 8003b98:	680a      	ldr	r2, [r1, #0]
 8003b9a:	4614      	mov	r4, r2
 8003b9c:	b99c      	cbnz	r4, 8003bc6 <_malloc_r+0x56>
 8003b9e:	4f20      	ldr	r7, [pc, #128]	; (8003c20 <_malloc_r+0xb0>)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	b923      	cbnz	r3, 8003bae <_malloc_r+0x3e>
 8003ba4:	4621      	mov	r1, r4
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	f000 f83c 	bl	8003c24 <_sbrk_r>
 8003bac:	6038      	str	r0, [r7, #0]
 8003bae:	4629      	mov	r1, r5
 8003bb0:	4630      	mov	r0, r6
 8003bb2:	f000 f837 	bl	8003c24 <_sbrk_r>
 8003bb6:	1c43      	adds	r3, r0, #1
 8003bb8:	d123      	bne.n	8003c02 <_malloc_r+0x92>
 8003bba:	230c      	movs	r3, #12
 8003bbc:	4630      	mov	r0, r6
 8003bbe:	6033      	str	r3, [r6, #0]
 8003bc0:	f000 f866 	bl	8003c90 <__malloc_unlock>
 8003bc4:	e7e3      	b.n	8003b8e <_malloc_r+0x1e>
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	1b5b      	subs	r3, r3, r5
 8003bca:	d417      	bmi.n	8003bfc <_malloc_r+0x8c>
 8003bcc:	2b0b      	cmp	r3, #11
 8003bce:	d903      	bls.n	8003bd8 <_malloc_r+0x68>
 8003bd0:	6023      	str	r3, [r4, #0]
 8003bd2:	441c      	add	r4, r3
 8003bd4:	6025      	str	r5, [r4, #0]
 8003bd6:	e004      	b.n	8003be2 <_malloc_r+0x72>
 8003bd8:	6863      	ldr	r3, [r4, #4]
 8003bda:	42a2      	cmp	r2, r4
 8003bdc:	bf0c      	ite	eq
 8003bde:	600b      	streq	r3, [r1, #0]
 8003be0:	6053      	strne	r3, [r2, #4]
 8003be2:	4630      	mov	r0, r6
 8003be4:	f000 f854 	bl	8003c90 <__malloc_unlock>
 8003be8:	f104 000b 	add.w	r0, r4, #11
 8003bec:	1d23      	adds	r3, r4, #4
 8003bee:	f020 0007 	bic.w	r0, r0, #7
 8003bf2:	1ac2      	subs	r2, r0, r3
 8003bf4:	d0cc      	beq.n	8003b90 <_malloc_r+0x20>
 8003bf6:	1a1b      	subs	r3, r3, r0
 8003bf8:	50a3      	str	r3, [r4, r2]
 8003bfa:	e7c9      	b.n	8003b90 <_malloc_r+0x20>
 8003bfc:	4622      	mov	r2, r4
 8003bfe:	6864      	ldr	r4, [r4, #4]
 8003c00:	e7cc      	b.n	8003b9c <_malloc_r+0x2c>
 8003c02:	1cc4      	adds	r4, r0, #3
 8003c04:	f024 0403 	bic.w	r4, r4, #3
 8003c08:	42a0      	cmp	r0, r4
 8003c0a:	d0e3      	beq.n	8003bd4 <_malloc_r+0x64>
 8003c0c:	1a21      	subs	r1, r4, r0
 8003c0e:	4630      	mov	r0, r6
 8003c10:	f000 f808 	bl	8003c24 <_sbrk_r>
 8003c14:	3001      	adds	r0, #1
 8003c16:	d1dd      	bne.n	8003bd4 <_malloc_r+0x64>
 8003c18:	e7cf      	b.n	8003bba <_malloc_r+0x4a>
 8003c1a:	bf00      	nop
 8003c1c:	20000104 	.word	0x20000104
 8003c20:	20000108 	.word	0x20000108

08003c24 <_sbrk_r>:
 8003c24:	b538      	push	{r3, r4, r5, lr}
 8003c26:	2300      	movs	r3, #0
 8003c28:	4d05      	ldr	r5, [pc, #20]	; (8003c40 <_sbrk_r+0x1c>)
 8003c2a:	4604      	mov	r4, r0
 8003c2c:	4608      	mov	r0, r1
 8003c2e:	602b      	str	r3, [r5, #0]
 8003c30:	f7fd fdb2 	bl	8001798 <_sbrk>
 8003c34:	1c43      	adds	r3, r0, #1
 8003c36:	d102      	bne.n	8003c3e <_sbrk_r+0x1a>
 8003c38:	682b      	ldr	r3, [r5, #0]
 8003c3a:	b103      	cbz	r3, 8003c3e <_sbrk_r+0x1a>
 8003c3c:	6023      	str	r3, [r4, #0]
 8003c3e:	bd38      	pop	{r3, r4, r5, pc}
 8003c40:	20000264 	.word	0x20000264

08003c44 <siprintf>:
 8003c44:	b40e      	push	{r1, r2, r3}
 8003c46:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c4a:	b500      	push	{lr}
 8003c4c:	b09c      	sub	sp, #112	; 0x70
 8003c4e:	ab1d      	add	r3, sp, #116	; 0x74
 8003c50:	9002      	str	r0, [sp, #8]
 8003c52:	9006      	str	r0, [sp, #24]
 8003c54:	9107      	str	r1, [sp, #28]
 8003c56:	9104      	str	r1, [sp, #16]
 8003c58:	4808      	ldr	r0, [pc, #32]	; (8003c7c <siprintf+0x38>)
 8003c5a:	4909      	ldr	r1, [pc, #36]	; (8003c80 <siprintf+0x3c>)
 8003c5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c60:	9105      	str	r1, [sp, #20]
 8003c62:	6800      	ldr	r0, [r0, #0]
 8003c64:	a902      	add	r1, sp, #8
 8003c66:	9301      	str	r3, [sp, #4]
 8003c68:	f000 f874 	bl	8003d54 <_svfiprintf_r>
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	9b02      	ldr	r3, [sp, #8]
 8003c70:	701a      	strb	r2, [r3, #0]
 8003c72:	b01c      	add	sp, #112	; 0x70
 8003c74:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c78:	b003      	add	sp, #12
 8003c7a:	4770      	bx	lr
 8003c7c:	20000064 	.word	0x20000064
 8003c80:	ffff0208 	.word	0xffff0208

08003c84 <__malloc_lock>:
 8003c84:	4801      	ldr	r0, [pc, #4]	; (8003c8c <__malloc_lock+0x8>)
 8003c86:	f000 bafb 	b.w	8004280 <__retarget_lock_acquire_recursive>
 8003c8a:	bf00      	nop
 8003c8c:	2000026c 	.word	0x2000026c

08003c90 <__malloc_unlock>:
 8003c90:	4801      	ldr	r0, [pc, #4]	; (8003c98 <__malloc_unlock+0x8>)
 8003c92:	f000 baf6 	b.w	8004282 <__retarget_lock_release_recursive>
 8003c96:	bf00      	nop
 8003c98:	2000026c 	.word	0x2000026c

08003c9c <__ssputs_r>:
 8003c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca0:	688e      	ldr	r6, [r1, #8]
 8003ca2:	4682      	mov	sl, r0
 8003ca4:	429e      	cmp	r6, r3
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	4690      	mov	r8, r2
 8003caa:	461f      	mov	r7, r3
 8003cac:	d838      	bhi.n	8003d20 <__ssputs_r+0x84>
 8003cae:	898a      	ldrh	r2, [r1, #12]
 8003cb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003cb4:	d032      	beq.n	8003d1c <__ssputs_r+0x80>
 8003cb6:	6825      	ldr	r5, [r4, #0]
 8003cb8:	6909      	ldr	r1, [r1, #16]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	eba5 0901 	sub.w	r9, r5, r1
 8003cc0:	6965      	ldr	r5, [r4, #20]
 8003cc2:	444b      	add	r3, r9
 8003cc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ccc:	106d      	asrs	r5, r5, #1
 8003cce:	429d      	cmp	r5, r3
 8003cd0:	bf38      	it	cc
 8003cd2:	461d      	movcc	r5, r3
 8003cd4:	0553      	lsls	r3, r2, #21
 8003cd6:	d531      	bpl.n	8003d3c <__ssputs_r+0xa0>
 8003cd8:	4629      	mov	r1, r5
 8003cda:	f7ff ff49 	bl	8003b70 <_malloc_r>
 8003cde:	4606      	mov	r6, r0
 8003ce0:	b950      	cbnz	r0, 8003cf8 <__ssputs_r+0x5c>
 8003ce2:	230c      	movs	r3, #12
 8003ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce8:	f8ca 3000 	str.w	r3, [sl]
 8003cec:	89a3      	ldrh	r3, [r4, #12]
 8003cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cf2:	81a3      	strh	r3, [r4, #12]
 8003cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cf8:	464a      	mov	r2, r9
 8003cfa:	6921      	ldr	r1, [r4, #16]
 8003cfc:	f000 fad0 	bl	80042a0 <memcpy>
 8003d00:	89a3      	ldrh	r3, [r4, #12]
 8003d02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d0a:	81a3      	strh	r3, [r4, #12]
 8003d0c:	6126      	str	r6, [r4, #16]
 8003d0e:	444e      	add	r6, r9
 8003d10:	6026      	str	r6, [r4, #0]
 8003d12:	463e      	mov	r6, r7
 8003d14:	6165      	str	r5, [r4, #20]
 8003d16:	eba5 0509 	sub.w	r5, r5, r9
 8003d1a:	60a5      	str	r5, [r4, #8]
 8003d1c:	42be      	cmp	r6, r7
 8003d1e:	d900      	bls.n	8003d22 <__ssputs_r+0x86>
 8003d20:	463e      	mov	r6, r7
 8003d22:	4632      	mov	r2, r6
 8003d24:	4641      	mov	r1, r8
 8003d26:	6820      	ldr	r0, [r4, #0]
 8003d28:	f000 fac8 	bl	80042bc <memmove>
 8003d2c:	68a3      	ldr	r3, [r4, #8]
 8003d2e:	6822      	ldr	r2, [r4, #0]
 8003d30:	1b9b      	subs	r3, r3, r6
 8003d32:	4432      	add	r2, r6
 8003d34:	2000      	movs	r0, #0
 8003d36:	60a3      	str	r3, [r4, #8]
 8003d38:	6022      	str	r2, [r4, #0]
 8003d3a:	e7db      	b.n	8003cf4 <__ssputs_r+0x58>
 8003d3c:	462a      	mov	r2, r5
 8003d3e:	f000 fad7 	bl	80042f0 <_realloc_r>
 8003d42:	4606      	mov	r6, r0
 8003d44:	2800      	cmp	r0, #0
 8003d46:	d1e1      	bne.n	8003d0c <__ssputs_r+0x70>
 8003d48:	4650      	mov	r0, sl
 8003d4a:	6921      	ldr	r1, [r4, #16]
 8003d4c:	f7ff fec4 	bl	8003ad8 <_free_r>
 8003d50:	e7c7      	b.n	8003ce2 <__ssputs_r+0x46>
	...

08003d54 <_svfiprintf_r>:
 8003d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d58:	4698      	mov	r8, r3
 8003d5a:	898b      	ldrh	r3, [r1, #12]
 8003d5c:	4607      	mov	r7, r0
 8003d5e:	061b      	lsls	r3, r3, #24
 8003d60:	460d      	mov	r5, r1
 8003d62:	4614      	mov	r4, r2
 8003d64:	b09d      	sub	sp, #116	; 0x74
 8003d66:	d50e      	bpl.n	8003d86 <_svfiprintf_r+0x32>
 8003d68:	690b      	ldr	r3, [r1, #16]
 8003d6a:	b963      	cbnz	r3, 8003d86 <_svfiprintf_r+0x32>
 8003d6c:	2140      	movs	r1, #64	; 0x40
 8003d6e:	f7ff feff 	bl	8003b70 <_malloc_r>
 8003d72:	6028      	str	r0, [r5, #0]
 8003d74:	6128      	str	r0, [r5, #16]
 8003d76:	b920      	cbnz	r0, 8003d82 <_svfiprintf_r+0x2e>
 8003d78:	230c      	movs	r3, #12
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d80:	e0d1      	b.n	8003f26 <_svfiprintf_r+0x1d2>
 8003d82:	2340      	movs	r3, #64	; 0x40
 8003d84:	616b      	str	r3, [r5, #20]
 8003d86:	2300      	movs	r3, #0
 8003d88:	9309      	str	r3, [sp, #36]	; 0x24
 8003d8a:	2320      	movs	r3, #32
 8003d8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d90:	2330      	movs	r3, #48	; 0x30
 8003d92:	f04f 0901 	mov.w	r9, #1
 8003d96:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003f40 <_svfiprintf_r+0x1ec>
 8003d9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003da2:	4623      	mov	r3, r4
 8003da4:	469a      	mov	sl, r3
 8003da6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003daa:	b10a      	cbz	r2, 8003db0 <_svfiprintf_r+0x5c>
 8003dac:	2a25      	cmp	r2, #37	; 0x25
 8003dae:	d1f9      	bne.n	8003da4 <_svfiprintf_r+0x50>
 8003db0:	ebba 0b04 	subs.w	fp, sl, r4
 8003db4:	d00b      	beq.n	8003dce <_svfiprintf_r+0x7a>
 8003db6:	465b      	mov	r3, fp
 8003db8:	4622      	mov	r2, r4
 8003dba:	4629      	mov	r1, r5
 8003dbc:	4638      	mov	r0, r7
 8003dbe:	f7ff ff6d 	bl	8003c9c <__ssputs_r>
 8003dc2:	3001      	adds	r0, #1
 8003dc4:	f000 80aa 	beq.w	8003f1c <_svfiprintf_r+0x1c8>
 8003dc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003dca:	445a      	add	r2, fp
 8003dcc:	9209      	str	r2, [sp, #36]	; 0x24
 8003dce:	f89a 3000 	ldrb.w	r3, [sl]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 80a2 	beq.w	8003f1c <_svfiprintf_r+0x1c8>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f04f 32ff 	mov.w	r2, #4294967295
 8003dde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003de2:	f10a 0a01 	add.w	sl, sl, #1
 8003de6:	9304      	str	r3, [sp, #16]
 8003de8:	9307      	str	r3, [sp, #28]
 8003dea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003dee:	931a      	str	r3, [sp, #104]	; 0x68
 8003df0:	4654      	mov	r4, sl
 8003df2:	2205      	movs	r2, #5
 8003df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003df8:	4851      	ldr	r0, [pc, #324]	; (8003f40 <_svfiprintf_r+0x1ec>)
 8003dfa:	f000 fa43 	bl	8004284 <memchr>
 8003dfe:	9a04      	ldr	r2, [sp, #16]
 8003e00:	b9d8      	cbnz	r0, 8003e3a <_svfiprintf_r+0xe6>
 8003e02:	06d0      	lsls	r0, r2, #27
 8003e04:	bf44      	itt	mi
 8003e06:	2320      	movmi	r3, #32
 8003e08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e0c:	0711      	lsls	r1, r2, #28
 8003e0e:	bf44      	itt	mi
 8003e10:	232b      	movmi	r3, #43	; 0x2b
 8003e12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e16:	f89a 3000 	ldrb.w	r3, [sl]
 8003e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8003e1c:	d015      	beq.n	8003e4a <_svfiprintf_r+0xf6>
 8003e1e:	4654      	mov	r4, sl
 8003e20:	2000      	movs	r0, #0
 8003e22:	f04f 0c0a 	mov.w	ip, #10
 8003e26:	9a07      	ldr	r2, [sp, #28]
 8003e28:	4621      	mov	r1, r4
 8003e2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e2e:	3b30      	subs	r3, #48	; 0x30
 8003e30:	2b09      	cmp	r3, #9
 8003e32:	d94e      	bls.n	8003ed2 <_svfiprintf_r+0x17e>
 8003e34:	b1b0      	cbz	r0, 8003e64 <_svfiprintf_r+0x110>
 8003e36:	9207      	str	r2, [sp, #28]
 8003e38:	e014      	b.n	8003e64 <_svfiprintf_r+0x110>
 8003e3a:	eba0 0308 	sub.w	r3, r0, r8
 8003e3e:	fa09 f303 	lsl.w	r3, r9, r3
 8003e42:	4313      	orrs	r3, r2
 8003e44:	46a2      	mov	sl, r4
 8003e46:	9304      	str	r3, [sp, #16]
 8003e48:	e7d2      	b.n	8003df0 <_svfiprintf_r+0x9c>
 8003e4a:	9b03      	ldr	r3, [sp, #12]
 8003e4c:	1d19      	adds	r1, r3, #4
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	9103      	str	r1, [sp, #12]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	bfbb      	ittet	lt
 8003e56:	425b      	neglt	r3, r3
 8003e58:	f042 0202 	orrlt.w	r2, r2, #2
 8003e5c:	9307      	strge	r3, [sp, #28]
 8003e5e:	9307      	strlt	r3, [sp, #28]
 8003e60:	bfb8      	it	lt
 8003e62:	9204      	strlt	r2, [sp, #16]
 8003e64:	7823      	ldrb	r3, [r4, #0]
 8003e66:	2b2e      	cmp	r3, #46	; 0x2e
 8003e68:	d10c      	bne.n	8003e84 <_svfiprintf_r+0x130>
 8003e6a:	7863      	ldrb	r3, [r4, #1]
 8003e6c:	2b2a      	cmp	r3, #42	; 0x2a
 8003e6e:	d135      	bne.n	8003edc <_svfiprintf_r+0x188>
 8003e70:	9b03      	ldr	r3, [sp, #12]
 8003e72:	3402      	adds	r4, #2
 8003e74:	1d1a      	adds	r2, r3, #4
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	9203      	str	r2, [sp, #12]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	bfb8      	it	lt
 8003e7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e82:	9305      	str	r3, [sp, #20]
 8003e84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003f50 <_svfiprintf_r+0x1fc>
 8003e88:	2203      	movs	r2, #3
 8003e8a:	4650      	mov	r0, sl
 8003e8c:	7821      	ldrb	r1, [r4, #0]
 8003e8e:	f000 f9f9 	bl	8004284 <memchr>
 8003e92:	b140      	cbz	r0, 8003ea6 <_svfiprintf_r+0x152>
 8003e94:	2340      	movs	r3, #64	; 0x40
 8003e96:	eba0 000a 	sub.w	r0, r0, sl
 8003e9a:	fa03 f000 	lsl.w	r0, r3, r0
 8003e9e:	9b04      	ldr	r3, [sp, #16]
 8003ea0:	3401      	adds	r4, #1
 8003ea2:	4303      	orrs	r3, r0
 8003ea4:	9304      	str	r3, [sp, #16]
 8003ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eaa:	2206      	movs	r2, #6
 8003eac:	4825      	ldr	r0, [pc, #148]	; (8003f44 <_svfiprintf_r+0x1f0>)
 8003eae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003eb2:	f000 f9e7 	bl	8004284 <memchr>
 8003eb6:	2800      	cmp	r0, #0
 8003eb8:	d038      	beq.n	8003f2c <_svfiprintf_r+0x1d8>
 8003eba:	4b23      	ldr	r3, [pc, #140]	; (8003f48 <_svfiprintf_r+0x1f4>)
 8003ebc:	bb1b      	cbnz	r3, 8003f06 <_svfiprintf_r+0x1b2>
 8003ebe:	9b03      	ldr	r3, [sp, #12]
 8003ec0:	3307      	adds	r3, #7
 8003ec2:	f023 0307 	bic.w	r3, r3, #7
 8003ec6:	3308      	adds	r3, #8
 8003ec8:	9303      	str	r3, [sp, #12]
 8003eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ecc:	4433      	add	r3, r6
 8003ece:	9309      	str	r3, [sp, #36]	; 0x24
 8003ed0:	e767      	b.n	8003da2 <_svfiprintf_r+0x4e>
 8003ed2:	460c      	mov	r4, r1
 8003ed4:	2001      	movs	r0, #1
 8003ed6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003eda:	e7a5      	b.n	8003e28 <_svfiprintf_r+0xd4>
 8003edc:	2300      	movs	r3, #0
 8003ede:	f04f 0c0a 	mov.w	ip, #10
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	3401      	adds	r4, #1
 8003ee6:	9305      	str	r3, [sp, #20]
 8003ee8:	4620      	mov	r0, r4
 8003eea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003eee:	3a30      	subs	r2, #48	; 0x30
 8003ef0:	2a09      	cmp	r2, #9
 8003ef2:	d903      	bls.n	8003efc <_svfiprintf_r+0x1a8>
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0c5      	beq.n	8003e84 <_svfiprintf_r+0x130>
 8003ef8:	9105      	str	r1, [sp, #20]
 8003efa:	e7c3      	b.n	8003e84 <_svfiprintf_r+0x130>
 8003efc:	4604      	mov	r4, r0
 8003efe:	2301      	movs	r3, #1
 8003f00:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f04:	e7f0      	b.n	8003ee8 <_svfiprintf_r+0x194>
 8003f06:	ab03      	add	r3, sp, #12
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	462a      	mov	r2, r5
 8003f0c:	4638      	mov	r0, r7
 8003f0e:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <_svfiprintf_r+0x1f8>)
 8003f10:	a904      	add	r1, sp, #16
 8003f12:	f3af 8000 	nop.w
 8003f16:	1c42      	adds	r2, r0, #1
 8003f18:	4606      	mov	r6, r0
 8003f1a:	d1d6      	bne.n	8003eca <_svfiprintf_r+0x176>
 8003f1c:	89ab      	ldrh	r3, [r5, #12]
 8003f1e:	065b      	lsls	r3, r3, #25
 8003f20:	f53f af2c 	bmi.w	8003d7c <_svfiprintf_r+0x28>
 8003f24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f26:	b01d      	add	sp, #116	; 0x74
 8003f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f2c:	ab03      	add	r3, sp, #12
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	462a      	mov	r2, r5
 8003f32:	4638      	mov	r0, r7
 8003f34:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <_svfiprintf_r+0x1f8>)
 8003f36:	a904      	add	r1, sp, #16
 8003f38:	f000 f87c 	bl	8004034 <_printf_i>
 8003f3c:	e7eb      	b.n	8003f16 <_svfiprintf_r+0x1c2>
 8003f3e:	bf00      	nop
 8003f40:	0800442a 	.word	0x0800442a
 8003f44:	08004434 	.word	0x08004434
 8003f48:	00000000 	.word	0x00000000
 8003f4c:	08003c9d 	.word	0x08003c9d
 8003f50:	08004430 	.word	0x08004430

08003f54 <_printf_common>:
 8003f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f58:	4616      	mov	r6, r2
 8003f5a:	4699      	mov	r9, r3
 8003f5c:	688a      	ldr	r2, [r1, #8]
 8003f5e:	690b      	ldr	r3, [r1, #16]
 8003f60:	4607      	mov	r7, r0
 8003f62:	4293      	cmp	r3, r2
 8003f64:	bfb8      	it	lt
 8003f66:	4613      	movlt	r3, r2
 8003f68:	6033      	str	r3, [r6, #0]
 8003f6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f6e:	460c      	mov	r4, r1
 8003f70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f74:	b10a      	cbz	r2, 8003f7a <_printf_common+0x26>
 8003f76:	3301      	adds	r3, #1
 8003f78:	6033      	str	r3, [r6, #0]
 8003f7a:	6823      	ldr	r3, [r4, #0]
 8003f7c:	0699      	lsls	r1, r3, #26
 8003f7e:	bf42      	ittt	mi
 8003f80:	6833      	ldrmi	r3, [r6, #0]
 8003f82:	3302      	addmi	r3, #2
 8003f84:	6033      	strmi	r3, [r6, #0]
 8003f86:	6825      	ldr	r5, [r4, #0]
 8003f88:	f015 0506 	ands.w	r5, r5, #6
 8003f8c:	d106      	bne.n	8003f9c <_printf_common+0x48>
 8003f8e:	f104 0a19 	add.w	sl, r4, #25
 8003f92:	68e3      	ldr	r3, [r4, #12]
 8003f94:	6832      	ldr	r2, [r6, #0]
 8003f96:	1a9b      	subs	r3, r3, r2
 8003f98:	42ab      	cmp	r3, r5
 8003f9a:	dc28      	bgt.n	8003fee <_printf_common+0x9a>
 8003f9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fa0:	1e13      	subs	r3, r2, #0
 8003fa2:	6822      	ldr	r2, [r4, #0]
 8003fa4:	bf18      	it	ne
 8003fa6:	2301      	movne	r3, #1
 8003fa8:	0692      	lsls	r2, r2, #26
 8003faa:	d42d      	bmi.n	8004008 <_printf_common+0xb4>
 8003fac:	4649      	mov	r1, r9
 8003fae:	4638      	mov	r0, r7
 8003fb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fb4:	47c0      	blx	r8
 8003fb6:	3001      	adds	r0, #1
 8003fb8:	d020      	beq.n	8003ffc <_printf_common+0xa8>
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	68e5      	ldr	r5, [r4, #12]
 8003fbe:	f003 0306 	and.w	r3, r3, #6
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	bf18      	it	ne
 8003fc6:	2500      	movne	r5, #0
 8003fc8:	6832      	ldr	r2, [r6, #0]
 8003fca:	f04f 0600 	mov.w	r6, #0
 8003fce:	68a3      	ldr	r3, [r4, #8]
 8003fd0:	bf08      	it	eq
 8003fd2:	1aad      	subeq	r5, r5, r2
 8003fd4:	6922      	ldr	r2, [r4, #16]
 8003fd6:	bf08      	it	eq
 8003fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	bfc4      	itt	gt
 8003fe0:	1a9b      	subgt	r3, r3, r2
 8003fe2:	18ed      	addgt	r5, r5, r3
 8003fe4:	341a      	adds	r4, #26
 8003fe6:	42b5      	cmp	r5, r6
 8003fe8:	d11a      	bne.n	8004020 <_printf_common+0xcc>
 8003fea:	2000      	movs	r0, #0
 8003fec:	e008      	b.n	8004000 <_printf_common+0xac>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	4652      	mov	r2, sl
 8003ff2:	4649      	mov	r1, r9
 8003ff4:	4638      	mov	r0, r7
 8003ff6:	47c0      	blx	r8
 8003ff8:	3001      	adds	r0, #1
 8003ffa:	d103      	bne.n	8004004 <_printf_common+0xb0>
 8003ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8004000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004004:	3501      	adds	r5, #1
 8004006:	e7c4      	b.n	8003f92 <_printf_common+0x3e>
 8004008:	2030      	movs	r0, #48	; 0x30
 800400a:	18e1      	adds	r1, r4, r3
 800400c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004016:	4422      	add	r2, r4
 8004018:	3302      	adds	r3, #2
 800401a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800401e:	e7c5      	b.n	8003fac <_printf_common+0x58>
 8004020:	2301      	movs	r3, #1
 8004022:	4622      	mov	r2, r4
 8004024:	4649      	mov	r1, r9
 8004026:	4638      	mov	r0, r7
 8004028:	47c0      	blx	r8
 800402a:	3001      	adds	r0, #1
 800402c:	d0e6      	beq.n	8003ffc <_printf_common+0xa8>
 800402e:	3601      	adds	r6, #1
 8004030:	e7d9      	b.n	8003fe6 <_printf_common+0x92>
	...

08004034 <_printf_i>:
 8004034:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004038:	460c      	mov	r4, r1
 800403a:	7e27      	ldrb	r7, [r4, #24]
 800403c:	4691      	mov	r9, r2
 800403e:	2f78      	cmp	r7, #120	; 0x78
 8004040:	4680      	mov	r8, r0
 8004042:	469a      	mov	sl, r3
 8004044:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004046:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800404a:	d807      	bhi.n	800405c <_printf_i+0x28>
 800404c:	2f62      	cmp	r7, #98	; 0x62
 800404e:	d80a      	bhi.n	8004066 <_printf_i+0x32>
 8004050:	2f00      	cmp	r7, #0
 8004052:	f000 80d9 	beq.w	8004208 <_printf_i+0x1d4>
 8004056:	2f58      	cmp	r7, #88	; 0x58
 8004058:	f000 80a4 	beq.w	80041a4 <_printf_i+0x170>
 800405c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004060:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004064:	e03a      	b.n	80040dc <_printf_i+0xa8>
 8004066:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800406a:	2b15      	cmp	r3, #21
 800406c:	d8f6      	bhi.n	800405c <_printf_i+0x28>
 800406e:	a001      	add	r0, pc, #4	; (adr r0, 8004074 <_printf_i+0x40>)
 8004070:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004074:	080040cd 	.word	0x080040cd
 8004078:	080040e1 	.word	0x080040e1
 800407c:	0800405d 	.word	0x0800405d
 8004080:	0800405d 	.word	0x0800405d
 8004084:	0800405d 	.word	0x0800405d
 8004088:	0800405d 	.word	0x0800405d
 800408c:	080040e1 	.word	0x080040e1
 8004090:	0800405d 	.word	0x0800405d
 8004094:	0800405d 	.word	0x0800405d
 8004098:	0800405d 	.word	0x0800405d
 800409c:	0800405d 	.word	0x0800405d
 80040a0:	080041ef 	.word	0x080041ef
 80040a4:	08004111 	.word	0x08004111
 80040a8:	080041d1 	.word	0x080041d1
 80040ac:	0800405d 	.word	0x0800405d
 80040b0:	0800405d 	.word	0x0800405d
 80040b4:	08004211 	.word	0x08004211
 80040b8:	0800405d 	.word	0x0800405d
 80040bc:	08004111 	.word	0x08004111
 80040c0:	0800405d 	.word	0x0800405d
 80040c4:	0800405d 	.word	0x0800405d
 80040c8:	080041d9 	.word	0x080041d9
 80040cc:	680b      	ldr	r3, [r1, #0]
 80040ce:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80040d2:	1d1a      	adds	r2, r3, #4
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	600a      	str	r2, [r1, #0]
 80040d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040dc:	2301      	movs	r3, #1
 80040de:	e0a4      	b.n	800422a <_printf_i+0x1f6>
 80040e0:	6825      	ldr	r5, [r4, #0]
 80040e2:	6808      	ldr	r0, [r1, #0]
 80040e4:	062e      	lsls	r6, r5, #24
 80040e6:	f100 0304 	add.w	r3, r0, #4
 80040ea:	d50a      	bpl.n	8004102 <_printf_i+0xce>
 80040ec:	6805      	ldr	r5, [r0, #0]
 80040ee:	600b      	str	r3, [r1, #0]
 80040f0:	2d00      	cmp	r5, #0
 80040f2:	da03      	bge.n	80040fc <_printf_i+0xc8>
 80040f4:	232d      	movs	r3, #45	; 0x2d
 80040f6:	426d      	negs	r5, r5
 80040f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040fc:	230a      	movs	r3, #10
 80040fe:	485e      	ldr	r0, [pc, #376]	; (8004278 <_printf_i+0x244>)
 8004100:	e019      	b.n	8004136 <_printf_i+0x102>
 8004102:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004106:	6805      	ldr	r5, [r0, #0]
 8004108:	600b      	str	r3, [r1, #0]
 800410a:	bf18      	it	ne
 800410c:	b22d      	sxthne	r5, r5
 800410e:	e7ef      	b.n	80040f0 <_printf_i+0xbc>
 8004110:	680b      	ldr	r3, [r1, #0]
 8004112:	6825      	ldr	r5, [r4, #0]
 8004114:	1d18      	adds	r0, r3, #4
 8004116:	6008      	str	r0, [r1, #0]
 8004118:	0628      	lsls	r0, r5, #24
 800411a:	d501      	bpl.n	8004120 <_printf_i+0xec>
 800411c:	681d      	ldr	r5, [r3, #0]
 800411e:	e002      	b.n	8004126 <_printf_i+0xf2>
 8004120:	0669      	lsls	r1, r5, #25
 8004122:	d5fb      	bpl.n	800411c <_printf_i+0xe8>
 8004124:	881d      	ldrh	r5, [r3, #0]
 8004126:	2f6f      	cmp	r7, #111	; 0x6f
 8004128:	bf0c      	ite	eq
 800412a:	2308      	moveq	r3, #8
 800412c:	230a      	movne	r3, #10
 800412e:	4852      	ldr	r0, [pc, #328]	; (8004278 <_printf_i+0x244>)
 8004130:	2100      	movs	r1, #0
 8004132:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004136:	6866      	ldr	r6, [r4, #4]
 8004138:	2e00      	cmp	r6, #0
 800413a:	bfa8      	it	ge
 800413c:	6821      	ldrge	r1, [r4, #0]
 800413e:	60a6      	str	r6, [r4, #8]
 8004140:	bfa4      	itt	ge
 8004142:	f021 0104 	bicge.w	r1, r1, #4
 8004146:	6021      	strge	r1, [r4, #0]
 8004148:	b90d      	cbnz	r5, 800414e <_printf_i+0x11a>
 800414a:	2e00      	cmp	r6, #0
 800414c:	d04d      	beq.n	80041ea <_printf_i+0x1b6>
 800414e:	4616      	mov	r6, r2
 8004150:	fbb5 f1f3 	udiv	r1, r5, r3
 8004154:	fb03 5711 	mls	r7, r3, r1, r5
 8004158:	5dc7      	ldrb	r7, [r0, r7]
 800415a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800415e:	462f      	mov	r7, r5
 8004160:	42bb      	cmp	r3, r7
 8004162:	460d      	mov	r5, r1
 8004164:	d9f4      	bls.n	8004150 <_printf_i+0x11c>
 8004166:	2b08      	cmp	r3, #8
 8004168:	d10b      	bne.n	8004182 <_printf_i+0x14e>
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	07df      	lsls	r7, r3, #31
 800416e:	d508      	bpl.n	8004182 <_printf_i+0x14e>
 8004170:	6923      	ldr	r3, [r4, #16]
 8004172:	6861      	ldr	r1, [r4, #4]
 8004174:	4299      	cmp	r1, r3
 8004176:	bfde      	ittt	le
 8004178:	2330      	movle	r3, #48	; 0x30
 800417a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800417e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004182:	1b92      	subs	r2, r2, r6
 8004184:	6122      	str	r2, [r4, #16]
 8004186:	464b      	mov	r3, r9
 8004188:	4621      	mov	r1, r4
 800418a:	4640      	mov	r0, r8
 800418c:	f8cd a000 	str.w	sl, [sp]
 8004190:	aa03      	add	r2, sp, #12
 8004192:	f7ff fedf 	bl	8003f54 <_printf_common>
 8004196:	3001      	adds	r0, #1
 8004198:	d14c      	bne.n	8004234 <_printf_i+0x200>
 800419a:	f04f 30ff 	mov.w	r0, #4294967295
 800419e:	b004      	add	sp, #16
 80041a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041a4:	4834      	ldr	r0, [pc, #208]	; (8004278 <_printf_i+0x244>)
 80041a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80041aa:	680e      	ldr	r6, [r1, #0]
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80041b2:	061f      	lsls	r7, r3, #24
 80041b4:	600e      	str	r6, [r1, #0]
 80041b6:	d514      	bpl.n	80041e2 <_printf_i+0x1ae>
 80041b8:	07d9      	lsls	r1, r3, #31
 80041ba:	bf44      	itt	mi
 80041bc:	f043 0320 	orrmi.w	r3, r3, #32
 80041c0:	6023      	strmi	r3, [r4, #0]
 80041c2:	b91d      	cbnz	r5, 80041cc <_printf_i+0x198>
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	f023 0320 	bic.w	r3, r3, #32
 80041ca:	6023      	str	r3, [r4, #0]
 80041cc:	2310      	movs	r3, #16
 80041ce:	e7af      	b.n	8004130 <_printf_i+0xfc>
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	f043 0320 	orr.w	r3, r3, #32
 80041d6:	6023      	str	r3, [r4, #0]
 80041d8:	2378      	movs	r3, #120	; 0x78
 80041da:	4828      	ldr	r0, [pc, #160]	; (800427c <_printf_i+0x248>)
 80041dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041e0:	e7e3      	b.n	80041aa <_printf_i+0x176>
 80041e2:	065e      	lsls	r6, r3, #25
 80041e4:	bf48      	it	mi
 80041e6:	b2ad      	uxthmi	r5, r5
 80041e8:	e7e6      	b.n	80041b8 <_printf_i+0x184>
 80041ea:	4616      	mov	r6, r2
 80041ec:	e7bb      	b.n	8004166 <_printf_i+0x132>
 80041ee:	680b      	ldr	r3, [r1, #0]
 80041f0:	6826      	ldr	r6, [r4, #0]
 80041f2:	1d1d      	adds	r5, r3, #4
 80041f4:	6960      	ldr	r0, [r4, #20]
 80041f6:	600d      	str	r5, [r1, #0]
 80041f8:	0635      	lsls	r5, r6, #24
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	d501      	bpl.n	8004202 <_printf_i+0x1ce>
 80041fe:	6018      	str	r0, [r3, #0]
 8004200:	e002      	b.n	8004208 <_printf_i+0x1d4>
 8004202:	0671      	lsls	r1, r6, #25
 8004204:	d5fb      	bpl.n	80041fe <_printf_i+0x1ca>
 8004206:	8018      	strh	r0, [r3, #0]
 8004208:	2300      	movs	r3, #0
 800420a:	4616      	mov	r6, r2
 800420c:	6123      	str	r3, [r4, #16]
 800420e:	e7ba      	b.n	8004186 <_printf_i+0x152>
 8004210:	680b      	ldr	r3, [r1, #0]
 8004212:	1d1a      	adds	r2, r3, #4
 8004214:	600a      	str	r2, [r1, #0]
 8004216:	681e      	ldr	r6, [r3, #0]
 8004218:	2100      	movs	r1, #0
 800421a:	4630      	mov	r0, r6
 800421c:	6862      	ldr	r2, [r4, #4]
 800421e:	f000 f831 	bl	8004284 <memchr>
 8004222:	b108      	cbz	r0, 8004228 <_printf_i+0x1f4>
 8004224:	1b80      	subs	r0, r0, r6
 8004226:	6060      	str	r0, [r4, #4]
 8004228:	6863      	ldr	r3, [r4, #4]
 800422a:	6123      	str	r3, [r4, #16]
 800422c:	2300      	movs	r3, #0
 800422e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004232:	e7a8      	b.n	8004186 <_printf_i+0x152>
 8004234:	4632      	mov	r2, r6
 8004236:	4649      	mov	r1, r9
 8004238:	4640      	mov	r0, r8
 800423a:	6923      	ldr	r3, [r4, #16]
 800423c:	47d0      	blx	sl
 800423e:	3001      	adds	r0, #1
 8004240:	d0ab      	beq.n	800419a <_printf_i+0x166>
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	079b      	lsls	r3, r3, #30
 8004246:	d413      	bmi.n	8004270 <_printf_i+0x23c>
 8004248:	68e0      	ldr	r0, [r4, #12]
 800424a:	9b03      	ldr	r3, [sp, #12]
 800424c:	4298      	cmp	r0, r3
 800424e:	bfb8      	it	lt
 8004250:	4618      	movlt	r0, r3
 8004252:	e7a4      	b.n	800419e <_printf_i+0x16a>
 8004254:	2301      	movs	r3, #1
 8004256:	4632      	mov	r2, r6
 8004258:	4649      	mov	r1, r9
 800425a:	4640      	mov	r0, r8
 800425c:	47d0      	blx	sl
 800425e:	3001      	adds	r0, #1
 8004260:	d09b      	beq.n	800419a <_printf_i+0x166>
 8004262:	3501      	adds	r5, #1
 8004264:	68e3      	ldr	r3, [r4, #12]
 8004266:	9903      	ldr	r1, [sp, #12]
 8004268:	1a5b      	subs	r3, r3, r1
 800426a:	42ab      	cmp	r3, r5
 800426c:	dcf2      	bgt.n	8004254 <_printf_i+0x220>
 800426e:	e7eb      	b.n	8004248 <_printf_i+0x214>
 8004270:	2500      	movs	r5, #0
 8004272:	f104 0619 	add.w	r6, r4, #25
 8004276:	e7f5      	b.n	8004264 <_printf_i+0x230>
 8004278:	0800443b 	.word	0x0800443b
 800427c:	0800444c 	.word	0x0800444c

08004280 <__retarget_lock_acquire_recursive>:
 8004280:	4770      	bx	lr

08004282 <__retarget_lock_release_recursive>:
 8004282:	4770      	bx	lr

08004284 <memchr>:
 8004284:	4603      	mov	r3, r0
 8004286:	b510      	push	{r4, lr}
 8004288:	b2c9      	uxtb	r1, r1
 800428a:	4402      	add	r2, r0
 800428c:	4293      	cmp	r3, r2
 800428e:	4618      	mov	r0, r3
 8004290:	d101      	bne.n	8004296 <memchr+0x12>
 8004292:	2000      	movs	r0, #0
 8004294:	e003      	b.n	800429e <memchr+0x1a>
 8004296:	7804      	ldrb	r4, [r0, #0]
 8004298:	3301      	adds	r3, #1
 800429a:	428c      	cmp	r4, r1
 800429c:	d1f6      	bne.n	800428c <memchr+0x8>
 800429e:	bd10      	pop	{r4, pc}

080042a0 <memcpy>:
 80042a0:	440a      	add	r2, r1
 80042a2:	4291      	cmp	r1, r2
 80042a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80042a8:	d100      	bne.n	80042ac <memcpy+0xc>
 80042aa:	4770      	bx	lr
 80042ac:	b510      	push	{r4, lr}
 80042ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042b2:	4291      	cmp	r1, r2
 80042b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042b8:	d1f9      	bne.n	80042ae <memcpy+0xe>
 80042ba:	bd10      	pop	{r4, pc}

080042bc <memmove>:
 80042bc:	4288      	cmp	r0, r1
 80042be:	b510      	push	{r4, lr}
 80042c0:	eb01 0402 	add.w	r4, r1, r2
 80042c4:	d902      	bls.n	80042cc <memmove+0x10>
 80042c6:	4284      	cmp	r4, r0
 80042c8:	4623      	mov	r3, r4
 80042ca:	d807      	bhi.n	80042dc <memmove+0x20>
 80042cc:	1e43      	subs	r3, r0, #1
 80042ce:	42a1      	cmp	r1, r4
 80042d0:	d008      	beq.n	80042e4 <memmove+0x28>
 80042d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80042da:	e7f8      	b.n	80042ce <memmove+0x12>
 80042dc:	4601      	mov	r1, r0
 80042de:	4402      	add	r2, r0
 80042e0:	428a      	cmp	r2, r1
 80042e2:	d100      	bne.n	80042e6 <memmove+0x2a>
 80042e4:	bd10      	pop	{r4, pc}
 80042e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042ee:	e7f7      	b.n	80042e0 <memmove+0x24>

080042f0 <_realloc_r>:
 80042f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f2:	4607      	mov	r7, r0
 80042f4:	4614      	mov	r4, r2
 80042f6:	460e      	mov	r6, r1
 80042f8:	b921      	cbnz	r1, 8004304 <_realloc_r+0x14>
 80042fa:	4611      	mov	r1, r2
 80042fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004300:	f7ff bc36 	b.w	8003b70 <_malloc_r>
 8004304:	b922      	cbnz	r2, 8004310 <_realloc_r+0x20>
 8004306:	f7ff fbe7 	bl	8003ad8 <_free_r>
 800430a:	4625      	mov	r5, r4
 800430c:	4628      	mov	r0, r5
 800430e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004310:	f000 f814 	bl	800433c <_malloc_usable_size_r>
 8004314:	42a0      	cmp	r0, r4
 8004316:	d20f      	bcs.n	8004338 <_realloc_r+0x48>
 8004318:	4621      	mov	r1, r4
 800431a:	4638      	mov	r0, r7
 800431c:	f7ff fc28 	bl	8003b70 <_malloc_r>
 8004320:	4605      	mov	r5, r0
 8004322:	2800      	cmp	r0, #0
 8004324:	d0f2      	beq.n	800430c <_realloc_r+0x1c>
 8004326:	4631      	mov	r1, r6
 8004328:	4622      	mov	r2, r4
 800432a:	f7ff ffb9 	bl	80042a0 <memcpy>
 800432e:	4631      	mov	r1, r6
 8004330:	4638      	mov	r0, r7
 8004332:	f7ff fbd1 	bl	8003ad8 <_free_r>
 8004336:	e7e9      	b.n	800430c <_realloc_r+0x1c>
 8004338:	4635      	mov	r5, r6
 800433a:	e7e7      	b.n	800430c <_realloc_r+0x1c>

0800433c <_malloc_usable_size_r>:
 800433c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004340:	1f18      	subs	r0, r3, #4
 8004342:	2b00      	cmp	r3, #0
 8004344:	bfbc      	itt	lt
 8004346:	580b      	ldrlt	r3, [r1, r0]
 8004348:	18c0      	addlt	r0, r0, r3
 800434a:	4770      	bx	lr

0800434c <_init>:
 800434c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434e:	bf00      	nop
 8004350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004352:	bc08      	pop	{r3}
 8004354:	469e      	mov	lr, r3
 8004356:	4770      	bx	lr

08004358 <_fini>:
 8004358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435a:	bf00      	nop
 800435c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800435e:	bc08      	pop	{r3}
 8004360:	469e      	mov	lr, r3
 8004362:	4770      	bx	lr
